{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../../../../ModelAction/modelUtil';\nimport { useStoreModel } from '../../../../../ModelAction/useStore';\nimport { fpMergePre } from '../../../../../tools/utils';\nimport { HeaderTitle } from '../../../../../components/HeaderTitle/HeaderTitle';\nimport { setForm } from '../../../../../tools/commonAction';\nimport { useRouter } from 'next/router';\nimport { doc } from '../../../../../graphqlTypes/doc';\nimport { CreditAddressInputTypeEnum } from '../../../../../ss_common/enum';\nimport { myAddressModel } from '../../myAddress/list';\nimport { CardFieldContain } from './fieldContain';\nexport var MyCreditCardEditModel = modelFactory('myCreditCardEditModel', {\n  selectId: '',\n  form: {\n    number: '',\n    code: '',\n    name: '',\n    userName: '',\n    addressDetail: '',\n    zipCode: '',\n    city: '',\n    zip: '',\n    province: '',\n    district: '',\n    address: '',\n    contact: '',\n    expirationTime: null,\n    creditAddressInputType: CreditAddressInputTypeEnum.Input\n  },\n  isEditNumber: true\n}, {\n  setForm: setForm,\n  clearForm: function clearForm(value, option) {\n    return option.setData(fpMergePre({\n      form: {\n        number: '',\n        code: '',\n        name: '',\n        userName: '',\n        addressDetail: '',\n        zipCode: '',\n        city: '',\n        zip: '',\n        province: '',\n        district: '',\n        address: '',\n        contact: '',\n        expirationTime: null,\n        creditAddressInputType: CreditAddressInputTypeEnum.Input\n      }\n    }));\n  },\n  changeSelectId: function changeSelectId(value, option) {\n    return option.setData(fpMergePre({\n      selectId: \"\".concat(value.id),\n      form: {\n        zip: value.zip,\n        province: value.province,\n        city: value.city,\n        district: value.district,\n        address: value.address,\n        contact: value.contactInformation\n      }\n    }));\n  },\n  submit: function submit(value, option) {\n    var _option$data$form = option.data.form,\n        id = _option$data$form.id,\n        form = _objectWithoutProperties(_option$data$form, [\"id\"]);\n\n    return option.mutate(doc.saveUserPayCard, {\n      data: _objectSpread(_objectSpread({}, form), id ? {\n        id: id\n      } : {})\n    });\n  },\n  getOne: function () {\n    var _getOne = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, option) {\n      var _res$userPayCard;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return option.query(doc.userPayCard, {\n                data: _objectSpread({}, value)\n              });\n\n            case 2:\n              res = _context.sent;\n              option.setData(fpMergePre({\n                isEditNumber: false,\n                form: _objectSpread({}, (_res$userPayCard = res === null || res === void 0 ? void 0 : res.userPayCard) !== null && _res$userPayCard !== void 0 ? _res$userPayCard : {})\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getOne(_x, _x2) {\n      return _getOne.apply(this, arguments);\n    }\n\n    return getOne;\n  }(),\n  numberFocus: function numberFocus(value, option) {\n    if (!option.data.isEditNumber) {\n      option.setData(fpMergePre({\n        isEditNumber: true,\n        form: {\n          number: ''\n        }\n      }));\n    }\n  }\n});\nexport var MyCreditCardEdit = function MyCreditCardEdit() {\n  var _ref, _router$query;\n\n  var router = useRouter();\n  var id = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id) !== null && _ref !== void 0 ? _ref : '';\n\n  var _useStoreModel = useStoreModel(myAddressModel),\n      actionsMyAddressModel = _useStoreModel.actions;\n\n  var _useStoreModel2 = useStoreModel(MyCreditCardEditModel),\n      actionsMyCreditCardEditModel = _useStoreModel2.actions;\n\n  useEffect(function () {\n    if (id && id !== '0') {\n      actionsMyCreditCardEditModel.getOne({\n        id: id\n      });\n    } else {\n      actionsMyCreditCardEditModel.setForm(['id', '']);\n    }\n  }, [actionsMyCreditCardEditModel, id]);\n  useEffect(function () {\n    actionsMyAddressModel.getList();\n  }, []);\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: \"\".concat(id === '0' ? '新增' : '编辑', \"\\u4FE1\\u7528\\u5361\"),\n    backCall: actionsMyCreditCardEditModel.clearForm\n  }), __jsx(CardFieldContain, {\n    finallyAction: function finallyAction() {\n      router.back();\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}