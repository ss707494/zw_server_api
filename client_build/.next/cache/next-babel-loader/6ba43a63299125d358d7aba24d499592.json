{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../../../../ModelAction/modelUtil';\nimport { doc } from '../../../../../graphqlTypes/doc';\nimport { useStoreModel } from '../../../../../ModelAction/useStore';\nimport { GroupProductItem, ProductItemOneRow } from '../../../../../components/ProductItem/ProductItem';\nimport styled from 'styled-components';\nimport { ll } from '../../../../../tools/dealKey';\nimport { dealUrlQuery, fpMergePre } from '../../../../../tools/utils';\nimport Router, { useRouter } from 'next/router';\nimport { SaleRankTypeEnum } from '../../../../../ss_common/enum';\nimport { Tab, Tabs } from '@material-ui/core';\nimport { Space } from '../../../../../components/Box/Box';\nimport { HomeTabsModel } from '../Tabs/Tabs';\nimport { HomeType } from '../../appModule';\nexport const SalesRankModel = modelFactory('SalesRank', {\n  listData: []\n}, {\n  getList: async (value, option) => {\n    var _res$productListOrder, _res$productListOrder2;\n\n    const res = await option.query(doc.productListOrderByOrder, _objectSpread({\n      orderByType: ''\n    }, value !== null && value !== void 0 ? value : {}));\n    option.setData(fpMergePre({\n      listData: (_res$productListOrder = res === null || res === void 0 ? void 0 : (_res$productListOrder2 = res.productListOrderByOrder) === null || _res$productListOrder2 === void 0 ? void 0 : _res$productListOrder2.list) !== null && _res$productListOrder !== void 0 ? _res$productListOrder : []\n    }));\n  },\n  tabChange: ([value, homeType], option) => {\n    const query = dealUrlQuery({\n      salesRankType: value\n    });\n    Router.push(`/m/${homeType}/[appModule]${query}`, `/m/${homeType}/salesRank${query}`);\n  }\n});\nconst Box = styled.div.withConfig({\n  displayName: \"SalesRank__Box\",\n  componentId: \"sc-9f7dxi-0\"\n})([\"\"]);\nconst SaleRankTypeEnumLabel = {\n  [SaleRankTypeEnum.OneDay]: '本日',\n  [SaleRankTypeEnum.OneWeek]: '本周',\n  [SaleRankTypeEnum.OneMonth]: '本月'\n};\nexport const SalesRank = () => {\n  var _router$query$salesRa;\n\n  const {\n    state: homeTabsState\n  } = useStoreModel(HomeTabsModel);\n  const router = useRouter();\n  useEffect(() => {\n    var _router$query;\n\n    if (!router.query.salesRankType || ![SaleRankTypeEnum.OneMonth, SaleRankTypeEnum.OneWeek, SaleRankTypeEnum.OneDay].includes(`${router === null || router === void 0 ? void 0 : (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.salesRankType}`)) {\n      const query = dealUrlQuery({\n        salesRankType: SaleRankTypeEnum.OneDay\n      });\n      router.push(`/m/${homeTabsState.homeType}/[appModule]${query}`, `/m/${homeTabsState.homeType}/salesRank${query}`);\n    }\n  }, [router.query.salesRankType, homeTabsState.homeType, router]);\n  const {\n    actions: actionsSalesRankModel,\n    state: stateSalesRankModel\n  } = useStoreModel(SalesRankModel);\n  useEffect(() => {\n    if (router.query.salesRankType) {\n      actionsSalesRankModel.getList({\n        productInput: {\n          isGroup: homeTabsState.homeType === HomeType.group ? 1 : 0\n        },\n        orderByType: router.query.salesRankType\n      });\n    }\n  }, [actionsSalesRankModel, homeTabsState.homeType, router.query.salesRankType]);\n  return __jsx(Box, null, __jsx(Tabs, {\n    variant: 'fullWidth',\n    value: (_router$query$salesRa = router.query.salesRankType) !== null && _router$query$salesRa !== void 0 ? _router$query$salesRa : SaleRankTypeEnum.OneDay,\n    onChange: (event, value) => actionsSalesRankModel.tabChange([value, homeTabsState.homeType])\n  }, [[SaleRankTypeEnum.OneDay, '本日排行'], [SaleRankTypeEnum.OneWeek, '本周排行'], [SaleRankTypeEnum.OneMonth, '本月排行']].map(v => __jsx(Tab, {\n    key: `SaleRankTab${v[0]}`,\n    value: v[0],\n    label: ll(v[1])\n  }))), __jsx(Space, {\n    h: 16\n  }), stateSalesRankModel.listData.map(product => {\n    var _router$query2, _router$query3;\n\n    return homeTabsState.homeType === HomeType.group ? __jsx(GroupProductItem, {\n      product: product,\n      key: `ProductItem_${product.id}`,\n      showSumOrder: true,\n      sumOrderTip: SaleRankTypeEnumLabel[`${(_router$query2 = router.query) === null || _router$query2 === void 0 ? void 0 : _router$query2.salesRankType}`]\n    }) : __jsx(ProductItemOneRow, {\n      key: `ProductItemOneRow_${product.id}`,\n      product: product,\n      showSumOrder: true,\n      sumOrderTip: SaleRankTypeEnumLabel[`${(_router$query3 = router.query) === null || _router$query3 === void 0 ? void 0 : _router$query3.salesRankType}`]\n    });\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}