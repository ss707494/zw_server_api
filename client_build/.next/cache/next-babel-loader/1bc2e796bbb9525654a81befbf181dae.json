{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Head from 'next/head';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { useRouter } from 'next/router';\nimport { showMessage } from '../../../components/Message/Message';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nimport { orderDetailModel } from '../me/orderDetail/orderDetail';\nimport { dealMoney } from '../../../tools/utils';\nimport { OrderState } from '../../../ss_common/enum';\nimport { makeStyles } from '@material-ui/styles';\nconst useStyles = makeStyles({\n  '@global': {\n    'body, html': {\n      backgroundColor: '#F7F8F9',\n      color: '#373F4A',\n      fontFamily: '\"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: 'normal',\n      height: '100%'\n    },\n    button: {\n      border: '0',\n      fontWeight: 500\n    },\n    fieldset: {\n      margin: '0',\n      padding: '0',\n      border: '0'\n    },\n    '#form-container': {\n      position: 'relative',\n      width: '380px',\n      margin: '0 auto',\n      top: '50%',\n      transform: 'translateY(22%)'\n    },\n    '.third': {\n      cssFloat: 'left',\n      width: 'calc((100% - 32px) / 3)',\n      padding: '0',\n      margin: '0 16px 16px 0'\n    },\n    '.third:last-of-type': {\n      marginRight: '0'\n    },\n    '.sq-input': {\n      height: '56px',\n      boxSizing: 'border-box',\n      border: '1px solid #E0E2E3',\n      backgroundColor: 'white',\n      borderRadius: '6px',\n      display: 'inline-block',\n      WebkitTransition: 'border-color .2s ease-in-out',\n      MozTransition: 'border-color .2s ease-in-out',\n      transition: 'border-color .2s ease-in-out'\n    },\n    '.sq-input--focus': {\n      border: '1px solid #4A90E2'\n    },\n    '.sq-input--error': {\n      border: '1px solid #E02F2F'\n    },\n    '#sq-card-number': {\n      marginBottom: '16px'\n    },\n    '.button-credit-card': {\n      width: '100%',\n      height: '56px',\n      marginTop: '10px',\n      background: '#4A90E2',\n      borderRadius: '6px',\n      cursor: 'pointer',\n      display: 'block',\n      color: '#FFFFFF',\n      fontSize: '16px',\n      lineHeight: '24px',\n      fontWeight: 700,\n      letterSpacing: '0',\n      textAlign: 'center',\n      WebkitTransition: 'background .2s ease-in-out',\n      MozTransition: 'background .2s ease-in-out',\n      transition: 'background .2s ease-in-out'\n    },\n    '.button-credit-card:hover': {\n      backgroundColor: '#4281CB'\n    }\n  }\n});\nconst applicationId = true ? 'sq0idp-IAEwX77Hdunl5dWByHQjIQ' : 'sandbox-sq0idb-42FQ7wGBwzibToRM9_zdFw'; // const applicationId = 'sq0idp-IAEwX77Hdunl5dWByHQjIQ'\n\nexport const Pay = () => {\n  var _ref, _router$query;\n\n  useStyles();\n  const router = useRouter();\n  const orderId = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.orderId) !== null && _ref !== void 0 ? _ref : '';\n  const {\n    state: stateOD,\n    actions: actionsOD\n  } = useStoreModel(orderDetailModel);\n  const orderInfo = stateOD.orderInfo || {};\n  useEffect(() => {\n    if (orderId) {\n      actionsOD.getDetail(`${orderId}`);\n    }\n  }, [actionsOD, orderId]);\n  useEffect(() => {\n    // @ts-ignore\n    if (window.SqPaymentForm && orderInfo.actuallyPaid) {\n      var _document$querySelect;\n\n      // @ts-ignore\n      const paymentForm = new SqPaymentForm({\n        // Initialize the payment form elements\n        applicationId,\n        inputClass: 'sq-input',\n        autoBuild: false,\n        // Customize the CSS for SqPaymentForm iframe elements\n        inputStyles: [{\n          fontSize: '16px',\n          lineHeight: '24px',\n          padding: '16px',\n          placeholderColor: '#a0a0a0',\n          backgroundColor: 'transparent'\n        }],\n        // Initialize the credit card placeholders\n        cardNumber: {\n          elementId: 'sq-card-number',\n          placeholder: 'Card Number'\n        },\n        cvv: {\n          elementId: 'sq-cvv',\n          placeholder: 'CVV'\n        },\n        expirationDate: {\n          elementId: 'sq-expiration-date',\n          placeholder: 'MM/YY'\n        },\n        postalCode: {\n          elementId: 'sq-postal-code',\n          placeholder: 'Postal'\n        },\n        // SqPaymentForm callback functions\n        callbacks: {\n          /*\r\n          * callback function: cardNonceResponseReceived\r\n          * Triggered when: SqPaymentForm completes a card nonce request\r\n          */\n          cardNonceResponseReceived: function (errors, nonce, cardData) {\n            var _orderInfo$actuallyPa;\n\n            if (errors) {\n              // Log errors from nonce generation to the browser developer console.\n              console.error('Encountered errors:');\n              errors.forEach(function (error) {\n                console.error('  ' + error.message);\n              });\n              showMessage('Encountered errors, check browser developer console for more details');\n              return;\n            } // alert(`The generated nonce is:\\n${nonce}`)\n\n\n            fetch(`/pay/process-payment`, {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                nonce: nonce,\n                amount: ~~(((_orderInfo$actuallyPa = orderInfo.actuallyPaid) !== null && _orderInfo$actuallyPa !== void 0 ? _orderInfo$actuallyPa : 0) * 100)\n              })\n            }).catch(err => {\n              showMessage('Network error: ' + err);\n            }).then(response => {\n              if (!response.ok) {\n                return response.json().then(errorInfo => Promise.reject(errorInfo)); //UPDATE HERE\n              }\n\n              return response.json(); //UPDATE HERE\n            }).then(data => {\n              // console.log(data) //UPDATE HERE\n              // showMessage('Payment complete successfully!\\nCheck browser developer console for more details')\n              return actionsOD.updateOrder({\n                id: orderId,\n                state: OrderState.Paid\n              });\n            }).then(() => {\n              showMessage('支付成功');\n              router.replace('/m/cart/result');\n            }).catch(err => {\n              console.error(err);\n              showMessage('Payment failed to complete!\\nCheck browser developer console for more details');\n            });\n          }\n        }\n      });\n      paymentForm.build();\n\n      const onGetCardNonce = event => {\n        // Don't submit the form until SqPaymentForm returns with a nonce\n        event.preventDefault(); // Request a nonce from the SqPaymentForm object\n\n        paymentForm.requestCardNonce();\n      };\n\n      (_document$querySelect = document.querySelector('#sq-creditcard')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.addEventListener('click', onGetCardNonce);\n    }\n  }, [actionsOD, orderId, orderInfo.actuallyPaid, router]);\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"pay\"), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: true ? 'https://js.squareup.com/v2/paymentform' : 'https://js.squareupsandbox.com/v2/paymentform'\n  })), __jsx(HeaderTitle, {\n    title: '支付',\n    backCall: () => {\n      router.replace('/m/home');\n      return true;\n    }\n  }), __jsx(\"div\", {\n    id: \"form-container\"\n  }, !orderInfo.actuallyPaid && '未找到订单信息', __jsx(\"div\", {\n    id: \"sq-card-number\"\n  }), __jsx(\"div\", {\n    className: \"third\",\n    id: \"sq-expiration-date\"\n  }), __jsx(\"div\", {\n    className: \"third\",\n    id: \"sq-cvv\"\n  }), __jsx(\"div\", {\n    className: \"third\",\n    id: \"sq-postal-code\"\n  }), __jsx(\"button\", {\n    id: \"sq-creditcard\",\n    className: \"button-credit-card\"\n  }, \"Pay \", dealMoney(orderInfo.actuallyPaid))));\n};","map":null,"metadata":{},"sourceType":"module"}