{"ast":null,"code":"import { modelFactory } from '../ModelAction/modelUtil';\nimport { fpMerge, fpSet } from '../tools/utils';\nexport var dialogModelFactory = function dialogModelFactory(name, initData) {\n  return modelFactory(\"\".concat(name, \"_dialogModelFactory\"), {\n    dialogData: initData,\n    open: false,\n    isEdit: -1,\n    openResolve: function () {}\n  }, {\n    openClick: function openClick(value, _ref) {\n      var setData = _ref.setData;\n      return new Promise(function (resolve) {\n        setData(function (preData) {\n          return fpMerge(preData, {\n            open: true,\n            dialogData: value,\n            isEdit: -1,\n            openResolve: resolve\n          });\n        });\n      });\n    },\n    openEditClick: function openEditClick(value, _ref2) {\n      var setData = _ref2.setData;\n      return setData(function (pre) {\n        return fpMerge(pre, {\n          open: true,\n          dialogData: value.data,\n          isEdit: value.index\n        });\n      });\n    },\n    onClose: function onClose(value, _ref3) {\n      var data = _ref3.data,\n          setData = _ref3.setData;\n      data.openResolve(false);\n      setData(function (pre) {\n        return fpMerge(fpSet(pre, 'dialogData', {}), {\n          dialogData: initData,\n          open: false\n        });\n      });\n    },\n    setdialog: function setdialog(value, _ref4) {\n      var setData = _ref4.setData;\n      return setData(function (data) {\n        return fpMerge(data, {\n          dialogData: value\n        });\n      });\n    }\n  });\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/commonModel/dialog.ts"],"names":["modelFactory","fpMerge","fpSet","dialogModelFactory","name","initData","dialogData","open","isEdit","openResolve","openClick","value","setData","Promise","resolve","preData","openEditClick","pre","data","index","onClose","setdialog"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,0BAA3B;AACA,SAAQC,OAAR,EAAiBC,KAAjB,QAA6B,gBAA7B;AASA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAIC,IAAJ,EAAkBC,QAAlB;AAAA,SAAkCL,YAAY,WAAII,IAAJ,0BAA+B;AAC7GE,IAAAA,UAAU,EAAED,QADiG;AAE7GE,IAAAA,IAAI,EAAE,KAFuG;AAG7GC,IAAAA,MAAM,EAAE,CAAC,CAHoG;AAI7GC,IAAAA,WAAW,EAAG,YAAM,CACnB;AAL4G,GAA/B,EAM7E;AACDC,IAAAA,SAAS,EAAE,mBAACC,KAAD,QAAsB;AAAA,UAAbC,OAAa,QAAbA,OAAa;AAC/B,aAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5BF,QAAAA,OAAO,CAAC,UAAAG,OAAO;AAAA,iBAAId,OAAO,CAACc,OAAD,EAAU;AAClCR,YAAAA,IAAI,EAAE,IAD4B;AAElCD,YAAAA,UAAU,EAAEK,KAFsB;AAGlCH,YAAAA,MAAM,EAAE,CAAC,CAHyB;AAIlCC,YAAAA,WAAW,EAAEK;AAJqB,WAAV,CAAX;AAAA,SAAR,CAAP;AAMD,OAPM,CAAP;AAQD,KAVA;AAWDE,IAAAA,aAAa,EAAE,uBAACL,KAAD;AAAA,UAAuCC,OAAvC,SAAuCA,OAAvC;AAAA,aAAoDA,OAAO,CAAC,UAAAK,GAAG;AAAA,eAAIhB,OAAO,CAACgB,GAAD,EAAM;AAC7FV,UAAAA,IAAI,EAAE,IADuF;AAE7FD,UAAAA,UAAU,EAAEK,KAAK,CAACO,IAF2E;AAG7FV,UAAAA,MAAM,EAAEG,KAAK,CAACQ;AAH+E,SAAN,CAAX;AAAA,OAAJ,CAA3D;AAAA,KAXd;AAgBDC,IAAAA,OAAO,EAAE,iBAACT,KAAD,SAA4B;AAAA,UAAnBO,IAAmB,SAAnBA,IAAmB;AAAA,UAAbN,OAAa,SAAbA,OAAa;AACnCM,MAAAA,IAAI,CAACT,WAAL,CAAiB,KAAjB;AACAG,MAAAA,OAAO,CAAC,UAAAK,GAAG;AAAA,eAAIhB,OAAO,CAACC,KAAK,CAACe,GAAD,EAAM,YAAN,EAAoB,EAApB,CAAN,EAA+B;AACnDX,UAAAA,UAAU,EAAED,QADuC;AAEnDE,UAAAA,IAAI,EAAE;AAF6C,SAA/B,CAAX;AAAA,OAAJ,CAAP;AAID,KAtBA;AAuBDc,IAAAA,SAAS,EAAE,mBAACV,KAAD;AAAA,UAAkBC,OAAlB,SAAkBA,OAAlB;AAAA,aAA+BA,OAAO,CAAC,UAAAM,IAAI;AAAA,eAAIjB,OAAO,CAACiB,IAAD,EAAO;AACtEZ,UAAAA,UAAU,EAAEK;AAD0D,SAAP,CAAX;AAAA,OAAL,CAAtC;AAAA;AAvBV,GAN6E,CAA9C;AAAA,CAA3B","sourcesContent":["import {modelFactory} from '../ModelAction/modelUtil'\r\nimport {fpMerge, fpSet} from '../tools/utils'\r\n\r\nexport interface DialogModel<T> {\r\n  open: boolean\r\n  dialogData: T\r\n}\r\n\r\ntype ResolverFun = (value: any) => any\r\n\r\nexport const dialogModelFactory = <T>(name: string, initData: T) => modelFactory(`${name}_dialogModelFactory`, {\r\n  dialogData: initData,\r\n  open: false,\r\n  isEdit: -1,\r\n  openResolve: (() => {\r\n  }) as ResolverFun,\r\n}, {\r\n  openClick: (value, {setData}) => {\r\n    return new Promise(resolve => {\r\n      setData(preData => fpMerge(preData, {\r\n        open: true,\r\n        dialogData: value,\r\n        isEdit: -1,\r\n        openResolve: resolve,\r\n      }))\r\n    })\r\n  },\r\n  openEditClick: (value: { data: any; index: number }, {setData}) => setData(pre => fpMerge(pre, {\r\n    open: true,\r\n    dialogData: value.data,\r\n    isEdit: value.index,\r\n  })),\r\n  onClose: (value, {data, setData}) => {\r\n    data.openResolve(false)\r\n    setData(pre => fpMerge(fpSet(pre, 'dialogData', {}), {\r\n      dialogData: initData,\r\n      open: false,\r\n    }))\r\n  },\r\n  setdialog: (value: T | any, {setData}) => setData(data => fpMerge(data, {\r\n    dialogData: value,\r\n  })),\r\n})\r\n"]},"metadata":{},"sourceType":"module"}