{"ast":null,"code":"var _config$publicRuntime, _config$publicRuntime2;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport 'cross-fetch/polyfill';\nimport { getToken, setToken } from '../tools/token';\nimport Router from 'next/router';\nimport ApolloClient from 'apollo-boost';\nimport { ssLog } from '../tools/global';\nimport { doc } from '../graphqlTypes/doc';\nimport { showMessage } from '../components/Message/Message';\nimport getConfig from 'next/config';\nconst config = getConfig();\nconst client_api_uri = (_config$publicRuntime = config === null || config === void 0 ? void 0 : (_config$publicRuntime2 = config.publicRuntimeConfig) === null || _config$publicRuntime2 === void 0 ? void 0 : _config$publicRuntime2.client_api_uri) !== null && _config$publicRuntime !== void 0 ? _config$publicRuntime : 'http://localhost:4464/type__graphql/api';\n\nconst omitTypename = (key, value) => {\n  return key === '__typename' ? undefined : value;\n};\n\nexport const getClient = () => {\n  const request = operation => {\n    if (operation.variables) {\n      operation.variables = JSON.parse(JSON.stringify(operation.variables), omitTypename);\n    }\n\n    operation.setContext(({\n      headers = {}\n    }) => ({\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        // 后台万能权限\n        Authorization: getToken()\n      })\n    }));\n  };\n\n  const refreshToken = () => {\n    graphQLQuery()(doc.refreshToken.doc, {\n      data: getToken('refreshtoken')\n    }).then(res => {\n      var _res$data, _res$data$refreshToke;\n\n      if ((_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$refreshToke = _res$data.refreshToken) === null || _res$data$refreshToke === void 0 ? void 0 : _res$data$refreshToke.token) {\n        var _res$data2, _res$data2$refreshTok, _res$data3, _res$data3$refreshTok;\n\n        setToken((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$refreshTok = _res$data2.refreshToken) === null || _res$data2$refreshTok === void 0 ? void 0 : _res$data2$refreshTok.token);\n        setToken((_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$refreshTok = _res$data3.refreshToken) === null || _res$data3$refreshTok === void 0 ? void 0 : _res$data3$refreshTok.refreshtoken, 'refreshtoken');\n        showMessage({\n          message: '登录超时,刷新登录信息'\n        });\n        Router.reload();\n      } else {\n        showMessage({\n          message: '请重新登录'\n        });\n        Router.push('/m/login');\n      }\n    }).catch(err => {\n      ssLog(err);\n      showMessage({\n        message: '请重新登录'\n      });\n      Router.push('/m/login');\n    });\n  };\n\n  const onError = ({\n    response,\n    operation,\n    graphQLErrors,\n    networkError\n  }) => {\n    // console.log(response)\n    // console.log(operation)\n    if (graphQLErrors) {\n      graphQLErrors.forEach(({\n        message,\n        locations,\n        path,\n        extensions\n      }) => {\n        ssLog(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n\n        if ((extensions === null || extensions === void 0 ? void 0 : extensions.code) === 'UNAUTHENTICATED') {\n          if (message.includes('first')) {\n            refreshToken();\n          } else {\n            showMessage({\n              message: '请重新登录'\n            });\n            Router.push('/m/login');\n          }\n        }\n\n        if (message.includes('Unexpected error')) {\n          showMessage({\n            message: message.split('\"')[1],\n            msg_type: 'error'\n          });\n        } else {\n          showMessage({\n            message\n          });\n        }\n      });\n    }\n\n    if (networkError) {\n      var _networkError$result;\n\n      const errMsg = 'bodyText' in networkError ? networkError === null || networkError === void 0 ? void 0 : networkError.bodyText : 'result' in networkError ? networkError === null || networkError === void 0 ? void 0 : (_networkError$result = networkError.result) === null || _networkError$result === void 0 ? void 0 : _networkError$result.error : '';\n      ssLog(`[Network error]: ${errMsg}`);\n\n      if ('statusCode' in networkError && (networkError === null || networkError === void 0 ? void 0 : networkError.statusCode) === 401) {\n        if (errMsg.includes('first') && getToken('refreshtoken')) {\n          refreshToken();\n        } else {\n          showMessage({\n            message: '请重新登录'\n          });\n          Router.push('/m/login');\n        }\n      }\n    }\n  };\n\n  return new ApolloClient({\n    // link: httpLink,\n    uri: client_api_uri,\n    request,\n    onError\n  });\n};\nconst defaultClient = getClient(); // const dealParams = ((params: any) => ({\n//   data: params,\n// }))\n\nconst dealParams = params => params;\n\nexport const graphQLQuery = (client = defaultClient) => async (query, params, option) => {\n  var _option$dealParamsIn;\n\n  const _dealParamsIn = (_option$dealParamsIn = option === null || option === void 0 ? void 0 : option.dealParamsIn) !== null && _option$dealParamsIn !== void 0 ? _option$dealParamsIn : dealParams;\n\n  return client.query(_objectSpread({\n    fetchPolicy: 'network-only',\n    query,\n    variables: _objectSpread({}, _dealParamsIn ? _dealParamsIn(params) : params)\n  }, option));\n};\nexport const graphQLMutate = (client = defaultClient) => async (mutation, params, option) => {\n  var _option$dealParamsIn2;\n\n  const _dealParamsIn = (_option$dealParamsIn2 = option === null || option === void 0 ? void 0 : option.dealParamsIn) !== null && _option$dealParamsIn2 !== void 0 ? _option$dealParamsIn2 : dealParams;\n\n  return client.mutate(_objectSpread({\n    mutation,\n    variables: _objectSpread({}, _dealParamsIn ? _dealParamsIn(params) : params)\n  }, option));\n};\n\nconst serverClient = () => new ApolloClient({\n  // link: httpLink,\n  uri: client_api_uri\n});\n\nexport const serverQuery = async (query, params, option) => {\n  var _await$graphQLQuery;\n\n  return (_await$graphQLQuery = await graphQLQuery(serverClient())(query, params, option)) === null || _await$graphQLQuery === void 0 ? void 0 : _await$graphQLQuery.data;\n};\nexport const serverMutate = async (mutation, params, option) => {\n  var _await$graphQLMutate;\n\n  return (_await$graphQLMutate = await graphQLMutate(serverClient())(mutation, params, option)) === null || _await$graphQLMutate === void 0 ? void 0 : _await$graphQLMutate.data;\n};","map":null,"metadata":{},"sourceType":"module"}