{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\me\\\\pickupAddress\\\\list.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect } from 'react';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { DictTypeEnum } from '../../../ss_common/enum';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nimport { fpMergePre } from '../../../tools/utils';\nimport styled from 'styled-components';\nimport { ButtonBase } from '@material-ui/core';\nimport { dealImgUrl } from '../../../tools/img';\nvar pickupAddressModel = modelFactory('pickupAddressModel', {\n  list: []\n}, {\n  getList: function getList(value, option) {\n    var _res$getDataConfig$va, _res$getDataConfig, _res$getDataConfig$va2;\n\n    var res;\n    return _regeneratorRuntime.async(function getList$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(option.query(doc.getDataConfig, {\n              data: {\n                type: DictTypeEnum.SelfAddress\n              }\n            }));\n\n          case 2:\n            res = _context.sent;\n            option.setData(fpMergePre({\n              list: (_res$getDataConfig$va = res === null || res === void 0 ? void 0 : (_res$getDataConfig = res.getDataConfig) === null || _res$getDataConfig === void 0 ? void 0 : (_res$getDataConfig$va2 = _res$getDataConfig.value) === null || _res$getDataConfig$va2 === void 0 ? void 0 : _res$getDataConfig$va2.list) !== null && _res$getDataConfig$va !== void 0 ? _res$getDataConfig$va : []\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nvar ItemBox = styled(ButtonBase)(_templateObject());\nexport var PickupAddress = function PickupAddress() {\n  var _useStoreModel = useStoreModel(pickupAddressModel),\n      actionsPAM = _useStoreModel.actions,\n      statePAM = _useStoreModel.state;\n\n  useEffect(function () {\n    if (!statePAM.list.length) {\n      actionsPAM.getList();\n    }\n  }, []);\n  console.log(statePAM.list[0]);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 10\n    }\n  }, __jsx(HeaderTitle, {\n    title: '我的取货点',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }), statePAM.list.map(function (value) {\n    return __jsx(ItemBox, {\n      key: \"PickupAddress_\".concat(value.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 40\n      }\n    }, __jsx(\"img\", {\n      src: dealImgUrl(value.imgUrl),\n      alt: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }), __jsx(\"section\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, __jsx(\"header\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, value.fullName), __jsx(\"footer\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, \"\".concat(value.province, \" \").concat(value.city, \" \").concat(value.streetAddress))));\n  }));\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/me/pickupAddress/list.tsx"],"names":["React","useEffect","HeaderTitle","modelFactory","doc","DictTypeEnum","useStoreModel","fpMergePre","styled","ButtonBase","dealImgUrl","pickupAddressModel","list","getList","value","option","query","getDataConfig","data","type","SelfAddress","res","setData","ItemBox","PickupAddress","actionsPAM","actions","statePAM","state","length","console","log","map","id","imgUrl","fullName","province","city","streetAddress"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,QAA0B,6CAA1B;AACA,SAAQC,YAAR,QAA2B,gCAA3B;AACA,SAAQC,GAAR,QAAkB,2BAAlB;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AAEA,SAAQC,aAAR,QAA4B,+BAA5B;AACA,SAAQC,UAAR,QAAyB,sBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AAEA,IAAMC,kBAAkB,GAAGR,YAAY,CAAC,oBAAD,EAAuB;AAC5DS,EAAAA,IAAI,EAAE;AADsD,CAAvB,EAEpC;AACDC,EAAAA,OAAO,EAAE,iBAAOC,KAAP,EAAcC,MAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACWA,MAAM,CAACC,KAAP,CAAaZ,GAAG,CAACa,aAAjB,EAAgC;AAChDC,cAAAA,IAAI,EAAE;AACJC,gBAAAA,IAAI,EAAEd,YAAY,CAACe;AADf;AAD0C,aAAhC,CADX;;AAAA;AACDC,YAAAA,GADC;AAMPN,YAAAA,MAAM,CAACO,OAAP,CAAef,UAAU,CAAC;AACxBK,cAAAA,IAAI,2BAAES,GAAF,aAAEA,GAAF,6CAAEA,GAAG,CAAEJ,aAAP,iFAAE,mBAAoBH,KAAtB,2DAAE,uBAA2BF,IAA7B,yEAAqC;AADjB,aAAD,CAAzB;;AANO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADR,CAFoC,CAAvC;AAgBA,IAAMW,OAAO,GAAGf,MAAM,CAACC,UAAD,CAAT,mBAAb;AAKA,OAAO,IAAMe,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,uBACclB,aAAa,CAACK,kBAAD,CAD3B;AAAA,MACjBc,UADiB,kBAC1BC,OAD0B;AAAA,MACEC,QADF,kBACLC,KADK;;AAEjC3B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAAC0B,QAAQ,CAACf,IAAT,CAAciB,MAAnB,EAA2B;AACzBJ,MAAAA,UAAU,CAACZ,OAAX;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMAiB,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACf,IAAT,CAAc,CAAd,CAAZ;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,WAAD;AACI,IAAA,KAAK,EAAE,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAIJe,QAAQ,CAACf,IAAT,CAAcoB,GAAd,CAAkB,UAAClB,KAAD;AAAA,WAAgB,MAAC,OAAD;AAAS,MAAA,GAAG,0BAAmBA,KAAK,CAACmB,EAAzB,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACjC;AAAK,MAAA,GAAG,EAAEvB,UAAU,CAACI,KAAK,CAACoB,MAAP,CAApB;AACK,MAAA,GAAG,EAAC,EADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADiC,EAGjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASpB,KAAK,CAACqB,QAAf,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACMrB,KAAK,CAACsB,QADZ,cACwBtB,KAAK,CAACuB,IAD9B,cACsCvB,KAAK,CAACwB,aAD5C,EAFF,CAHiC,CAAhB;AAAA,GAAlB,CAJI,CAAP;AAeD,CAzBM","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {HeaderTitle} from '../../../components/HeaderTitle/HeaderTitle'\r\nimport {modelFactory} from '../../../ModelAction/modelUtil'\r\nimport {doc} from '../../../graphqlTypes/doc'\r\nimport {DictTypeEnum} from '../../../ss_common/enum'\r\nimport {DataConfigItemInput} from '../../../graphqlTypes/types'\r\nimport {useStoreModel} from '../../../ModelAction/useStore'\r\nimport {fpMergePre} from '../../../tools/utils'\r\nimport styled from 'styled-components'\r\nimport {ButtonBase} from '@material-ui/core'\r\nimport {dealImgUrl} from '../../../tools/img'\r\n\r\nconst pickupAddressModel = modelFactory('pickupAddressModel', {\r\n  list: [],\r\n}, {\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.getDataConfig, {\r\n      data: {\r\n        type: DictTypeEnum.SelfAddress,\r\n      } as DataConfigItemInput,\r\n    })\r\n    option.setData(fpMergePre({\r\n      list: res?.getDataConfig?.value?.list ?? [],\r\n    }))\r\n  },\r\n\r\n})\r\n\r\nconst ItemBox = styled(ButtonBase)`\r\n  display: flex;\r\n  \r\n`\r\n\r\nexport const PickupAddress = () => {\r\n  const {actions: actionsPAM, state: statePAM} = useStoreModel(pickupAddressModel)\r\n  useEffect(() => {\r\n    if (!statePAM.list.length) {\r\n      actionsPAM.getList()\r\n    }\r\n  }, [])\r\n\r\n  console.log(statePAM.list[0])\r\n\r\n  return <div>\r\n    <HeaderTitle\r\n        title={'我的取货点'}\r\n    />\r\n    {statePAM.list.map((value: any) => <ItemBox key={`PickupAddress_${value.id}`}>\r\n      <img src={dealImgUrl(value.imgUrl)}\r\n           alt=\"\"/>\r\n      <section>\r\n        <header>{value.fullName}</header>\r\n        <footer>\r\n          {`${value.province} ${value.city} ${value.streetAddress}`}\r\n        </footer>\r\n      </section>\r\n    </ItemBox>)}\r\n  </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}