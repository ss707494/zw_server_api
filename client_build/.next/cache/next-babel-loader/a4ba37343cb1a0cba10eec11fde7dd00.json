{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\cart\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { PickUpTypeEnum } from '../../ss_common/enum';\nimport { fpMergePre } from '../../tools/utils';\nimport { setForm } from '../../tools/commonAction';\nimport { doc } from '../../graphqlTypes/doc';\nimport { ShopCartPage } from './shopCart';\nimport React from 'react';\nimport { useStoreModel } from '../../ModelAction/useStore';\nimport { OrderPage } from './orderPage';\nexport var pageTypeEnum = {\n  shopCart: 'shopCart',\n  order: 'order'\n};\nexport var shopCartModel = modelFactory('shopCartModel', {\n  user: {},\n  pageType: pageTypeEnum.shopCart,\n  shopCartList: [],\n  shopCartListNext: [],\n  form: {\n    pickUpType: PickUpTypeEnum.Self\n  }\n}, {\n  clearForm: function clearForm(value, option) {\n    return option.setData(fpMergePre({\n      form: {\n        pickUpType: PickUpTypeEnum.Self\n      }\n    }));\n  },\n  setForm: setForm,\n  getList: function () {\n    var _getList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, option) {\n      var _res$shopCartList$fil, _res$shopCartList$fil2;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return option.query(doc.userShopCartList);\n\n            case 2:\n              res = _context.sent;\n              option.setData(fpMergePre({\n                shopCartList: (_res$shopCartList$fil = res === null || res === void 0 ? void 0 : res.shopCartList.filter(function (v) {\n                  return !v.isNext;\n                })) !== null && _res$shopCartList$fil !== void 0 ? _res$shopCartList$fil : [],\n                shopCartListNext: (_res$shopCartList$fil2 = res === null || res === void 0 ? void 0 : res.shopCartList.filter(function (v) {\n                  return !!v.isNext;\n                })) !== null && _res$shopCartList$fil2 !== void 0 ? _res$shopCartList$fil2 : []\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getList(_x, _x2) {\n      return _getList.apply(this, arguments);\n    }\n\n    return getList;\n  }(),\n  updatePageType: function updatePageType(value, option) {\n    return option.setData(fpMergePre({\n      pageType: value\n    }));\n  },\n  getOrderInfo: function () {\n    var _getOrderInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value, option) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return option.query(doc.orderConfirmInfo);\n\n            case 2:\n              res = _context2.sent;\n              console.log(res);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function getOrderInfo(_x3, _x4) {\n      return _getOrderInfo.apply(this, arguments);\n    }\n\n    return getOrderInfo;\n  }()\n});\nexport var CartPage = function CartPage() {\n  _s();\n\n  var _useStoreModel = useStoreModel(shopCartModel),\n      stateSCM = _useStoreModel.state;\n\n  return stateSCM.pageType === pageTypeEnum.order && __jsx(OrderPage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 55\n    }\n  }) || __jsx(ShopCartPage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 72\n    }\n  });\n};\n\n_s(CartPage, \"pOqooWr/VkijetUMvlQsd1xnlBA=\", false, function () {\n  return [useStoreModel];\n});\n\n_c = CartPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/cart/index.tsx"],"names":["modelFactory","PickUpTypeEnum","fpMergePre","setForm","doc","ShopCartPage","React","useStoreModel","OrderPage","pageTypeEnum","shopCart","order","shopCartModel","user","pageType","shopCartList","shopCartListNext","form","pickUpType","Self","clearForm","value","option","setData","getList","query","userShopCartList","res","filter","v","isNext","updatePageType","getOrderInfo","orderConfirmInfo","console","log","CartPage","stateSCM","state"],"mappings":"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","sourcesContent":["import {modelFactory} from '../../ModelAction/modelUtil'\r\nimport {ShopCart, User} from '../../graphqlTypes/types'\r\nimport {PickUpTypeEnum} from '../../ss_common/enum'\r\nimport {fpMergePre} from '../../tools/utils'\r\nimport {setForm} from '../../tools/commonAction'\r\nimport {doc} from '../../graphqlTypes/doc'\r\nimport { ShopCartPage } from './shopCart'\r\nimport React from 'react'\r\nimport {useStoreModel} from '../../ModelAction/useStore'\r\nimport {OrderPage} from './orderPage'\r\n\r\nexport const pageTypeEnum = {\r\n  shopCart: 'shopCart',\r\n  order: 'order',\r\n}\r\n\r\nexport const shopCartModel = modelFactory('shopCartModel', {\r\n  user: {} as User,\r\n  pageType: pageTypeEnum.shopCart,\r\n  shopCartList: [] as ShopCart[],\r\n  shopCartListNext: [] as ShopCart[],\r\n  form: {\r\n    pickUpType: PickUpTypeEnum.Self,\r\n  },\r\n}, {\r\n  clearForm: (value, option) => option.setData(fpMergePre({\r\n    form: {\r\n      pickUpType: PickUpTypeEnum.Self,\r\n    },\r\n  })),\r\n  setForm: setForm,\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.userShopCartList)\r\n    option.setData(fpMergePre({\r\n      shopCartList: res?.shopCartList.filter((v: ShopCart) => !v.isNext) ?? [],\r\n      shopCartListNext: res?.shopCartList.filter((v: ShopCart) => !!v.isNext) ?? [],\r\n    }))\r\n  },\r\n  updatePageType: (value: string, option) => option.setData(fpMergePre({\r\n    pageType: value,\r\n  })),\r\n  getOrderInfo: async (value, option) => {\r\n    const res = await option.query(doc.orderConfirmInfo)\r\n    console.log(res)\r\n  },\r\n})\r\n\r\nexport const CartPage = () => {\r\n  const {state: stateSCM} = useStoreModel(shopCartModel)\r\n  return (stateSCM.pageType === pageTypeEnum.order && <OrderPage/>) || <ShopCartPage />\r\n}\r\n"]},"metadata":{},"sourceType":"module"}