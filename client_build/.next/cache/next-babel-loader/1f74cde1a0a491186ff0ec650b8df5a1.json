{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../../../../ModelAction/modelUtil';\nimport { doc } from '../../../../../graphqlTypes/doc';\nimport { useStoreModel } from '../../../../../ModelAction/useStore';\nimport { dealMaybeNumber, fpMergePre } from '../../../../../tools/utils';\nimport { GroupProductItem } from '../../../../../components/ProductItem/ProductItem';\nimport { Space } from '../../../../../components/Box/Box';\nexport var LineRankingModel = modelFactory('LineRanking', {\n  list: []\n}, {\n  getList: function () {\n    var _getList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, option) {\n      var _res$groupQueueList;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return option.query(doc.groupQueueList, {});\n\n            case 2:\n              res = _context.sent;\n              option.setData(fpMergePre({\n                list: (_res$groupQueueList = res === null || res === void 0 ? void 0 : res.groupQueueList) !== null && _res$groupQueueList !== void 0 ? _res$groupQueueList : []\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getList(_x, _x2) {\n      return _getList.apply(this, arguments);\n    }\n\n    return getList;\n  }()\n});\nexport var LineRanking = function LineRanking() {\n  var _useStoreModel = useStoreModel(LineRankingModel),\n      actionsLineRankingModel = _useStoreModel.actions,\n      stateLineRankingModel = _useStoreModel.state;\n\n  useEffect(function () {\n    actionsLineRankingModel.getList();\n  }, []);\n  return __jsx(\"div\", null, stateLineRankingModel.list.filter(function (v) {\n    var _v$product;\n\n    return dealMaybeNumber(v.sumFillAmount) < dealMaybeNumber((_v$product = v.product) === null || _v$product === void 0 ? void 0 : _v$product.groupPrecision);\n  }).sort(function (a, b) {\n    return dealMaybeNumber(b.sumFillAmount) - dealMaybeNumber(a.sumFillAmount);\n  }).map(function (value) {\n    var _value$product;\n\n    return __jsx(React.Fragment, {\n      key: \"ProductItem_\".concat(value.id)\n    }, __jsx(Space, {\n      h: 16\n    }), __jsx(GroupProductItem, {\n      product: (_value$product = value.product) !== null && _value$product !== void 0 ? _value$product : {},\n      groupQueue: value\n    }));\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}