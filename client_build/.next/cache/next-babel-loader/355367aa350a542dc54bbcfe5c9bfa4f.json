{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect } from 'react';\nimport { HeaderTitle } from '../../../../components/HeaderTitle/HeaderTitle';\nimport { SigninInput } from '../../register';\nimport { ll } from '../../../../tools/dealKey';\nimport { ButtonLoad } from '../../../../components/ButtonLoad/ButtonLoad';\nimport router from 'next/router';\nimport { FieldContain } from './updatePassword';\nimport { modelFactory } from '../../../../ModelAction/modelUtil';\nimport { setForm } from '../../../../tools/commonAction';\nimport { useStoreModel } from '../../../../ModelAction/useStore';\nimport { fpSetPre } from '../../../../tools/utils';\nimport { doc } from '../../../../graphqlTypes/doc';\nimport { meModel } from '../model';\nexport var initFormUpdateMyInfo = {\n  name: '',\n  phone: '',\n  email: ''\n};\nexport var UpdateMyInfoModel = modelFactory('UpdateMyInfo', {\n  form: initFormUpdateMyInfo\n}, {\n  setForm: setForm,\n  initForm: function initForm(value, option) {\n    option.setData(fpSetPre('form', value));\n  },\n  clearForm: function clearForm(value, option) {\n    option.setData(fpSetPre('form', initFormUpdateMyInfo));\n  },\n  submit: function () {\n    var _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, option) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", option.mutate(doc.updateUserInfo, {\n                userInfo: option.data.form\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function submit(_x, _x2) {\n      return _submit.apply(this, arguments);\n    }\n\n    return submit;\n  }()\n});\nexport var useUpdateMyInfoInit = function useUpdateMyInfoInit() {\n  var _stateMeModel$user2;\n\n  var _useStoreModel = useStoreModel(UpdateMyInfoModel),\n      actionsUpdateMyInfoModel = _useStoreModel.actions;\n\n  var _useStoreModel2 = useStoreModel(meModel),\n      actionsMeModel = _useStoreModel2.actions,\n      stateMeModel = _useStoreModel2.state;\n\n  var init = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _res$userInfo;\n\n    var res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return actionsMeModel.getLoginUser();\n\n          case 2:\n            res = _context2.sent;\n            actionsUpdateMyInfoModel.initForm((_res$userInfo = res === null || res === void 0 ? void 0 : res.userInfo) !== null && _res$userInfo !== void 0 ? _res$userInfo : initFormUpdateMyInfo);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), [actionsMeModel, actionsUpdateMyInfoModel]);\n  useEffect(function () {\n    if (!stateMeModel.user.id) {\n      init();\n    } else {\n      var _stateMeModel$user$us, _stateMeModel$user;\n\n      actionsUpdateMyInfoModel.initForm((_stateMeModel$user$us = (_stateMeModel$user = stateMeModel.user) === null || _stateMeModel$user === void 0 ? void 0 : _stateMeModel$user.userInfo) !== null && _stateMeModel$user$us !== void 0 ? _stateMeModel$user$us : initFormUpdateMyInfo);\n    }\n  }, [actionsUpdateMyInfoModel, init, stateMeModel.user.id, (_stateMeModel$user2 = stateMeModel.user) === null || _stateMeModel$user2 === void 0 ? void 0 : _stateMeModel$user2.userInfo]);\n  var initForm = useCallback(function () {\n    var _stateMeModel$user$us2, _stateMeModel$user3;\n\n    actionsUpdateMyInfoModel.initForm((_stateMeModel$user$us2 = (_stateMeModel$user3 = stateMeModel.user) === null || _stateMeModel$user3 === void 0 ? void 0 : _stateMeModel$user3.userInfo) !== null && _stateMeModel$user$us2 !== void 0 ? _stateMeModel$user$us2 : initFormUpdateMyInfo);\n  }, [actionsUpdateMyInfoModel, stateMeModel.user]);\n  return {\n    initForm: initForm\n  };\n};\nexport var UpdateMyInfo = function UpdateMyInfo() {\n  var _useStoreModel3 = useStoreModel(UpdateMyInfoModel),\n      actionsUpdateMyInfoModel = _useStoreModel3.actions,\n      stateUpdateMyInfoModel = _useStoreModel3.state;\n\n  var _useStoreModel4 = useStoreModel(meModel),\n      actionsMe = _useStoreModel4.actions;\n\n  useUpdateMyInfoInit();\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: '编辑个人信息'\n  }), __jsx(FieldContain, null, __jsx(SigninInput, {\n    label: ll('姓名'),\n    value: stateUpdateMyInfoModel.form.name,\n    onChange: function onChange(event) {\n      return actionsUpdateMyInfoModel.setForm(['name', event.target.value]);\n    }\n  }), __jsx(SigninInput, {\n    label: ll('电话'),\n    value: stateUpdateMyInfoModel.form.phone,\n    onChange: function onChange(event) {\n      return actionsUpdateMyInfoModel.setForm(['phone', event.target.value]);\n    }\n  }), __jsx(SigninInput, {\n    label: ll('邮箱'),\n    value: stateUpdateMyInfoModel.form.email,\n    onChange: function onChange(event) {\n      return actionsUpdateMyInfoModel.setForm(['email', event.target.value]);\n    }\n  }), __jsx(ButtonLoad, {\n    style: {\n      marginTop: '20px'\n    },\n    variant: 'contained',\n    color: 'secondary',\n    fullWidth: true,\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _res$updateUserInfo;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return actionsUpdateMyInfoModel.submit();\n\n            case 2:\n              res = _context3.sent;\n\n              if (res === null || res === void 0 ? void 0 : (_res$updateUserInfo = res.updateUserInfo) === null || _res$updateUserInfo === void 0 ? void 0 : _res$updateUserInfo.id) {\n                actionsUpdateMyInfoModel.clearForm();\n                actionsMe.getLoginUser();\n                router.back();\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))\n  }, ll('保存'))));\n};","map":null,"metadata":{},"sourceType":"module"}