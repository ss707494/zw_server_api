{"ast":null,"code":"import { gql } from 'apollo-boost';\nimport { fragment } from './fragment';\nimport { DictTypeEnum, PromoCodeTypeEnum } from '../../ss_common/enum';\nexport const docFactory = (doc, variablesType) => variablesType ? {\n  doc,\n  variablesType\n} : {\n  doc,\n  variablesType: {}\n};\nexport const getUserListDoc = docFactory(gql`\n  query refactored643($data: UserListInput!) {\n    userList(userListInput: $data) {\n      list {\n        orderCoinNextMonth\n        orderCoinCurrentMonth\n        orderAmountCurrentYear\n        ...userInfo\n        ...UserFields\n        ...orderInfo\n      }\n      total\n    }\n  }\n  fragment orderInfo on User{\n    orderInfo{\n      id\n      name\n      createTime\n      updateTime\n      isDelete\n      number\n      state\n      actuallyPaid\n      addressId\n      paymentMethodCardId\n      subtotal\n      couponDiscount\n      vipDiscount\n      transportationCosts\n      saleTax\n      orderId\n      discountProductTotal\n      finishTime\n      pickUpTime\n      pickUpType\n    }\n  }\n  fragment UserFields on User {\n    id\n    name\n    createTime\n    updateTime\n    isDelete\n    password\n    type\n  }\n  fragment userInfo on User{\n    userInfo{\n      id\n      name\n      createTime\n      updateTime\n      isDelete\n      userId\n      phone\n      email\n      userLevel\n    }\n  }\n`);\nexport const getDataConfig = docFactory(gql`\n  query ($data: DataConfigItemInput) {\n    getDataConfig(dataConfigInput: $data) {\n      id\n      name\n      createTime\n      updateTime\n      isDelete\n      type\n      value\n      remark\n    }\n  }\n`);\nexport const homeCarouselImgs = docFactory(gql`\n  query query_query_testLong137($data: DataConfigItemInput) {\n    homeCarouselImgs(dataConfigInput: $data) {\n      id\n      name\n      createTime\n      updateTime\n      isDelete\n      type\n      value\n      remark\n    }\n  }\n`);\nexport const categoryList = docFactory(gql`\n  query query_query_testLong565($data: CategoryListInput) {\n    categoryList(data: $data) {\n      total\n      list {\n        ...Category\n      }\n    }\n  }\n  ${fragment.CategoryFields}\n`);\nexport const doc = {\n  getUserListDoc,\n  categoryList,\n  getDataConfig,\n  homeCarouselImgs,\n  registerUser: docFactory(gql`\n    mutation mutation_registerUse998($data: UserItemInput) {\n      registerUser(data: $data) {\n        token\n        refreshtoken\n        user {\n          id\n          name\n          createTime\n          updateTime\n          isDelete\n          password\n          type\n          userInfo {\n            name\n          }\n        }\n      }\n    }\n  `),\n  refreshToken: docFactory(gql`\n    query refreshToken($data: String!) {\n      refreshToken(refreshtoken: $data) {\n        refreshtoken\n        token\n      }\n    }\n  `),\n  login: docFactory(gql`\n    query login($data: UserItemInput) {\n      login(user: $data) {\n        token\n        refreshtoken\n      }\n    }\n  `),\n  oneUser: docFactory(gql`\n    query oneUser {\n      oneUser {\n        ...UserFields\n        userInfo {\n          ...UserInfoFields\n        }\n      }\n    }\n    ${fragment.UserInfoFields}\n    ${fragment.UserFields}\n  `),\n  orderList: docFactory(gql`\n    query orderList($data: OrderInput){\n      orderList (orderInput: $data, fromUser: true) {\n        list {\n          ...OrderInfoFields\n          rOrderProduct {\n            ...ROrderProductFields\n            product {\n              ...ProductFields\n              img {\n                ...ImgFields\n              }\n            }\n          }\n        }\n      }\n    }\n    ${fragment.OrderInfoFields}\n    ${fragment.ROrderProductFields}\n    ${fragment.ProductFields}\n    ${fragment.ImgFields}\n  `),\n  orderDetail: docFactory(gql`\n    query ($id: String) {\n      selfAddress: getDataConfig(dataConfigInput: {\n        type: \"${DictTypeEnum.SelfAddress}\"\n      }) {\n        ...DataConfigFields\n      }\n      orderDetail(id: $id) {\n        ...OrderInfoFields\n        rOrderProduct {\n          ...ROrderProductFields\n          product {\n            ...ProductFields\n            img {\n              ...ImgFields\n            }\n          }\n        }\n        user {\n          ...UserFields\n          userInfo {\n            ...UserInfoFields\n          }\n        }\n        userAddress {\n          ...UserAddressFields\n        }\n        userPayCard {\n          ...UserPayCardFields\n        }\n      }\n    }\n    ${fragment.DataConfigFields}\n    ${fragment.OrderInfoFields}\n    ${fragment.ROrderProductFields}\n    ${fragment.ProductFields}\n    ${fragment.ImgFields}\n    ${fragment.UserFields}\n    ${fragment.UserInfoFields}\n    ${fragment.UserPayCardFields}\n    ${fragment.UserAddressFields}\n  `),\n  updatePassword: docFactory(gql`\n    mutation ($data: UpdatePasswordInput) {\n      updatePassword (data: $data) {\n        user {\n          ...UserFields\n        }\n        authBody {\n          token\n          refreshtoken\n        }\n      }\n    }\n    ${fragment.UserFields}\n  `),\n  payCardListOneUser: docFactory(gql`\n    query {\n      payCardListOneUser {\n        ...UserPayCardFields\n      }\n    }\n    ${fragment.UserPayCardFields}\n  `),\n  userPayCard: docFactory(gql`\n    query ($data: UserPayCardItemInput) {\n      userPayCard (userPayCard: $data) {\n        ...UserPayCardFields\n      }\n    }\n    ${fragment.UserPayCardFields}\n  `),\n  saveUserPayCard: docFactory(gql`\n    mutation ($data: UserPayCardItemInput){\n      saveUserPayCard (userPayCard: $data) {\n        ...UserPayCardFields\n      }\n    }\n    ${fragment.UserPayCardFields}\n  `),\n  setUserPayCardDefault: docFactory(gql`\n    mutation ($data: UserPayCardItemInput) {\n      setUserPayCardDefault (userPayCard: $data) {\n        ...UserPayCardFields\n      }\n    }\n    ${fragment.UserPayCardFields}\n  `),\n  pickupAddress: docFactory(gql`\n    query {\n      getDataConfig(dataConfigInput: {\n        type: \"${DictTypeEnum.SelfAddress}\"\n      }) {\n        ...DataConfigFields\n      }\n      oneUser {\n        ...UserFields\n        userInfo {\n          ...UserInfoFields\n        }\n      }\n    }\n    ${fragment.UserInfoFields}\n    ${fragment.DataConfigFields}\n    ${fragment.UserFields}\n  `),\n  updateUserInfo: docFactory(gql`\n    mutation ($userInfo: UserInfoItemInput) {\n      updateUserInfo (userInfo: $userInfo) {\n        ...UserInfoFields\n      }\n    }\n    ${fragment.UserInfoFields}\n  `, {\n    userInfo: {}\n  }),\n  userAddressListOneUser: docFactory(gql`\n    query {\n      userAddressListOneUser {\n        ...UserAddressFields\n      }\n    }\n    ${fragment.UserAddressFields}\n  `),\n  userAddress: docFactory(gql`\n    query ($data: UserAddressItemInput) {\n      userAddress (userAddress: $data) {\n        ...UserAddressFields\n      }\n    }\n    ${fragment.UserAddressFields}\n  `),\n  saveUserAddress: docFactory(gql`\n    mutation ($data: UserAddressItemInput){\n      saveUserAddress (userAddress: $data) {\n        ...UserAddressFields\n      }\n    }\n    ${fragment.UserAddressFields}\n  `),\n  setUserAddressDefault: docFactory(gql`\n    mutation ($data: UserAddressItemInput) {\n      setUserAddressDefault (userAddress: $data) {\n        ...UserAddressFields\n      }\n    }\n    ${fragment.UserAddressFields}\n  `),\n  productsInCategory: docFactory(gql`\n    query ($data: CategoryItemInput, $productItemInput: ProductItemInput) {\n      productsInCategory(categoryItemInput: $data, productItemInput: $productItemInput) {\n        ...ProductFields\n        img {\n          ...ImgFields\n        }\n      }\n      categoryList(data: {\n        category: {\n          parentCategory: $data\n        }\n      }) {\n        total\n        list {\n          ...Category\n        }\n      }\n    }\n    ${fragment.ProductFields}\n    ${fragment.ImgFields}\n    ${fragment.CategoryFields}\n  `),\n  categoryLevel: docFactory(gql`\n    query ($data: CategoryItemInput) {\n      categoryLevel(categoryItemInput: $data)\n    }\n  `),\n  oneCategory: docFactory(gql`\n    query ($data: CategoryItemInput) {\n      oneCategory(data: $data) {\n        ...Category\n        parentCategory {\n          ...Category\n          parentCategory {\n            ...Category\n          }\n        }\n      }\n    }\n    ${fragment.CategoryFields}\n  `),\n  productList: docFactory(gql`\n    query ($productInput: ProductItemInput, $orderByInput: OrderByInput) {\n      productList(productInput: $productInput, orderByInput: $orderByInput) {\n        total\n        list {\n          ...ProductFields\n          img {\n            ...ImgFields\n          }\n        }\n      }\n    }\n    ${fragment.ProductFields}\n    ${fragment.ImgFields}\n  `),\n  updateNumShopCart: docFactory(gql`\n    mutation ($shopCart: ShopCartItemInput, $updateNum: Float) {\n      updateNumShopCart (shopCart: $shopCart, updateNum: $updateNum) {\n        id\n        number\n        product {\n          ...ProductFields\n        }\n        user {\n          ...UserFields\n        }\n      }\n    }\n    ${fragment.ProductFields}\n    ${fragment.UserFields}\n  `),\n  userShopCartList: docFactory(gql`\n    query {\n      shopCartList {\n        ...ShopCartFields\n        product {\n          ...ProductFields\n          category {\n            id\n            parentCategory {\n              id\n              parentCategory {\n                id\n              }\n            }\n          }\n          img {\n            ...ImgFields\n          }\n        }\n      }\n    }\n    ${fragment.ShopCartFields}\n    ${fragment.ProductFields}\n    ${fragment.ImgFields}\n  `),\n  updateShopCart: docFactory(gql`\n    mutation ($shopCart: ShopCartItemInput){\n      updateShopCart (shopCart: $shopCart) {\n        ...ShopCartFields\n      }\n    }\n    ${fragment.ShopCartFields}\n  `),\n  orderConfirmInfo: docFactory(gql`\n    query {\n      getDataConfig(dataConfigInput: {\n        type: \"${DictTypeEnum.SelfAddress}\"\n      }) {\n        ...DataConfigFields\n      }\n      oneUser {\n        ...UserFields\n        userInfo {\n          ...UserInfoFields\n        }\n      }\n      payCardListOneUser {\n        ...UserPayCardFields\n      }\n      userAddressListOneUser {\n        ...UserAddressFields\n      }\n      freightConfig: getDataConfig (dataConfigInput: {\n        type: \"${DictTypeEnum.Freight}\"\n      }) {\n        ...DataConfigFields\n      }\n      userLevelList: getDictList (dictInput: {\n        dictTypeCode: \"UserLevel\"\n      }) {\n        ...DictFields\n      }\n    }\n    ${fragment.UserAddressFields}\n    ${fragment.UserPayCardFields}\n    ${fragment.UserInfoFields}\n    ${fragment.UserFields}\n    ${fragment.DataConfigFields}\n    ${fragment.DictFields}\n  `),\n  saveOrder: docFactory(gql`\n    mutation ($orderInfoItemInput: OrderInfoItemInput) {\n      saveOrder (orderInfoItemInput: $orderInfoItemInput) {\n        ...OrderInfoFields\n      }\n    }\n    ${fragment.OrderInfoFields}\n  `),\n  dictList: docFactory(gql`\n    query ($data: DictInput) {\n      getDictList (dictInput: $data) {\n        ...DictFields\n      }\n    }\n    ${fragment.DictFields}\n  `),\n  limitTimeData: docFactory(gql`\n    query {\n      limitTimeData: getDataConfig (dataConfigInput: {\n        type: \"${DictTypeEnum.PromotionFlashSale}\"\n      }) {\n        ...DataConfigFields\n      }\n    }\n    ${fragment.DataConfigFields}\n  `),\n  productListByIds: docFactory(gql`\n    query ($ids: [String]) {\n      productListByIds (ids: $ids) {\n        total\n        list {\n          ...ProductFields\n          img {\n            ...ImgFields\n          }\n        }\n      }\n    }\n    ${fragment.ProductFields}\n    ${fragment.ImgFields}\n  `),\n  groupQueueList: docFactory(gql`\n    query ($groupQueueItemInput: GroupQueueItemInput) {\n      groupQueueList (groupQueueItemInput: $groupQueueItemInput) {\n        ...GroupQueueFields\n        product {\n          ...ProductFields\n          img {\n            ...ImgFields\n          }\n        }\n        groupOrder {\n          ...GroupOrderFields\n        }\n      }\n    }\n    ${fragment.GroupQueueFields}\n    ${fragment.ProductFields}\n    ${fragment.ImgFields}\n    ${fragment.GroupOrderFields}\n  `),\n  updateOrder: docFactory(gql`\n    mutation ($orderInfoItemInput: OrderInfoItemInput) {\n      updateOrder (orderInfoItemInput: $orderInfoItemInput) {\n        ...OrderInfoFields\n      }\n    }\n    ${fragment.OrderInfoFields}\n  `),\n  saveGroupOrder: docFactory(gql`\n    mutation ($orderInfoItemInput: OrderInfoItemInput, $groupOrderItemInput: GroupOrderItemInput, $groupQueueItemInput: GroupQueueItemInput) {\n      saveGroupOrder (orderInfoItemInput: $orderInfoItemInput, groupOrderItemInput: $groupOrderItemInput, groupQueueItemInput: $groupQueueItemInput) {\n        ...OrderInfoFields\n      }\n    }\n    ${fragment.OrderInfoFields}\n  `),\n  promoCodeList: docFactory(gql`\n    query ($promoCodeItemInput: PromoCodeItemInput) {\n      promoCodeList (promoCodeItemInput: $promoCodeItemInput) {\n        ...PromoCodeFields\n      }\n    }\n    ${fragment.PromoCodeFields}\n  `),\n  categoryRootParent: docFactory(gql`\n    query ($categoryItemInput: CategoryItemInput) {\n      categoryRootParent (categoryItemInput: $categoryItemInput) {\n        ...Category\n        parentCategory {\n          ...Category\n          parentCategory {\n            ...Category\n          }\n        }\n      }\n    }\n    ${fragment.CategoryFields}\n  `),\n  productListOrderByOrder: docFactory(gql`\n    query ($orderByType: String, $productInput: ProductItemInput) {\n      productListOrderByOrder (orderByType: $orderByType, productInput: $productInput) {\n        list {\n          rOrderProduct {\n            ...ROrderProductFields\n          }\n          ...ProductFields\n          img {\n            ...ImgFields\n          }\n        }\n        total\n      }\n    }\n    ${fragment.ProductFields}\n    ${fragment.ImgFields}\n    ${fragment.ROrderProductFields}\n  `),\n  searchData: docFactory(gql`\n    query ($keyword: String) {\n      productList(productInput: { name: $keyword }) {\n        total\n        list {\n          ...ProductFields\n          img {\n            ...ImgFields\n          }\n        }\n      }\n      groupProductList: productList(productInput: { name: $keyword, isGroup: 1 }) {\n        total\n        list {\n          ...ProductFields\n          img {\n            ...ImgFields\n          }\n        }\n      }\n      darenCardPromoCodeList: promoCodeList(promoCodeItemInput: {\n        promoCodeType: \"${PromoCodeTypeEnum.DarenCard}\",\n        title: $keyword,\n      }) {\n        ...PromoCodeFields\n      }\n      promoCodePromoCodeList: promoCodeList(promoCodeItemInput: {\n        promoCodeType: \"${PromoCodeTypeEnum.PromoCode}\",\n        title: $keyword,\n      }) {\n        ...PromoCodeFields\n      }\n      oneUser {\n        ...UserFields\n        userInfo {\n          ...UserInfoFields\n        }\n      }\n    }\n    ${fragment.UserFields}\n    ${fragment.UserInfoFields}\n    ${fragment.ProductFields}\n    ${fragment.ImgFields}\n    ${fragment.PromoCodeFields}\n  `)\n};","map":null,"metadata":{},"sourceType":"module"}