{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Snackbar } from '@material-ui/core';\nimport { amber, blue, common, green, grey, red } from '@material-ui/core/colors';\nimport { originStore, useStoreModel } from '../../ModelAction/useStore';\nimport { fpMergePre } from '../../tools/utils';\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { ll } from '../../tools/dealKey';\nvar typeHelp = {\n  \"default\": \"background: \".concat(grey[700], \";\"),\n  success: \"background: \".concat(green[600], \";\"),\n  warning: \"background: \".concat(amber[700], \";\"),\n  info: \"background: \".concat(blue[700], \";\"),\n  error: \"background: \".concat(red[700], \";\")\n};\n\nvar getType = function getType() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  return typeHelp[type];\n};\n\nvar CusSnackbar = styled(Snackbar).withConfig({\n  displayName: \"Message__CusSnackbar\",\n  componentId: \"om26s-0\"\n})([\"&&& > div{color:\", \";\", \"}\"], common.white, function (_ref) {\n  var msg_type = _ref.msg_type;\n  return getType(msg_type);\n});\nvar messageModel = modelFactory('messageModel', {\n  open: false,\n  message: '',\n  autoHideDuration: 2000,\n  msg_type: 'default'\n}, {\n  open: function open(value, option) {\n    if (typeof value === 'string') {\n      option.setData(fpMergePre({\n        autoHideDuration: 2000,\n        msg_type: 'default',\n        message: value,\n        open: true\n      }));\n    } else {\n      option.setData(fpMergePre(_objectSpread(_objectSpread({\n        autoHideDuration: 2000,\n        msg_type: 'default'\n      }, value), {}, {\n        open: true\n      })));\n    }\n  },\n  onClose: function onClose(value, option) {\n    return option.setData(fpMergePre({\n      open: false\n    }));\n  }\n});\nexport var Message = function Message() {\n  var _useStoreModel = useStoreModel(messageModel),\n      mState = _useStoreModel.state,\n      actions = _useStoreModel.actions;\n\n  return __jsx(CusSnackbar, {\n    open: mState.open,\n    autoHideDuration: mState.autoHideDuration,\n    message: ll(mState.message),\n    msg_type: mState.msg_type,\n    onClose: function onClose() {\n      return actions.onClose();\n    }\n  });\n};\nexport var showMessage = function showMessage(option) {\n  originStore['messageModel'].actions.open(option);\n  return;\n};","map":null,"metadata":{},"sourceType":"module"}