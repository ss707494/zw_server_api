{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Router from 'next/router';\nimport { fpMergePre } from '../../tools/utils';\nimport { setToken } from '../../tools/token';\nimport { doc } from '../../graphqlTypes/doc';\nimport { modelFactory } from '../../ModelAction/modelUtil';\n\nvar _toLogin = function toLogin() {\n  return _regeneratorRuntime.async(function toLogin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Router.push('/login'));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport var meModel = modelFactory('meModel', {\n  user: {}\n}, {\n  getLoginUser: function getLoginUser(value, option) {\n    var _await$option$query;\n\n    var res;\n    return _regeneratorRuntime.async(function getLoginUser$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(option.query(doc.oneUser));\n\n          case 2:\n            _context2.t1 = _await$option$query = _context2.sent;\n            _context2.t0 = _context2.t1 === null;\n\n            if (_context2.t0) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.t0 = _await$option$query === void 0;\n\n          case 6:\n            if (!_context2.t0) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.t2 = void 0;\n            _context2.next = 11;\n            break;\n\n          case 10:\n            _context2.t2 = _await$option$query.oneUser;\n\n          case 11:\n            res = _context2.t2;\n            option.setData(fpMergePre({\n              user: res\n            }));\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  logout: function logout(value, option) {\n    return _regeneratorRuntime.async(function logout$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            setToken('');\n            setToken('', 'refreshtoken');\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(_toLogin());\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  toLogin: function toLogin(value) {\n    _toLogin();\n  }\n});","map":null,"metadata":{},"sourceType":"module"}