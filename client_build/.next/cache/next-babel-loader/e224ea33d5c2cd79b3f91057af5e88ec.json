{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect } from 'react';\nimport { HeaderTitle } from '../../../../components/HeaderTitle/HeaderTitle';\nimport { SigninInput } from '../../register';\nimport { ls } from '../../../../tools/dealKey';\nimport { ButtonLoad } from '../../../../components/ButtonLoad/ButtonLoad';\nimport router from 'next/router';\nimport { FieldContain } from './updatePassword';\nimport { modelFactory } from '../../../../ModelAction/modelUtil';\nimport { setForm } from '../../../../tools/commonAction';\nimport { useStoreModel } from '../../../../ModelAction/useStore';\nimport { fpSetPre } from '../../../../tools/utils';\nimport { doc } from '../../../../graphqlTypes/doc';\nimport { meModel } from '../model';\nconst initForm = {\n  name: '',\n  phone: '',\n  email: ''\n};\nexport const UpdateMyInfoModel = modelFactory('UpdateMyInfo', {\n  form: initForm\n}, {\n  setForm: setForm,\n  initForm: (value, option) => {\n    option.setData(fpSetPre('form', value));\n  },\n  clearForm: (value, option) => {\n    option.setData(fpSetPre('form', initForm));\n  },\n  submit: async (value, option) => {\n    return option.mutate(doc.updateUserInfo, {\n      userInfo: option.data.form\n    });\n  }\n});\nexport const UpdateMyInfo = () => {\n  const {\n    actions: actionsUpdateMyInfoModel,\n    state: stateUpdateMyInfoModel\n  } = useStoreModel(UpdateMyInfoModel);\n  const {\n    actions: actionsMeModel,\n    state: stateMeModel\n  } = useStoreModel(meModel);\n  const {\n    actions: actionsMe\n  } = useStoreModel(meModel);\n  const init = useCallback(async () => {\n    var _res$userInfo;\n\n    const res = await actionsMeModel.getLoginUser();\n    actionsUpdateMyInfoModel.initForm((_res$userInfo = res === null || res === void 0 ? void 0 : res.userInfo) !== null && _res$userInfo !== void 0 ? _res$userInfo : initForm);\n  }, []);\n  useEffect(() => {\n    if (!stateMeModel.user.id) {\n      init();\n    } else {\n      var _stateMeModel$user$us, _stateMeModel$user;\n\n      actionsUpdateMyInfoModel.initForm((_stateMeModel$user$us = (_stateMeModel$user = stateMeModel.user) === null || _stateMeModel$user === void 0 ? void 0 : _stateMeModel$user.userInfo) !== null && _stateMeModel$user$us !== void 0 ? _stateMeModel$user$us : initForm);\n    }\n  }, []);\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: '编辑个人信息'\n  }), __jsx(FieldContain, null, __jsx(SigninInput, {\n    label: ls('姓名'),\n    value: stateUpdateMyInfoModel.form.name,\n    onChange: event => actionsUpdateMyInfoModel.setForm(['name', event.target.value])\n  }), __jsx(SigninInput, {\n    label: ls('电话'),\n    value: stateUpdateMyInfoModel.form.phone,\n    onChange: event => actionsUpdateMyInfoModel.setForm(['phone', event.target.value])\n  }), __jsx(SigninInput, {\n    label: ls('邮箱'),\n    value: stateUpdateMyInfoModel.form.email,\n    onChange: event => actionsUpdateMyInfoModel.setForm(['email', event.target.value])\n  }), __jsx(ButtonLoad, {\n    style: {\n      marginTop: '20px'\n    },\n    variant: 'contained',\n    color: 'secondary',\n    fullWidth: true,\n    onClick: async () => {\n      var _res$updateUserInfo;\n\n      const res = await actionsUpdateMyInfoModel.submit();\n\n      if (res === null || res === void 0 ? void 0 : (_res$updateUserInfo = res.updateUserInfo) === null || _res$updateUserInfo === void 0 ? void 0 : _res$updateUserInfo.id) {\n        actionsUpdateMyInfoModel.clearForm();\n        actionsMe.getLoginUser();\n        router.back();\n      }\n    }\n  }, ls('保存'))));\n};","map":null,"metadata":{},"sourceType":"module"}