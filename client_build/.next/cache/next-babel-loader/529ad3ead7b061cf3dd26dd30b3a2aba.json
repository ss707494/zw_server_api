{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\me\\\\category\\\\[id].tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { fpMergePre } from '../../../tools/utils';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nexport const CategoryPageModel = modelFactory('CategoryPage', {\n  productList: []\n}, {\n  getProductList: async (value, option) => {\n    const res = await option.query(doc.productsInCategory, {\n      data: value\n    });\n    option.setData(fpMergePre({\n      productList: res === null || res === void 0 ? void 0 : res.productsInCategory\n    }));\n    console.log(res);\n  }\n});\nexport const CategoryPage = () => {\n  var _ref, _router$query;\n\n  const router = useRouter();\n  const id = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id) !== null && _ref !== void 0 ? _ref : '';\n  const {\n    state: stateCPM,\n    actions: actionsCPM\n  } = useStoreModel(CategoryPageModel);\n  useEffect(() => {\n    if (id) {\n      actionsCPM.getProductList({\n        id\n      });\n    }\n  }, [id]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }, __jsx(HeaderTitle, {\n    title: '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }), id, \"Category\");\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/me/category/[id].tsx"],"names":["React","useEffect","useRouter","HeaderTitle","modelFactory","doc","fpMergePre","useStoreModel","CategoryPageModel","productList","getProductList","value","option","res","query","productsInCategory","data","setData","console","log","CategoryPage","router","id","state","stateCPM","actions","actionsCPM"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAQC,WAAR,QAA0B,6CAA1B;AACA,SAAQC,YAAR,QAA2B,gCAA3B;AAEA,SAAQC,GAAR,QAAkB,2BAAlB;AACA,SAAQC,UAAR,QAAyB,sBAAzB;AACA,SAAQC,aAAR,QAA4B,+BAA5B;AAEA,OAAO,MAAMC,iBAAiB,GAAGJ,YAAY,CAAC,cAAD,EAAiB;AAC5DK,EAAAA,WAAW,EAAE;AAD+C,CAAjB,EAE1C;AACDC,EAAAA,cAAc,EAAE,OAAOC,KAAP,EAAiCC,MAAjC,KAA4C;AAC1D,UAAMC,GAAG,GAAG,MAAMD,MAAM,CAACE,KAAP,CAAaT,GAAG,CAACU,kBAAjB,EAAqC;AAACC,MAAAA,IAAI,EAAEL;AAAP,KAArC,CAAlB;AACAC,IAAAA,MAAM,CAACK,OAAP,CAAeX,UAAU,CAAC;AACxBG,MAAAA,WAAW,EAAEI,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEE;AADM,KAAD,CAAzB;AAGAG,IAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACD;AAPA,CAF0C,CAAtC;AAaP,OAAO,MAAMO,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAMC,MAAM,GAAGnB,SAAS,EAAxB;AACA,QAAMoB,EAAE,4BAAID,MAAM,CAACP,KAAX,kDAAI,cAAcQ,EAAlB,uCAAmC,EAA3C;AACA,QAAM;AAACC,IAAAA,KAAK,EAAEC,QAAR;AAAkBC,IAAAA,OAAO,EAAEC;AAA3B,MAAyCnB,aAAa,CAACC,iBAAD,CAA5D;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,EAAJ,EAAQ;AACNI,MAAAA,UAAU,CAAChB,cAAX,CAA0B;AAACY,QAAAA;AAAD,OAA1B;AACD;AACF,GAJQ,EAIN,CAACA,EAAD,CAJM,CAAT;AAOA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,WAAD;AACI,IAAA,KAAK,EAAE,EADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAIJA,EAJI,aAAP;AAOD,CAnBM","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {useRouter} from 'next/router'\r\nimport {HeaderTitle} from '../../../components/HeaderTitle/HeaderTitle'\r\nimport {modelFactory} from '../../../ModelAction/modelUtil'\r\nimport {CategoryItemInput, Product} from '../../../graphqlTypes/types'\r\nimport {doc} from '../../../graphqlTypes/doc'\r\nimport {fpMergePre} from '../../../tools/utils'\r\nimport {useStoreModel} from '../../../ModelAction/useStore'\r\n\r\nexport const CategoryPageModel = modelFactory('CategoryPage', {\r\n  productList: [] as Product[],\r\n}, {\r\n  getProductList: async (value: CategoryItemInput, option) => {\r\n    const res = await option.query(doc.productsInCategory, {data: value})\r\n    option.setData(fpMergePre({\r\n      productList: res?.productsInCategory,\r\n    }))\r\n    console.log(res)\r\n  },\r\n\r\n})\r\n\r\nexport const CategoryPage = () => {\r\n  const router = useRouter()\r\n  const id = (router.query?.id as string) ?? ''\r\n  const {state: stateCPM, actions: actionsCPM} = useStoreModel(CategoryPageModel)\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      actionsCPM.getProductList({id})\r\n    }\r\n  }, [id])\r\n\r\n\r\n  return <div>\r\n    <HeaderTitle\r\n        title={''}\r\n    />\r\n    {id}\r\n    Category\r\n  </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}