{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\cart\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { PickUpTypeEnum } from '../../ss_common/enum';\nimport { dealMaybeNumber, fpMergePre } from '../../tools/utils';\nimport { setForm } from '../../tools/commonAction';\nimport { doc } from '../../graphqlTypes/doc';\nimport { ShopCartPage } from './shopCart';\nimport React from 'react';\nimport { useStoreModel } from '../../ModelAction/useStore';\nimport { OrderPage } from './orderPage';\nexport const pageTypeEnum = {\n  shopCart: 'shopCart',\n  order: 'order'\n};\nconst initForm = {\n  pickUpType: PickUpTypeEnum.Self,\n  addressId: '',\n  paymentMethodCardId: '',\n  deductCoin: 0,\n  saleTax: 0,\n  transportationCosts: 0\n};\nexport const shopCartModel = modelFactory('shopCartModel', {\n  user: {},\n  payCardList: [],\n  userAddressList: [],\n  selfAddress: [],\n  freightConfig: [],\n  userLevelList: [],\n  pageType: pageTypeEnum.shopCart,\n  shopCartList: [],\n  shopCartListNext: [],\n  form: _objectSpread({}, initForm),\n  dealProductNumber: state => state.shopCartList.reduce((pre, cur) => {\n    var _cur$number;\n\n    return pre + ((_cur$number = cur === null || cur === void 0 ? void 0 : cur.number) !== null && _cur$number !== void 0 ? _cur$number : 0);\n  }, 0),\n  dealAddressList: state => state.form.pickUpType === PickUpTypeEnum.Delivery && state.userAddressList || state.selfAddress.map(v => _objectSpread(_objectSpread({}, v), {}, {\n    combineAddress: `${v.province} ${v.city} ${v.streetAddress}`,\n    name: v.fullName,\n    contactInformation: v.phone\n  })),\n  dealAddressData: state => state.dealAddressList(state).find(v => v.id === state.form.addressId) || {},\n  initAddressId: state => {\n    var _state$userAddressLis, _state$userAddressLis2, _state$selfAddress, _state$selfAddress$;\n\n    return state.form.pickUpType === PickUpTypeEnum.Delivery && ((_state$userAddressLis = state.userAddressList) === null || _state$userAddressLis === void 0 ? void 0 : (_state$userAddressLis2 = _state$userAddressLis.find(v => v.isDefault)) === null || _state$userAddressLis2 === void 0 ? void 0 : _state$userAddressLis2.id) || ((_state$selfAddress = state.selfAddress) === null || _state$selfAddress === void 0 ? void 0 : (_state$selfAddress$ = _state$selfAddress[0]) === null || _state$selfAddress$ === void 0 ? void 0 : _state$selfAddress$.id);\n  },\n  dealProductTotal: state => state.shopCartList.reduce((pre, cur) => {\n    var _cur$product;\n\n    return pre + dealMaybeNumber(cur === null || cur === void 0 ? void 0 : cur.number) * dealMaybeNumber(cur === null || cur === void 0 ? void 0 : (_cur$product = cur.product) === null || _cur$product === void 0 ? void 0 : _cur$product.priceOut);\n  }, 0)\n}, {\n  clearData: (value, option) => {\n    option.setData(fpMergePre({\n      form: initForm,\n      pageType: pageTypeEnum.shopCart\n    }));\n  },\n  clearForm: (value, option) => option.setData(fpMergePre({\n    form: _objectSpread({}, initForm)\n  })),\n  setForm: setForm,\n  getList: async (value, option) => {\n    var _res$shopCartList$fil, _res$shopCartList$fil2;\n\n    const res = await option.query(doc.userShopCartList);\n    option.setData(fpMergePre({\n      shopCartList: (_res$shopCartList$fil = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !v.isNext)) !== null && _res$shopCartList$fil !== void 0 ? _res$shopCartList$fil : [],\n      shopCartListNext: (_res$shopCartList$fil2 = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !!v.isNext)) !== null && _res$shopCartList$fil2 !== void 0 ? _res$shopCartList$fil2 : []\n    }));\n  },\n  updatePageType: (value, option) => option.setData(fpMergePre({\n    pageType: value\n  })),\n  updatePayCardList: async (value, option) => {\n    const res = await option.query(doc.orderConfirmInfo);\n    option.setData(fpMergePre({\n      payCardList: res === null || res === void 0 ? void 0 : res.payCardListOneUser\n    }));\n  },\n  getOrderInfo: async (value, option) => {\n    var _res$getDataConfig$va, _res$getDataConfig, _res$getDataConfig$va2, _res$freightConfig$va, _res$freightConfig, _res$freightConfig$va2, _res$userLevelList, _res$userAddressListO, _res$userAddressListO2, _res$getDataConfig2, _res$getDataConfig2$v, _res$getDataConfig2$v2, _res$getDataConfig2$v3, _ref, _ref$find;\n\n    const res = await option.query(doc.orderConfirmInfo);\n    option.setData(fpMergePre({\n      user: res === null || res === void 0 ? void 0 : res.oneUser,\n      payCardList: res === null || res === void 0 ? void 0 : res.payCardListOneUser,\n      userAddressList: res === null || res === void 0 ? void 0 : res.userAddressListOneUser,\n      selfAddress: (_res$getDataConfig$va = res === null || res === void 0 ? void 0 : (_res$getDataConfig = res.getDataConfig) === null || _res$getDataConfig === void 0 ? void 0 : (_res$getDataConfig$va2 = _res$getDataConfig.value) === null || _res$getDataConfig$va2 === void 0 ? void 0 : _res$getDataConfig$va2.list) !== null && _res$getDataConfig$va !== void 0 ? _res$getDataConfig$va : [],\n      freightConfig: (_res$freightConfig$va = res === null || res === void 0 ? void 0 : (_res$freightConfig = res.freightConfig) === null || _res$freightConfig === void 0 ? void 0 : (_res$freightConfig$va2 = _res$freightConfig.value) === null || _res$freightConfig$va2 === void 0 ? void 0 : _res$freightConfig$va2.freightList) !== null && _res$freightConfig$va !== void 0 ? _res$freightConfig$va : [],\n      userLevelList: (_res$userLevelList = res === null || res === void 0 ? void 0 : res.userLevelList) !== null && _res$userLevelList !== void 0 ? _res$userLevelList : []\n    }));\n    option.setData(fpMergePre({\n      form: {\n        addressId: option.data.form.pickUpType === PickUpTypeEnum.Delivery && (res === null || res === void 0 ? void 0 : (_res$userAddressListO = res.userAddressListOneUser) === null || _res$userAddressListO === void 0 ? void 0 : (_res$userAddressListO2 = _res$userAddressListO.find(v => v.isDefault)) === null || _res$userAddressListO2 === void 0 ? void 0 : _res$userAddressListO2.id) || (res === null || res === void 0 ? void 0 : (_res$getDataConfig2 = res.getDataConfig) === null || _res$getDataConfig2 === void 0 ? void 0 : (_res$getDataConfig2$v = _res$getDataConfig2.value) === null || _res$getDataConfig2$v === void 0 ? void 0 : (_res$getDataConfig2$v2 = _res$getDataConfig2$v.list) === null || _res$getDataConfig2$v2 === void 0 ? void 0 : (_res$getDataConfig2$v3 = _res$getDataConfig2$v2[0]) === null || _res$getDataConfig2$v3 === void 0 ? void 0 : _res$getDataConfig2$v3.id),\n        paymentMethodCardId: ((_ref = res === null || res === void 0 ? void 0 : res.payCardListOneUser) === null || _ref === void 0 ? void 0 : (_ref$find = _ref.find(v => v.isDefault)) === null || _ref$find === void 0 ? void 0 : _ref$find.id) || ''\n      }\n    }));\n  },\n  submit: async (value, option) => {\n    return await option.mutate(doc.saveOrder, {\n      orderInfoItemInput: _objectSpread({}, value)\n    });\n  }\n});\nexport const CartPage = () => {\n  const {\n    state: stateSCM\n  } = useStoreModel(shopCartModel);\n  return stateSCM.pageType === pageTypeEnum.order && __jsx(OrderPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 55\n    }\n  }) || __jsx(ShopCartPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 72\n    }\n  });\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/cart/index.tsx"],"names":["modelFactory","PickUpTypeEnum","dealMaybeNumber","fpMergePre","setForm","doc","ShopCartPage","React","useStoreModel","OrderPage","pageTypeEnum","shopCart","order","initForm","pickUpType","Self","addressId","paymentMethodCardId","deductCoin","saleTax","transportationCosts","shopCartModel","user","payCardList","userAddressList","selfAddress","freightConfig","userLevelList","pageType","shopCartList","shopCartListNext","form","dealProductNumber","state","reduce","pre","cur","number","dealAddressList","Delivery","map","v","combineAddress","province","city","streetAddress","name","fullName","contactInformation","phone","dealAddressData","find","id","initAddressId","isDefault","dealProductTotal","product","priceOut","clearData","value","option","setData","clearForm","getList","res","query","userShopCartList","filter","isNext","updatePageType","updatePayCardList","orderConfirmInfo","payCardListOneUser","getOrderInfo","oneUser","userAddressListOneUser","getDataConfig","list","freightList","data","submit","mutate","saveOrder","orderInfoItemInput","CartPage","stateSCM"],"mappings":";;;;;;;;;AAAA,SAAQA,YAAR,QAA2B,6BAA3B;AAEA,SAAQC,cAAR,QAA6B,sBAA7B;AACA,SAAQC,eAAR,EAAyBC,UAAzB,QAA0C,mBAA1C;AACA,SAAQC,OAAR,QAAsB,0BAAtB;AACA,SAAQC,GAAR,QAAkB,wBAAlB;AACA,SAAQC,YAAR,QAA2B,YAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,UADgB;AAE1BC,EAAAA,KAAK,EAAE;AAFmB,CAArB;AAKP,MAAMC,QAA4B,GAAG;AACnCC,EAAAA,UAAU,EAAEb,cAAc,CAACc,IADQ;AAEnCC,EAAAA,SAAS,EAAE,EAFwB;AAGnCC,EAAAA,mBAAmB,EAAE,EAHc;AAInCC,EAAAA,UAAU,EAAE,CAJuB;AAKnCC,EAAAA,OAAO,EAAE,CAL0B;AAMnCC,EAAAA,mBAAmB,EAAE;AANc,CAArC;AAQA,OAAO,MAAMC,aAAa,GAAGrB,YAAY,CAAC,eAAD,EAAkB;AACzDsB,EAAAA,IAAI,EAAE,EADmD;AAEzDC,EAAAA,WAAW,EAAE,EAF4C;AAGzDC,EAAAA,eAAe,EAAE,EAHwC;AAIzDC,EAAAA,WAAW,EAAE,EAJ4C;AAKzDC,EAAAA,aAAa,EAAE,EAL0C;AAMzDC,EAAAA,aAAa,EAAE,EAN0C;AAOzDC,EAAAA,QAAQ,EAAElB,YAAY,CAACC,QAPkC;AAQzDkB,EAAAA,YAAY,EAAE,EAR2C;AASzDC,EAAAA,gBAAgB,EAAE,EATuC;AAUzDC,EAAAA,IAAI,oBACClB,QADD,CAVqD;AAazDmB,EAAAA,iBAAiB,EAAGC,KAAD,IAAiBA,KAAK,CAACJ,YAAP,CAA8BK,MAA9B,CAAqC,CAACC,GAAD,EAAMC,GAAN;AAAA;;AAAA,WAAcD,GAAG,mBAAIC,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEC,MAAT,qDAAmB,CAAnB,CAAjB;AAAA,GAArC,EAA6E,CAA7E,CAbsB;AAczDC,EAAAA,eAAe,EAAIL,KAAD,IAAiBA,KAAK,CAACF,IAAN,CAAWjB,UAAX,KAA0Bb,cAAc,CAACsC,QAAzC,IAAqDN,KAAK,CAACT,eAA5D,IAAgFS,KAAK,CAACR,WAAN,CAAkBe,GAAlB,CAAuBC,CAAD,oCACnIA,CADmI;AAEtIC,IAAAA,cAAc,EAAG,GAAED,CAAC,CAACE,QAAS,IAAGF,CAAC,CAACG,IAAK,IAAGH,CAAC,CAACI,aAAc,EAF2E;AAGtIC,IAAAA,IAAI,EAAEL,CAAC,CAACM,QAH8H;AAItIC,IAAAA,kBAAkB,EAAEP,CAAC,CAACQ;AAJgH,IAAtB,CAdzD;AAoBzDC,EAAAA,eAAe,EAAGjB,KAAD,IAAgBA,KAAK,CAACK,eAAN,CAAsBL,KAAtB,EAA6BkB,IAA7B,CAAmCV,CAAD,IAAoBA,CAAC,CAACW,EAAF,KAASnB,KAAK,CAACF,IAAN,CAAWf,SAA1E,KAAwF,EApBhE;AAqBzDqC,EAAAA,aAAa,EAAGpB,KAAD;AAAA;;AAAA,WAAiBA,KAAK,CAACF,IAAN,CAAWjB,UAAX,KAA0Bb,cAAc,CAACsC,QAAzC,8BAAqDN,KAAK,CAACT,eAA3D,oFAAqD,sBAAuB2B,IAAvB,CAA6BV,CAAD,IAAoBA,CAAC,CAACa,SAAlD,CAArD,2DAAqD,uBAA8DF,EAAnH,CAAD,2BAA2HnB,KAAK,CAACR,WAAjI,8EAA2H,mBAAoB,CAApB,CAA3H,wDAA2H,oBAAwB2B,EAAnJ,CAAhB;AAAA,GArB0C;AAsBzDG,EAAAA,gBAAgB,EAAGtB,KAAD,IAAgBA,KAAK,CAACJ,YAAN,CAAmBK,MAAnB,CAA0B,CAACC,GAAD,EAAWC,GAAX;AAAA;;AAAA,WAAwBD,GAAG,GAAIjC,eAAe,CAACkC,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEC,MAAN,CAAf,GAA+BnC,eAAe,CAACkC,GAAD,aAACA,GAAD,uCAACA,GAAG,CAAEoB,OAAN,iDAAC,aAAcC,QAAf,CAA7E;AAAA,GAA1B,EAAkI,CAAlI;AAtBuB,CAAlB,EAuBtC;AACDC,EAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BA,IAAAA,MAAM,CAACC,OAAP,CAAe1D,UAAU,CAAC;AACxB4B,MAAAA,IAAI,EAAElB,QADkB;AAExBe,MAAAA,QAAQ,EAAElB,YAAY,CAACC;AAFC,KAAD,CAAzB;AAID,GANA;AAODmD,EAAAA,SAAS,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC,OAAP,CAAe1D,UAAU,CAAC;AACtD4B,IAAAA,IAAI,oBACClB,QADD;AADkD,GAAD,CAAzB,CAP7B;AAYDT,EAAAA,OAAO,EAAEA,OAZR;AAaD2D,EAAAA,OAAO,EAAE,OAAOJ,KAAP,EAAcC,MAAd,KAAyB;AAAA;;AAChC,UAAMI,GAAG,GAAG,MAAMJ,MAAM,CAACK,KAAP,CAAa5D,GAAG,CAAC6D,gBAAjB,CAAlB;AACAN,IAAAA,MAAM,CAACC,OAAP,CAAe1D,UAAU,CAAC;AACxB0B,MAAAA,YAAY,2BAAEmC,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEnC,YAAL,CAAkBsC,MAAlB,CAA0B1B,CAAD,IAAiB,CAACA,CAAC,CAAC2B,MAA7C,CAAF,yEAA0D,EAD9C;AAExBtC,MAAAA,gBAAgB,4BAAEkC,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEnC,YAAL,CAAkBsC,MAAlB,CAA0B1B,CAAD,IAAiB,CAAC,CAACA,CAAC,CAAC2B,MAA9C,CAAF,2EAA2D;AAFnD,KAAD,CAAzB;AAID,GAnBA;AAoBDC,EAAAA,cAAc,EAAE,CAACV,KAAD,EAAgBC,MAAhB,KAA2BA,MAAM,CAACC,OAAP,CAAe1D,UAAU,CAAC;AACnEyB,IAAAA,QAAQ,EAAE+B;AADyD,GAAD,CAAzB,CApB1C;AAuBDW,EAAAA,iBAAiB,EAAE,OAAOX,KAAP,EAAcC,MAAd,KAAyB;AAC1C,UAAMI,GAAG,GAAG,MAAMJ,MAAM,CAACK,KAAP,CAAa5D,GAAG,CAACkE,gBAAjB,CAAlB;AACAX,IAAAA,MAAM,CAACC,OAAP,CAAe1D,UAAU,CAAC;AACxBoB,MAAAA,WAAW,EAAEyC,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEQ;AADM,KAAD,CAAzB;AAGD,GA5BA;AA6BDC,EAAAA,YAAY,EAAE,OAAOd,KAAP,EAAcC,MAAd,KAAyB;AAAA;;AACrC,UAAMI,GAAG,GAAG,MAAMJ,MAAM,CAACK,KAAP,CAAa5D,GAAG,CAACkE,gBAAjB,CAAlB;AACAX,IAAAA,MAAM,CAACC,OAAP,CAAe1D,UAAU,CAAC;AACxBmB,MAAAA,IAAI,EAAE0C,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEU,OADa;AAExBnD,MAAAA,WAAW,EAAEyC,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEQ,kBAFM;AAGxBhD,MAAAA,eAAe,EAAEwC,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEW,sBAHE;AAIxBlD,MAAAA,WAAW,2BAAEuC,GAAF,aAAEA,GAAF,6CAAEA,GAAG,CAAEY,aAAP,iFAAE,mBAAoBjB,KAAtB,2DAAE,uBAA2BkB,IAA7B,yEAAqC,EAJxB;AAKxBnD,MAAAA,aAAa,2BAAEsC,GAAF,aAAEA,GAAF,6CAAEA,GAAG,CAAEtC,aAAP,iFAAE,mBAAoBiC,KAAtB,2DAAE,uBAA2BmB,WAA7B,yEAA4C,EALjC;AAMxBnD,MAAAA,aAAa,wBAAEqC,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAErC,aAAP,mEAAwB;AANb,KAAD,CAAzB;AAQAiC,IAAAA,MAAM,CAACC,OAAP,CAAe1D,UAAU,CAAC;AACxB4B,MAAAA,IAAI,EAAE;AACJf,QAAAA,SAAS,EAAG4C,MAAM,CAACmB,IAAP,CAAYhD,IAAZ,CAAiBjB,UAAjB,KAAgCb,cAAc,CAACsC,QAA/C,KAA2DyB,GAA3D,aAA2DA,GAA3D,gDAA2DA,GAAG,CAAEW,sBAAhE,oFAA2D,sBAA6BxB,IAA7B,CAAmCV,CAAD,IAAoBA,CAAC,CAACa,SAAxD,CAA3D,2DAA2D,uBAAoEF,EAA/H,CAAD,KAAuIY,GAAvI,aAAuIA,GAAvI,8CAAuIA,GAAG,CAAEY,aAA5I,iFAAuI,oBAAoBjB,KAA3J,oFAAuI,sBAA2BkB,IAAlK,qFAAuI,uBAAkC,CAAlC,CAAvI,2DAAuI,uBAAsCzB,EAA7K,CADP;AAEJnC,QAAAA,mBAAmB,EAAE,SAAC+C,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEQ,kBAAN,2DAA4CrB,IAA5C,CAAiDV,CAAC,IAAIA,CAAC,CAACa,SAAxD,yDAAoEF,EAApE,KAA0E;AAF3F;AADkB,KAAD,CAAzB;AAMD,GA7CA;AA8CD4B,EAAAA,MAAM,EAAE,OAAOrB,KAAP,EAAkCC,MAAlC,KAA6C;AACnD,WAAO,MAAMA,MAAM,CAACqB,MAAP,CAAc5E,GAAG,CAAC6E,SAAlB,EAA6B;AACxCC,MAAAA,kBAAkB,oBACbxB,KADa;AADsB,KAA7B,CAAb;AAKD;AApDA,CAvBsC,CAAlC;AA8EP,OAAO,MAAMyB,QAAQ,GAAG,MAAM;AAC5B,QAAM;AAACnD,IAAAA,KAAK,EAAEoD;AAAR,MAAoB7E,aAAa,CAACa,aAAD,CAAvC;AACA,SAAQgE,QAAQ,CAACzD,QAAT,KAAsBlB,YAAY,CAACE,KAAnC,IAA4C,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7C,IAA8D,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArE;AACD,CAHM","sourcesContent":["import {modelFactory} from '../../ModelAction/modelUtil'\r\nimport {Dict, OrderInfoItemInput, ShopCart, User, UserAddress, UserPayCard} from '../../graphqlTypes/types'\r\nimport {PickUpTypeEnum} from '../../ss_common/enum'\r\nimport {dealMaybeNumber, fpMergePre} from '../../tools/utils'\r\nimport {setForm} from '../../tools/commonAction'\r\nimport {doc} from '../../graphqlTypes/doc'\r\nimport {ShopCartPage} from './shopCart'\r\nimport React from 'react'\r\nimport {useStoreModel} from '../../ModelAction/useStore'\r\nimport {OrderPage} from './orderPage'\r\n\r\nexport const pageTypeEnum = {\r\n  shopCart: 'shopCart',\r\n  order: 'order',\r\n}\r\n\r\nconst initForm: OrderInfoItemInput = {\r\n  pickUpType: PickUpTypeEnum.Self,\r\n  addressId: '',\r\n  paymentMethodCardId: '',\r\n  deductCoin: 0,\r\n  saleTax: 0,\r\n  transportationCosts: 0,\r\n}\r\nexport const shopCartModel = modelFactory('shopCartModel', {\r\n  user: {} as User,\r\n  payCardList: [] as UserPayCard[],\r\n  userAddressList: [] as UserAddress[],\r\n  selfAddress: [] as any[],\r\n  freightConfig: [] as any[],\r\n  userLevelList: [] as Dict[],\r\n  pageType: pageTypeEnum.shopCart,\r\n  shopCartList: [] as ShopCart[],\r\n  shopCartListNext: [] as ShopCart[],\r\n  form: {\r\n    ...initForm,\r\n  } as OrderInfoItemInput,\r\n  dealProductNumber: (state: any) => (state.shopCartList as any[]).reduce((pre, cur) => pre + (cur?.number ?? 0), 0),\r\n  dealAddressList: ((state: any) => (state.form.pickUpType === PickUpTypeEnum.Delivery && state.userAddressList) || state.selfAddress.map((v: any) => ({\r\n    ...v,\r\n    combineAddress: `${v.province} ${v.city} ${v.streetAddress}`,\r\n    name: v.fullName,\r\n    contactInformation: v.phone,\r\n  }))) as (state: any) => UserAddress[],\r\n  dealAddressData: (state: any) => state.dealAddressList(state).find((v: UserAddress) => v.id === state.form.addressId) || {},\r\n  initAddressId: (state: any) => (state.form.pickUpType === PickUpTypeEnum.Delivery && state.userAddressList?.find((v: UserAddress) => v.isDefault)?.id) || state.selfAddress?.[0]?.id,\r\n  dealProductTotal: (state: any) => state.shopCartList.reduce((pre: any, cur: any) => pre + (dealMaybeNumber(cur?.number) * dealMaybeNumber(cur?.product?.priceOut)), 0),\r\n}, {\r\n  clearData: (value, option) => {\r\n    option.setData(fpMergePre({\r\n      form: initForm,\r\n      pageType: pageTypeEnum.shopCart,\r\n    }))\r\n  },\r\n  clearForm: (value, option) => option.setData(fpMergePre({\r\n    form: {\r\n      ...initForm,\r\n    },\r\n  })),\r\n  setForm: setForm,\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.userShopCartList)\r\n    option.setData(fpMergePre({\r\n      shopCartList: res?.shopCartList.filter((v: ShopCart) => !v.isNext) ?? [],\r\n      shopCartListNext: res?.shopCartList.filter((v: ShopCart) => !!v.isNext) ?? [],\r\n    }))\r\n  },\r\n  updatePageType: (value: string, option) => option.setData(fpMergePre({\r\n    pageType: value,\r\n  })),\r\n  updatePayCardList: async (value, option) => {\r\n    const res = await option.query(doc.orderConfirmInfo)\r\n    option.setData(fpMergePre({\r\n      payCardList: res?.payCardListOneUser,\r\n    }))\r\n  },\r\n  getOrderInfo: async (value, option) => {\r\n    const res = await option.query(doc.orderConfirmInfo)\r\n    option.setData(fpMergePre({\r\n      user: res?.oneUser,\r\n      payCardList: res?.payCardListOneUser,\r\n      userAddressList: res?.userAddressListOneUser,\r\n      selfAddress: res?.getDataConfig?.value?.list ?? [],\r\n      freightConfig: res?.freightConfig?.value?.freightList ?? [],\r\n      userLevelList: res?.userLevelList ?? [],\r\n    }))\r\n    option.setData(fpMergePre({\r\n      form: {\r\n        addressId: (option.data.form.pickUpType === PickUpTypeEnum.Delivery && res?.userAddressListOneUser?.find((v: UserAddress) => v.isDefault)?.id) || res?.getDataConfig?.value?.list?.[0]?.id,\r\n        paymentMethodCardId: (res?.payCardListOneUser as UserPayCard[])?.find(v => v.isDefault)?.id || '',\r\n      },\r\n    }))\r\n  },\r\n  submit: async (value: OrderInfoItemInput, option) => {\r\n    return await option.mutate(doc.saveOrder, {\r\n      orderInfoItemInput: {\r\n        ...value,\r\n      } as OrderInfoItemInput,\r\n    })\r\n  },\r\n})\r\n\r\nexport const CartPage = () => {\r\n  const {state: stateSCM} = useStoreModel(shopCartModel)\r\n  return (stateSCM.pageType === pageTypeEnum.order && <OrderPage/>) || <ShopCartPage/>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}