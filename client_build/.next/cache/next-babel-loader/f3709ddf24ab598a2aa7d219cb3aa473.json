{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { PickUpTypeEnum } from '../../../ss_common/enum';\nimport { dealMaybeNumber, fpMergePre, fpSetPre } from '../../../tools/utils';\nimport { setForm } from '../../../tools/commonAction';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { ShopCartPage } from './shopCart';\nimport React from 'react';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nimport { OrderPage } from './orderPage';\nimport { ll } from '../../../tools/dealKey';\nexport const pageTypeEnum = {\n  shopCart: 'shopCart',\n  order: 'order'\n};\nconst initForm = {\n  pickUpType: PickUpTypeEnum.Self,\n  addressId: '',\n  paymentMethodCardId: '',\n  deductCoin: 0,\n  saleTax: 0,\n  transportationCosts: 0,\n  couponDiscount: 0\n};\nexport const ShopCartModel = modelFactory('shopCartModel', {\n  isGroupOrder: false,\n  user: {},\n  promoCode: {},\n  promoCodeError: '',\n  payCardList: [],\n  userAddressList: [],\n  selfAddress: [],\n  freightConfig: [],\n  userLevelList: [],\n  pageType: pageTypeEnum.shopCart,\n  shopCartList: [],\n  shopCartListNext: [],\n  form: _objectSpread({}, initForm),\n  dealProductNumber: state => state.shopCartList.reduce((pre, cur) => {\n    var _cur$number;\n\n    return pre + ((_cur$number = cur === null || cur === void 0 ? void 0 : cur.number) !== null && _cur$number !== void 0 ? _cur$number : 0);\n  }, 0),\n  dealAddressList: state => state.form.pickUpType === PickUpTypeEnum.Delivery && state.userAddressList || state.selfAddress.map(v => _objectSpread(_objectSpread({}, v), {}, {\n    combineAddress: `${v.province} ${v.city} ${v.streetAddress}`,\n    name: v.fullName,\n    address: v.streetAddress,\n    contactInformation: v.phone\n  })),\n  dealAddressData: state => state.dealAddressList(state).find(v => v.id === state.form.addressId) || {},\n  initAddressId: state => {\n    var _state$userAddressLis, _state$userAddressLis2, _state$selfAddress, _state$selfAddress$;\n\n    return state.form.pickUpType === PickUpTypeEnum.Delivery && ((_state$userAddressLis = state.userAddressList) === null || _state$userAddressLis === void 0 ? void 0 : (_state$userAddressLis2 = _state$userAddressLis.find(v => v.isDefault)) === null || _state$userAddressLis2 === void 0 ? void 0 : _state$userAddressLis2.id) || ((_state$selfAddress = state.selfAddress) === null || _state$selfAddress === void 0 ? void 0 : (_state$selfAddress$ = _state$selfAddress[0]) === null || _state$selfAddress$ === void 0 ? void 0 : _state$selfAddress$.id);\n  },\n  dealProductTotal: state => state.shopCartList.reduce((pre, cur) => {\n    var _cur$product;\n\n    return pre + dealMaybeNumber(cur === null || cur === void 0 ? void 0 : cur.number) * dealMaybeNumber(cur === null || cur === void 0 ? void 0 : (_cur$product = cur.product) === null || _cur$product === void 0 ? void 0 : _cur$product.priceOut);\n  }, 0),\n  dealTransportationCosts: (state, productTotal) => {\n    var _state$freightConfig;\n\n    return state.form.pickUpType === PickUpTypeEnum.Delivery && state.freightConfig.reduce((pre, cur) => {\n      if (pre > parseFloat(cur === null || cur === void 0 ? void 0 : cur.freightPay) && productTotal < parseFloat(cur === null || cur === void 0 ? void 0 : cur.orderMax)) {\n        return parseFloat(cur === null || cur === void 0 ? void 0 : cur.freightPay);\n      } else {\n        return pre;\n      }\n    }, parseFloat((_state$freightConfig = state.freightConfig[state.freightConfig.length - 1]) === null || _state$freightConfig === void 0 ? void 0 : _state$freightConfig.freightPay)) || 0;\n  }\n}, {\n  updateIsGroupOrder: async (value, option) => {\n    option.setData(fpMergePre({\n      isGroupOrder: value\n    }));\n  },\n  clearData: (value, option) => {\n    option.setData(fpMergePre({\n      form: initForm,\n      pageType: pageTypeEnum.shopCart\n    }));\n  },\n  clearForm: (value, option) => option.setData(fpMergePre({\n    form: _objectSpread({}, initForm)\n  })),\n  setForm: setForm,\n  getList: async (value, option) => {\n    var _userRes$oneUser, _res$shopCartList$fil, _res$shopCartList$fil2;\n\n    const userRes = await option.query(doc.oneUser);\n    const res = await option.query(doc.userShopCartList);\n    option.setData(fpMergePre({\n      user: (_userRes$oneUser = userRes === null || userRes === void 0 ? void 0 : userRes.oneUser) !== null && _userRes$oneUser !== void 0 ? _userRes$oneUser : {},\n      shopCartList: (_res$shopCartList$fil = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !v.isNext)) !== null && _res$shopCartList$fil !== void 0 ? _res$shopCartList$fil : [],\n      shopCartListNext: (_res$shopCartList$fil2 = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !!v.isNext)) !== null && _res$shopCartList$fil2 !== void 0 ? _res$shopCartList$fil2 : []\n    }));\n  },\n  dealPromoCode: async (value, option) => {\n    var _res$promoCodeList;\n\n    const res = await option.query(doc.promoCodeList, {\n      promoCodeItemInput: {\n        code: value\n      }\n    });\n\n    if ((res === null || res === void 0 ? void 0 : (_res$promoCodeList = res.promoCodeList) === null || _res$promoCodeList === void 0 ? void 0 : _res$promoCodeList.length) === 1) {\n      const promoCode = res.promoCodeList[0];\n      option.setData(fpMergePre({\n        promoCode\n      }));\n      return '';\n    } else {\n      return ll('未匹配到优惠码');\n    }\n  },\n  updatePageType: (value, option) => option.setData(fpMergePre({\n    pageType: value\n  })),\n  updatePayCardList: async (value, option) => {\n    const res = await option.query(doc.orderConfirmInfo);\n    option.setData(fpMergePre({\n      payCardList: res === null || res === void 0 ? void 0 : res.payCardListOneUser\n    }));\n  },\n  getOrderInfo: async (value, option) => {\n    var _res$getDataConfig$va, _res$getDataConfig, _res$getDataConfig$va2, _res$freightConfig$va, _res$freightConfig, _res$freightConfig$va2, _res$userLevelList, _res$userAddressListO, _res$userAddressListO2, _res$getDataConfig2, _res$getDataConfig2$v, _res$getDataConfig2$v2, _res$getDataConfig2$v3, _res$payCardListOneUs, _res$payCardListOneUs2;\n\n    const res = await option.query(doc.orderConfirmInfo);\n    option.setData(fpSetPre('user', res === null || res === void 0 ? void 0 : res.oneUser));\n    option.setData(fpMergePre({\n      payCardList: res === null || res === void 0 ? void 0 : res.payCardListOneUser,\n      userAddressList: res === null || res === void 0 ? void 0 : res.userAddressListOneUser,\n      selfAddress: (_res$getDataConfig$va = res === null || res === void 0 ? void 0 : (_res$getDataConfig = res.getDataConfig) === null || _res$getDataConfig === void 0 ? void 0 : (_res$getDataConfig$va2 = _res$getDataConfig.value) === null || _res$getDataConfig$va2 === void 0 ? void 0 : _res$getDataConfig$va2.list) !== null && _res$getDataConfig$va !== void 0 ? _res$getDataConfig$va : [],\n      freightConfig: (_res$freightConfig$va = res === null || res === void 0 ? void 0 : (_res$freightConfig = res.freightConfig) === null || _res$freightConfig === void 0 ? void 0 : (_res$freightConfig$va2 = _res$freightConfig.value) === null || _res$freightConfig$va2 === void 0 ? void 0 : _res$freightConfig$va2.freightList) !== null && _res$freightConfig$va !== void 0 ? _res$freightConfig$va : [],\n      userLevelList: (_res$userLevelList = res === null || res === void 0 ? void 0 : res.userLevelList) !== null && _res$userLevelList !== void 0 ? _res$userLevelList : []\n    }));\n    option.setData(fpMergePre({\n      form: {\n        addressId: option.data.form.pickUpType === PickUpTypeEnum.Delivery && (res === null || res === void 0 ? void 0 : (_res$userAddressListO = res.userAddressListOneUser) === null || _res$userAddressListO === void 0 ? void 0 : (_res$userAddressListO2 = _res$userAddressListO.find(v => v.isDefault)) === null || _res$userAddressListO2 === void 0 ? void 0 : _res$userAddressListO2.id) || (res === null || res === void 0 ? void 0 : (_res$getDataConfig2 = res.getDataConfig) === null || _res$getDataConfig2 === void 0 ? void 0 : (_res$getDataConfig2$v = _res$getDataConfig2.value) === null || _res$getDataConfig2$v === void 0 ? void 0 : (_res$getDataConfig2$v2 = _res$getDataConfig2$v.list) === null || _res$getDataConfig2$v2 === void 0 ? void 0 : (_res$getDataConfig2$v3 = _res$getDataConfig2$v2[0]) === null || _res$getDataConfig2$v3 === void 0 ? void 0 : _res$getDataConfig2$v3.id),\n        paymentMethodCardId: (res === null || res === void 0 ? void 0 : (_res$payCardListOneUs = res.payCardListOneUser) === null || _res$payCardListOneUs === void 0 ? void 0 : (_res$payCardListOneUs2 = _res$payCardListOneUs.find(v => v.isDefault)) === null || _res$payCardListOneUs2 === void 0 ? void 0 : _res$payCardListOneUs2.id) || ''\n      }\n    }));\n  },\n  submit: async (value, option) => {\n    return await option.mutate(doc.saveOrder, {\n      orderInfoItemInput: _objectSpread({}, value)\n    });\n  },\n  moveToNext: async ({\n    shopCart\n  }, option) => {\n    const oldNext = option.data.shopCartListNext.find(value => {\n      var _value$product, _shopCart$product;\n\n      return ((_value$product = value.product) === null || _value$product === void 0 ? void 0 : _value$product.id) === ((_shopCart$product = shopCart.product) === null || _shopCart$product === void 0 ? void 0 : _shopCart$product.id);\n    });\n\n    if (oldNext === null || oldNext === void 0 ? void 0 : oldNext.id) {\n      await option.mutate(doc.updateShopCart, {\n        shopCart: {\n          isDelete: 1,\n          id: oldNext.id\n        }\n      });\n      await option.mutate(doc.updateShopCart, {\n        shopCart: {\n          isNext: 1,\n          id: shopCart.id\n        }\n      });\n    } else {\n      await option.mutate(doc.updateShopCart, {\n        shopCart: {\n          isNext: 1,\n          id: shopCart.id\n        }\n      });\n    }\n  },\n  testPromoCode: async (value, option) => {\n    return '123';\n  }\n});\nexport const CartPage = () => {\n  const {\n    state: stateSCM\n  } = useStoreModel(ShopCartModel);\n  return stateSCM.pageType === pageTypeEnum.order && __jsx(OrderPage, null) || __jsx(ShopCartPage, null);\n};","map":null,"metadata":{},"sourceType":"module"}