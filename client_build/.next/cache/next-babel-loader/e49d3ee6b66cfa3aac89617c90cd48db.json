{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Router from 'next/router';\nimport { fpSetPre } from '../../tools/utils';\nimport { setToken } from '../../tools/token';\nimport { showMessage } from '../../components/Message/Message';\nimport { doc } from '../../graphqlTypes/doc';\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { ls } from '../../tools/dealKey';\nexport const loginModel = modelFactory('loginModel', {\n  form: {\n    name: '',\n    password: ''\n  }\n}, {\n  setForm: ([path, value], option) => {\n    option.setData(fpSetPre(`form.${path}`, value));\n  },\n  login: async (value, option) => {\n    var _res$login;\n\n    const form = option.data.form;\n\n    if (!(form === null || form === void 0 ? void 0 : form.name) || !(form === null || form === void 0 ? void 0 : form.password)) {\n      return showMessage(ls('请填写表单'));\n    }\n\n    const res = await option.query(doc.login, {\n      data: _objectSpread({}, form)\n    });\n\n    if (res === null || res === void 0 ? void 0 : (_res$login = res.login) === null || _res$login === void 0 ? void 0 : _res$login.token) {\n      var _res$login2, _res$login3;\n\n      setToken(res === null || res === void 0 ? void 0 : (_res$login2 = res.login) === null || _res$login2 === void 0 ? void 0 : _res$login2.token);\n      setToken(res === null || res === void 0 ? void 0 : (_res$login3 = res.login) === null || _res$login3 === void 0 ? void 0 : _res$login3.refreshtoken, 'refreshtoken');\n      await Router.push('/home');\n    }\n  },\n  goToSignin: async (value, option) => {\n    await Router.push('/register');\n  },\n  goHome: async (value, option) => {\n    await Router.push('/home/[appModule]', '/home/categorySelection');\n  }\n});","map":null,"metadata":{},"sourceType":"module"}