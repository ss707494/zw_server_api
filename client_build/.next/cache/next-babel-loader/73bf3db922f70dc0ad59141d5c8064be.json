{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport SortIcon from '@material-ui/icons/Sort';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { useRouter } from 'next/router';\nimport { fpMergePre } from '../../tools/utils';\nimport { doc } from '../../graphqlTypes/doc';\nimport { useStoreModel } from '../../ModelAction/useStore';\nimport { HeaderTitle } from '../../components/HeaderTitle/HeaderTitle';\nimport styled from 'styled-components';\nimport { Button } from '@material-ui/core';\nimport { ls } from '../../tools/dealKey';\nimport { GroupProductItem, ProductItem } from '../../components/ProductItem/ProductItem';\nimport { BScroller } from '../../components/BScroll/BScroller';\nimport { SortDrawer } from './SortDrawer';\nimport { FilterDrawer } from './FilterDrawer';\nimport { HomeType } from '../home/appModule';\nimport { homeTabsModel } from '../home/components/Tabs/Tabs';\nexport const sortTypeEnum = {\n  nomalSort: 'nomalSort',\n  highestSales: 'highestSales',\n  new: 'new',\n  priceAsc: 'priceAsc',\n  priceDesc: 'priceDesc'\n};\nexport const dealSortSql = type => {\n  const _sql = {\n    nomalSort: [['id', 'asc'], ['createTime', 'asc']],\n    highestSales: [],\n    new: [['createTime', 'desc']],\n    priceAsc: [['priceOut', 'asc']],\n    priceDesc: [['priceOut', 'desc']]\n  };\n  return _sql[type] || [];\n};\nexport const sortTypeLabel = {\n  nomalSort: '综合排序',\n  highestSales: '销量最高',\n  new: '最新上架',\n  priceAsc: '价格由低到高',\n  priceDesc: '价格由高到低'\n};\nexport const productListModel = modelFactory('productListModel', {\n  category: {},\n  productList: [],\n  sortShow: false,\n  params: {\n    sortType: sortTypeEnum.nomalSort\n  },\n  filterShow: false,\n  onResolve: () => {}\n}, {\n  getCategory: async (value, option) => {\n    var _res$oneCategory;\n\n    const res = await option.query(doc.oneCategory, {\n      data: value\n    });\n    option.setData(fpMergePre({\n      category: (_res$oneCategory = res === null || res === void 0 ? void 0 : res.oneCategory) !== null && _res$oneCategory !== void 0 ? _res$oneCategory : {}\n    }));\n  },\n  getData: async (value, option) => {\n    var _res$productList$list, _res$productList;\n\n    const res = await option.query(doc.productList, {\n      productInput: value,\n      orderByInput: {\n        orderByObject: dealSortSql(option.data.params.sortType)\n      }\n    });\n    option.setData(fpMergePre({\n      productList: (_res$productList$list = res === null || res === void 0 ? void 0 : (_res$productList = res.productList) === null || _res$productList === void 0 ? void 0 : _res$productList.list) !== null && _res$productList$list !== void 0 ? _res$productList$list : []\n    }));\n  },\n  openSort: (value, option) => {\n    return new Promise(resolve => {\n      option.setData(fpMergePre({\n        sortShow: true,\n        onResolve: resolve\n      }));\n    });\n  },\n  closeSort: (value, option) => {\n    option.setData(fpMergePre({\n      sortShow: false\n    }));\n    option.data.onResolve(value);\n  },\n  changeSort: async (value, option) => {\n    option.setData(fpMergePre({\n      params: {\n        sortType: value\n      }\n    }));\n  },\n  openFilter: (value, option) => {\n    return new Promise(resolve => {\n      option.setData(fpMergePre({\n        filterShow: true,\n        onResolve: resolve\n      }));\n    });\n  },\n  closeFilter: (value, option) => {\n    option.setData(fpMergePre({\n      filterShow: false\n    }));\n    option.data.onResolve(value);\n  }\n});\nconst HeaderTab = styled.div.withConfig({\n  displayName: \"id__HeaderTab\",\n  componentId: \"sc-1l2qjuw-0\"\n})([\"display:flex;justify-content:space-evenly;\"]);\nconst ListBox = styled.div.withConfig({\n  displayName: \"id__ListBox\",\n  componentId: \"sc-1l2qjuw-1\"\n})([\"padding:20px;display:grid;grid-template-columns:repeat(\", \",1fr);grid-gap:16px;\"], props => props.columns || 2);\nexport const ProductList = () => {\n  var _ref, _router$query, _statePLM$category;\n\n  const router = useRouter();\n  const id = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id) !== null && _ref !== void 0 ? _ref : '';\n  const {\n    actions: actionsPLM,\n    state: statePLM\n  } = useStoreModel(productListModel);\n  const {\n    state: stateHomeTabs,\n    actions: actionsHomeTabs\n  } = useStoreModel(homeTabsModel);\n  useEffect(() => {\n    var _ref2;\n\n    actionsHomeTabs.setHomeType((_ref2 = router.query.homeType) !== null && _ref2 !== void 0 ? _ref2 : HomeType.home);\n  }, [router.query.homeType]);\n  useEffect(() => {\n    if (!!id) {\n      actionsPLM.getCategory({\n        id\n      });\n      actionsPLM.getData({\n        isGroup: router.query.homeType === HomeType.group ? 1 : 0,\n        category: {\n          id\n        }\n      });\n    }\n  }, [id]);\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: (_statePLM$category = statePLM.category) === null || _statePLM$category === void 0 ? void 0 : _statePLM$category.name\n  }), __jsx(HeaderTab, null, __jsx(Button, {\n    fullWidth: true,\n    onClick: async () => {\n      await actionsPLM.openSort();\n      actionsPLM.getData({\n        isGroup: router.query.homeType === HomeType.group ? 1 : 0,\n        category: {\n          id\n        }\n      });\n    }\n  }, ls('排序'), __jsx(SortIcon, null)), __jsx(Button, {\n    fullWidth: true,\n    onClick: () => actionsPLM.openFilter()\n  }, ls('筛选'), __jsx(FilterListIcon, null))), __jsx(BScroller, {\n    boxHeight: 'calc(100vh - 100px)'\n  }, __jsx(ListBox, {\n    columns: stateHomeTabs.homeType === HomeType.group ? 1 : 2\n  }, statePLM.productList.map(value => stateHomeTabs.homeType === HomeType.group && __jsx(GroupProductItem, {\n    product: value,\n    key: `ProductItem_${value.id}`\n  }) || __jsx(ProductItem, {\n    key: `ProductItem_${value.id}`,\n    product: value\n  })))), __jsx(SortDrawer, null), __jsx(FilterDrawer, null));\n};","map":null,"metadata":{},"sourceType":"module"}