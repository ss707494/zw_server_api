{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\me\\\\category\\\\[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 60px;\\n  display: flex;\\n  border-radius: 8px;\\n  overflow: hidden;\\n  margin-bottom: 10px;\\n  background: \", \";\\n  > img {\\n    height: 100%;\\n    width: 70%;\\n  }\\n  > span {\\n    flex: 1;\\n    color: #fff;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { fpMergePre } from '../../../tools/utils';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nimport styled from 'styled-components';\nimport { ButtonBase } from '@material-ui/core';\nimport { dealImgUrl } from '../../../tools/img';\nimport { KeyboardArrowRight } from '@material-ui/icons';\nimport { grey } from '@material-ui/core/colors';\nexport var CategoryPageModel = modelFactory('CategoryPage', {\n  productList: [],\n  categoryList: []\n}, {\n  getProductList: function () {\n    var _getProductList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, option) {\n      var _res$categoryList;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return option.query(doc.productsInCategory, {\n                data: value\n              });\n\n            case 2:\n              res = _context.sent;\n              option.setData(fpMergePre({\n                productList: res === null || res === void 0 ? void 0 : res.productsInCategory,\n                categoryList: res === null || res === void 0 ? void 0 : (_res$categoryList = res.categoryList) === null || _res$categoryList === void 0 ? void 0 : _res$categoryList.list\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getProductList(_x, _x2) {\n      return _getProductList.apply(this, arguments);\n    }\n\n    return getProductList;\n  }()\n});\nvar CategoryItemStyle = styled(ButtonBase)(_templateObject(), grey[700]);\n_c = CategoryItemStyle;\nexport var CategoryItem = function CategoryItem(v) {\n  return __jsx(CategoryItemStyle, {\n    key: \"CategoryItem_\".concat(v.id),\n    onClick: function onClick() {\n      Router.push('/category/[id]', \"/category/\".concat(v.id));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 46\n    }\n  }, __jsx(\"img\", {\n    src: dealImgUrl(v.imgUrl),\n    alt: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }\n  }), __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 3\n    }\n  }, v.name, __jsx(KeyboardArrowRight, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  })));\n};\n_c2 = CategoryItem;\nexport var CategoryPage = function CategoryPage() {\n  _s();\n\n  var _ref, _router$query;\n\n  var router = useRouter();\n  var id = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id) !== null && _ref !== void 0 ? _ref : '';\n\n  var _useStoreModel = useStoreModel(CategoryPageModel),\n      stateCPM = _useStoreModel.state,\n      actionsCPM = _useStoreModel.actions;\n\n  useEffect(function () {\n    if (id) {\n      actionsCPM.getProductList({\n        id: id\n      });\n    }\n  }, [id]);\n  stateCPM.categoryList;\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  }, __jsx(HeaderTitle, {\n    title: '',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }), stateCPM.categoryList.map(function (value) {\n    return CategoryItem(value);\n  }));\n};\n\n_s(CategoryPage, \"7+tcq4IYvQKoBjwqKN/gl5KZl3E=\", false, function () {\n  return [useRouter, useStoreModel];\n});\n\n_c3 = CategoryPage;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CategoryItemStyle\");\n$RefreshReg$(_c2, \"CategoryItem\");\n$RefreshReg$(_c3, \"CategoryPage\");","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/me/category/[id].tsx"],"names":["React","useEffect","Router","useRouter","HeaderTitle","modelFactory","doc","fpMergePre","useStoreModel","styled","ButtonBase","dealImgUrl","KeyboardArrowRight","grey","CategoryPageModel","productList","categoryList","getProductList","value","option","query","productsInCategory","data","res","setData","list","CategoryItemStyle","CategoryItem","v","id","push","imgUrl","name","CategoryPage","router","stateCPM","state","actionsCPM","actions","map"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\r\nimport Router, {useRouter} from 'next/router'\r\nimport {HeaderTitle} from '../../../components/HeaderTitle/HeaderTitle'\r\nimport {modelFactory} from '../../../ModelAction/modelUtil'\r\nimport {Category, CategoryItemInput, Product} from '../../../graphqlTypes/types'\r\nimport {doc} from '../../../graphqlTypes/doc'\r\nimport {fpMergePre} from '../../../tools/utils'\r\nimport {useStoreModel} from '../../../ModelAction/useStore'\r\nimport styled from 'styled-components'\r\nimport {ButtonBase} from '@material-ui/core'\r\nimport {dealImgUrl} from '../../../tools/img'\r\nimport {KeyboardArrowRight} from '@material-ui/icons'\r\nimport {grey} from '@material-ui/core/colors'\r\n\r\nexport const CategoryPageModel = modelFactory('CategoryPage', {\r\n  productList: [] as Product[],\r\n  categoryList: [] as Category[],\r\n}, {\r\n  getProductList: async (value: CategoryItemInput, option) => {\r\n    const res = await option.query(doc.productsInCategory, {data: value})\r\n    option.setData(fpMergePre({\r\n      productList: res?.productsInCategory,\r\n      categoryList: res?.categoryList?.list,\r\n    }))\r\n  },\r\n\r\n})\r\n\r\nconst CategoryItemStyle = styled(ButtonBase)`\r\n  width: 100%;\r\n  height: 60px;\r\n  display: flex;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  margin-bottom: 10px;\r\n  background: ${grey[700]};\r\n  > img {\r\n    height: 100%;\r\n    width: 70%;\r\n  }\r\n  > span {\r\n    flex: 1;\r\n    color: #fff;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`\r\n\r\nexport const CategoryItem = (v: Category) => <CategoryItemStyle\r\n    key={`CategoryItem_${v.id}`}\r\n    onClick={() => {\r\n      Router.push('/category/[id]', `/category/${v.id}`)\r\n    }}\r\n>\r\n  <img\r\n      src={dealImgUrl(v.imgUrl)}\r\n      alt=''\r\n  />\r\n  <span>{v.name}<KeyboardArrowRight/></span>\r\n</CategoryItemStyle>\r\n\r\nexport const CategoryPage = () => {\r\n  const router = useRouter()\r\n  const id = (router.query?.id as string) ?? ''\r\n  const {state: stateCPM, actions: actionsCPM} = useStoreModel(CategoryPageModel)\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      actionsCPM.getProductList({id})\r\n    }\r\n  }, [id])\r\n  stateCPM.categoryList\r\n\r\n\r\n  return <div>\r\n    <HeaderTitle\r\n        title={''}\r\n    />\r\n    {stateCPM.categoryList.map(value => CategoryItem(value))}\r\n  </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}