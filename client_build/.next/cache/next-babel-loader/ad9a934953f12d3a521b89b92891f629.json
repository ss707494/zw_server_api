{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\cart\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { PickUpTypeEnum } from '../../ss_common/enum';\nimport { fpMergePre } from '../../tools/utils';\nimport { setForm } from '../../tools/commonAction';\nimport { doc } from '../../graphqlTypes/doc';\nimport { ShopCartPage } from './shopCart';\nimport React from 'react';\nimport { useStoreModel } from '../../ModelAction/useStore';\nimport { OrderPage } from './orderPage';\nexport const pageTypeEnum = {\n  shopCart: 'shopCart',\n  order: 'order'\n};\nexport const shopCartModel = modelFactory('shopCartModel', {\n  user: {},\n  pageType: pageTypeEnum.shopCart,\n  shopCartList: [],\n  shopCartListNext: [],\n  form: {\n    pickUpType: PickUpTypeEnum.Self\n  }\n}, {\n  clearForm: (value, option) => option.setData(fpMergePre({\n    form: {\n      pickUpType: PickUpTypeEnum.Self\n    }\n  })),\n  setForm: setForm,\n  getList: async (value, option) => {\n    var _res$shopCartList$fil, _res$shopCartList$fil2;\n\n    const res = await option.query(doc.userShopCartList);\n    option.setData(fpMergePre({\n      shopCartList: (_res$shopCartList$fil = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !v.isNext)) !== null && _res$shopCartList$fil !== void 0 ? _res$shopCartList$fil : [],\n      shopCartListNext: (_res$shopCartList$fil2 = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !!v.isNext)) !== null && _res$shopCartList$fil2 !== void 0 ? _res$shopCartList$fil2 : []\n    }));\n  },\n  updatePageType: (value, option) => option.setData(fpMergePre({\n    pageType: value\n  })),\n  getOrderInfo: async (value, option) => {\n    const res = await option.query(doc.orderConfirmInfo);\n    console.log(res);\n  }\n});\nexport const CartPage = () => {\n  const {\n    state: stateSCM\n  } = useStoreModel(shopCartModel);\n  return stateSCM.pageType === pageTypeEnum.order && __jsx(OrderPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 55\n    }\n  }) || __jsx(ShopCartPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 72\n    }\n  });\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/cart/index.tsx"],"names":["modelFactory","PickUpTypeEnum","fpMergePre","setForm","doc","ShopCartPage","React","useStoreModel","OrderPage","pageTypeEnum","shopCart","order","shopCartModel","user","pageType","shopCartList","shopCartListNext","form","pickUpType","Self","clearForm","value","option","setData","getList","res","query","userShopCartList","filter","v","isNext","updatePageType","getOrderInfo","orderConfirmInfo","console","log","CartPage","state","stateSCM"],"mappings":";;AAAA,SAAQA,YAAR,QAA2B,6BAA3B;AAEA,SAAQC,cAAR,QAA6B,sBAA7B;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SAAQC,OAAR,QAAsB,0BAAtB;AACA,SAAQC,GAAR,QAAkB,wBAAlB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,UADgB;AAE1BC,EAAAA,KAAK,EAAE;AAFmB,CAArB;AAKP,OAAO,MAAMC,aAAa,GAAGZ,YAAY,CAAC,eAAD,EAAkB;AACzDa,EAAAA,IAAI,EAAE,EADmD;AAEzDC,EAAAA,QAAQ,EAAEL,YAAY,CAACC,QAFkC;AAGzDK,EAAAA,YAAY,EAAE,EAH2C;AAIzDC,EAAAA,gBAAgB,EAAE,EAJuC;AAKzDC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAEjB,cAAc,CAACkB;AADvB;AALmD,CAAlB,EAQtC;AACDC,EAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC,OAAP,CAAerB,UAAU,CAAC;AACtDe,IAAAA,IAAI,EAAE;AACJC,MAAAA,UAAU,EAAEjB,cAAc,CAACkB;AADvB;AADgD,GAAD,CAAzB,CAD7B;AAMDhB,EAAAA,OAAO,EAAEA,OANR;AAODqB,EAAAA,OAAO,EAAE,OAAOH,KAAP,EAAcC,MAAd,KAAyB;AAAA;;AAChC,UAAMG,GAAG,GAAG,MAAMH,MAAM,CAACI,KAAP,CAAatB,GAAG,CAACuB,gBAAjB,CAAlB;AACAL,IAAAA,MAAM,CAACC,OAAP,CAAerB,UAAU,CAAC;AACxBa,MAAAA,YAAY,2BAAEU,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEV,YAAL,CAAkBa,MAAlB,CAA0BC,CAAD,IAAiB,CAACA,CAAC,CAACC,MAA7C,CAAF,yEAA0D,EAD9C;AAExBd,MAAAA,gBAAgB,4BAAES,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEV,YAAL,CAAkBa,MAAlB,CAA0BC,CAAD,IAAiB,CAAC,CAACA,CAAC,CAACC,MAA9C,CAAF,2EAA2D;AAFnD,KAAD,CAAzB;AAID,GAbA;AAcDC,EAAAA,cAAc,EAAE,CAACV,KAAD,EAAgBC,MAAhB,KAA2BA,MAAM,CAACC,OAAP,CAAerB,UAAU,CAAC;AACnEY,IAAAA,QAAQ,EAAEO;AADyD,GAAD,CAAzB,CAd1C;AAiBDW,EAAAA,YAAY,EAAE,OAAOX,KAAP,EAAcC,MAAd,KAAyB;AACrC,UAAMG,GAAG,GAAG,MAAMH,MAAM,CAACI,KAAP,CAAatB,GAAG,CAAC6B,gBAAjB,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ;AACD;AApBA,CARsC,CAAlC;AA+BP,OAAO,MAAMW,QAAQ,GAAG,MAAM;AAC5B,QAAM;AAACC,IAAAA,KAAK,EAAEC;AAAR,MAAoB/B,aAAa,CAACK,aAAD,CAAvC;AACA,SAAQ0B,QAAQ,CAACxB,QAAT,KAAsBL,YAAY,CAACE,KAAnC,IAA4C,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA7C,IAA8D,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArE;AACD,CAHM","sourcesContent":["import {modelFactory} from '../../ModelAction/modelUtil'\r\nimport {ShopCart, User} from '../../graphqlTypes/types'\r\nimport {PickUpTypeEnum} from '../../ss_common/enum'\r\nimport {fpMergePre} from '../../tools/utils'\r\nimport {setForm} from '../../tools/commonAction'\r\nimport {doc} from '../../graphqlTypes/doc'\r\nimport { ShopCartPage } from './shopCart'\r\nimport React from 'react'\r\nimport {useStoreModel} from '../../ModelAction/useStore'\r\nimport {OrderPage} from './orderPage'\r\n\r\nexport const pageTypeEnum = {\r\n  shopCart: 'shopCart',\r\n  order: 'order',\r\n}\r\n\r\nexport const shopCartModel = modelFactory('shopCartModel', {\r\n  user: {} as User,\r\n  pageType: pageTypeEnum.shopCart,\r\n  shopCartList: [] as ShopCart[],\r\n  shopCartListNext: [] as ShopCart[],\r\n  form: {\r\n    pickUpType: PickUpTypeEnum.Self,\r\n  },\r\n}, {\r\n  clearForm: (value, option) => option.setData(fpMergePre({\r\n    form: {\r\n      pickUpType: PickUpTypeEnum.Self,\r\n    },\r\n  })),\r\n  setForm: setForm,\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.userShopCartList)\r\n    option.setData(fpMergePre({\r\n      shopCartList: res?.shopCartList.filter((v: ShopCart) => !v.isNext) ?? [],\r\n      shopCartListNext: res?.shopCartList.filter((v: ShopCart) => !!v.isNext) ?? [],\r\n    }))\r\n  },\r\n  updatePageType: (value: string, option) => option.setData(fpMergePre({\r\n    pageType: value,\r\n  })),\r\n  getOrderInfo: async (value, option) => {\r\n    const res = await option.query(doc.orderConfirmInfo)\r\n    console.log(res)\r\n  },\r\n})\r\n\r\nexport const CartPage = () => {\r\n  const {state: stateSCM} = useStoreModel(shopCartModel)\r\n  return (stateSCM.pageType === pageTypeEnum.order && <OrderPage/>) || <ShopCartPage />\r\n}\r\n"]},"metadata":{},"sourceType":"module"}