{"ast":null,"code":"import Router from 'next/router';\nimport { fpMergePre } from '../../tools/utils';\nimport { setToken } from '../../tools/token';\nimport { doc } from '../../graphqlTypes/doc';\nimport { modelFactory } from '../../ModelAction/modelUtil';\n\nconst toLogin = async () => {\n  await Router.push('/login');\n};\n\nexport const meModel = modelFactory('meModel', {\n  user: {}\n}, {\n  getLoginUser: async (value, option) => {\n    var _await$option$query;\n\n    const res = (_await$option$query = await option.query(doc.oneUser)) === null || _await$option$query === void 0 ? void 0 : _await$option$query.oneUser;\n    option.setData(fpMergePre({\n      user: res\n    }));\n  },\n  logout: async (value, option) => {\n    setToken('');\n    setToken('', 'refreshtoken');\n    await toLogin();\n  },\n  toLogin: value => {\n    toLogin();\n  }\n});","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/me/model.ts"],"names":["Router","fpMergePre","setToken","doc","modelFactory","toLogin","push","meModel","user","getLoginUser","value","option","res","query","oneUser","setData","logout"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AAEA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SAAQC,QAAR,QAAuB,mBAAvB;AACA,SAAQC,GAAR,QAAkB,wBAAlB;AACA,SAAQC,YAAR,QAA2B,6BAA3B;;AAEA,MAAMC,OAAO,GAAG,YAAY;AAC1B,QAAML,MAAM,CAACM,IAAP,CAAY,QAAZ,CAAN;AACD,CAFD;;AAGA,OAAO,MAAMC,OAAO,GAAGH,YAAY,CAAC,SAAD,EAAY;AAC7CI,EAAAA,IAAI,EAAE;AADuC,CAAZ,EAEhC;AACDC,EAAAA,YAAY,EAAE,OAAOC,KAAP,EAAcC,MAAd,KAAyB;AAAA;;AACrC,UAAMC,GAAG,0BAAI,MAAMD,MAAM,CAACE,KAAP,CAAaV,GAAG,CAACW,OAAjB,CAAV,wDAAG,oBAAmCA,OAA/C;AACAH,IAAAA,MAAM,CAACI,OAAP,CAAed,UAAU,CAAC;AACxBO,MAAAA,IAAI,EAAEI;AADkB,KAAD,CAAzB;AAGD,GANA;AAODI,EAAAA,MAAM,EAAE,OAAON,KAAP,EAAcC,MAAd,KAAyB;AAC/BT,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAA,IAAAA,QAAQ,CAAC,EAAD,EAAK,cAAL,CAAR;AACA,UAAMG,OAAO,EAAb;AACD,GAXA;AAYDA,EAAAA,OAAO,EAAEK,KAAK,IAAI;AAChBL,IAAAA,OAAO;AACR;AAdA,CAFgC,CAA5B","sourcesContent":["import Router from 'next/router'\r\nimport {User} from '../../graphqlTypes/types'\r\nimport {fpMergePre} from '../../tools/utils'\r\nimport {setToken} from '../../tools/token'\r\nimport {doc} from '../../graphqlTypes/doc'\r\nimport {modelFactory} from '../../ModelAction/modelUtil'\r\n\r\nconst toLogin = async () => {\r\n  await Router.push('/login')\r\n}\r\nexport const meModel = modelFactory('meModel', {\r\n  user: {} as User,\r\n}, {\r\n  getLoginUser: async (value, option) => {\r\n    const res = (await option.query(doc.oneUser))?.oneUser as User\r\n    option.setData(fpMergePre({\r\n      user: res,\r\n    }))\r\n  },\r\n  logout: async (value, option) => {\r\n    setToken('')\r\n    setToken('', 'refreshtoken')\r\n    await toLogin()\r\n  },\r\n  toLogin: value => {\r\n    toLogin()\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}