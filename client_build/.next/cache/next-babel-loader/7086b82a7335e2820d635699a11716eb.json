{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Router from 'next/router';\nimport { fpMergePre, fpSetPre } from '../../../tools/utils';\nimport { setToken } from '../../../tools/token';\nimport { showMessage } from '../../../components/Message/Message';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { ls } from '../../../tools/dealKey';\nexport const registerModel = modelFactory('register', {\n  step: 0,\n  userForm: {\n    name: '',\n    password: '',\n    confirmPassword: '',\n    userInfo: {\n      name: '',\n      email: '',\n      phone: ''\n    }\n  }\n}, {\n  setStep: (value, option) => option.setData(fpMergePre({\n    step: value\n  })),\n  setUserForm: ([path, value], option) => {\n    option.setData(fpSetPre(`userForm.${path}`, value));\n  },\n  goNext: (value, option) => {\n    var _option$data, _option$data$userForm, _option$data2, _option$data2$userFor, _option$data3, _option$data3$userFor, _option$data4, _option$data4$userFor, _option$data5, _option$data5$userFor;\n\n    if (!((_option$data = option.data) === null || _option$data === void 0 ? void 0 : (_option$data$userForm = _option$data.userForm) === null || _option$data$userForm === void 0 ? void 0 : _option$data$userForm.name) || !((_option$data2 = option.data) === null || _option$data2 === void 0 ? void 0 : (_option$data2$userFor = _option$data2.userForm) === null || _option$data2$userFor === void 0 ? void 0 : _option$data2$userFor.password) || !((_option$data3 = option.data) === null || _option$data3 === void 0 ? void 0 : (_option$data3$userFor = _option$data3.userForm) === null || _option$data3$userFor === void 0 ? void 0 : _option$data3$userFor.confirmPassword)) {\n      showMessage(ls('请填写表单'));\n      return;\n    }\n\n    if (((_option$data4 = option.data) === null || _option$data4 === void 0 ? void 0 : (_option$data4$userFor = _option$data4.userForm) === null || _option$data4$userFor === void 0 ? void 0 : _option$data4$userFor.password) !== ((_option$data5 = option.data) === null || _option$data5 === void 0 ? void 0 : (_option$data5$userFor = _option$data5.userForm) === null || _option$data5$userFor === void 0 ? void 0 : _option$data5$userFor.confirmPassword)) {\n      showMessage(ls('两次密码输入不一致'));\n      return;\n    }\n\n    option.setData(fpMergePre({\n      step: 1\n    }));\n  },\n  submit: async (value, option) => {\n    var _option$data$userForm2, _registerUser$user;\n\n    const userInfo = ((_option$data$userForm2 = option.data.userForm) === null || _option$data$userForm2 === void 0 ? void 0 : _option$data$userForm2.userInfo) || {};\n\n    if (!userInfo.phone || !userInfo.email) {\n      showMessage(ls('请填写表单'));\n      return;\n    }\n\n    const _option$data$userForm3 = option.data.userForm,\n          {\n      confirmPassword\n    } = _option$data$userForm3,\n          params = _objectWithoutProperties(_option$data$userForm3, [\"confirmPassword\"]);\n\n    const res = await option.mutate(doc.registerUser, {\n      data: _objectSpread(_objectSpread({}, params), {}, {\n        userInfo: _objectSpread(_objectSpread({}, params.userInfo), {}, {\n          name: params.name\n        })\n      })\n    });\n    const registerUser = res === null || res === void 0 ? void 0 : res.registerUser;\n\n    if (registerUser === null || registerUser === void 0 ? void 0 : (_registerUser$user = registerUser.user) === null || _registerUser$user === void 0 ? void 0 : _registerUser$user.id) {\n      showMessage(ls('注册成功,即将登录'));\n      setToken(registerUser.token);\n      setToken(registerUser.refreshtoken, 'refreshtoken');\n      await Router.replace(`/m/home`, `/m/home`, {\n        shallow: true\n      });\n    }\n  },\n  goToSignup: (value, option) => {\n    Router.push('/m/login');\n  }\n});","map":null,"metadata":{},"sourceType":"module"}