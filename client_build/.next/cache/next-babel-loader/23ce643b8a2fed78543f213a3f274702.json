{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { HeaderTitle } from '../../../../components/HeaderTitle/HeaderTitle';\nimport { SigninInput } from '../../register';\nimport { ll } from '../../../../tools/dealKey';\nimport { modelFactory } from '../../../../ModelAction/modelUtil';\nimport { useStoreModel } from '../../../../ModelAction/useStore';\nimport { fpMergePre } from '../../../../tools/utils';\nimport styled from 'styled-components';\nimport { ButtonLoad } from '../../../../components/ButtonLoad/ButtonLoad';\nimport { doc } from '../../../../graphqlTypes/doc';\nimport { showMessage } from '../../../../components/Message/Message';\nimport router from 'next/router';\nimport { setToken } from '../../../../tools/token';\nimport { setForm } from '../../../../tools/commonAction';\nexport var updatePasswordModel = modelFactory('updatePasswordModel', {\n  form: {\n    oldPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  }\n}, {\n  setForm: setForm,\n  clearForm: function clearForm(value, option) {\n    option.setData(fpMergePre({\n      form: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      }\n    }));\n  },\n  submit: function () {\n    var _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, option) {\n      var _res$updatePassword, _res$updatePassword$u;\n\n      var form, res, _res$updatePassword2, _res$updatePassword2$, _res$updatePassword3, _res$updatePassword3$;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              form = option.data.form;\n\n              if (!(!form.oldPassword || !form.newPassword)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", showMessage('请填写表单'));\n\n            case 3:\n              if (!(form.newPassword !== form.confirmPassword)) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\", showMessage('两次密码不一致'));\n\n            case 5:\n              _context.next = 7;\n              return option.mutate(doc.updatePassword, {\n                data: form\n              });\n\n            case 7:\n              res = _context.sent;\n\n              if (res === null || res === void 0 ? void 0 : (_res$updatePassword = res.updatePassword) === null || _res$updatePassword === void 0 ? void 0 : (_res$updatePassword$u = _res$updatePassword.user) === null || _res$updatePassword$u === void 0 ? void 0 : _res$updatePassword$u.id) {\n                setToken((_res$updatePassword2 = res.updatePassword) === null || _res$updatePassword2 === void 0 ? void 0 : (_res$updatePassword2$ = _res$updatePassword2.authBody) === null || _res$updatePassword2$ === void 0 ? void 0 : _res$updatePassword2$.token);\n                setToken((_res$updatePassword3 = res.updatePassword) === null || _res$updatePassword3 === void 0 ? void 0 : (_res$updatePassword3$ = _res$updatePassword3.authBody) === null || _res$updatePassword3$ === void 0 ? void 0 : _res$updatePassword3$.refreshtoken, 'refreshtoken');\n                showMessage('操作成功');\n              }\n\n              return _context.abrupt(\"return\", res);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function submit(_x, _x2) {\n      return _submit.apply(this, arguments);\n    }\n\n    return submit;\n  }()\n});\nexport var FieldContain = styled.div.withConfig({\n  displayName: \"updatePassword__FieldContain\",\n  componentId: \"sc-132wbin-0\"\n})([\"padding:0 22px;&&&{.MuiFormControl-root{margin-top:10px;}}\"]);\nexport var UpdatePassword = function UpdatePassword() {\n  var _useStoreModel = useStoreModel(updatePasswordModel),\n      stateUpdatePasswordModel = _useStoreModel.state,\n      actionsUpdatePasswordModel = _useStoreModel.actions;\n\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: '修改密码',\n    backCall: actionsUpdatePasswordModel.clearForm\n  }), __jsx(FieldContain, null, __jsx(SigninInput, {\n    label: ll('原始密码'),\n    type: 'password',\n    value: stateUpdatePasswordModel.form.oldPassword,\n    onChange: function onChange(event) {\n      return actionsUpdatePasswordModel.setForm(['oldPassword', event.target.value]);\n    }\n  }), __jsx(SigninInput, {\n    label: ll('新密码'),\n    type: 'password',\n    value: stateUpdatePasswordModel.form.newPassword,\n    onChange: function onChange(event) {\n      return actionsUpdatePasswordModel.setForm(['newPassword', event.target.value]);\n    }\n  }), __jsx(SigninInput, {\n    label: ll('确认密码'),\n    type: 'password',\n    value: stateUpdatePasswordModel.form.confirmPassword,\n    onChange: function onChange(event) {\n      return actionsUpdatePasswordModel.setForm(['confirmPassword', event.target.value]);\n    }\n  }), __jsx(ButtonLoad, {\n    style: {\n      marginTop: '20px'\n    },\n    variant: 'contained',\n    color: 'secondary',\n    fullWidth: true,\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _res$updatePassword4, _res$updatePassword4$;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return actionsUpdatePasswordModel.submit();\n\n            case 2:\n              res = _context2.sent;\n\n              if (res === null || res === void 0 ? void 0 : (_res$updatePassword4 = res.updatePassword) === null || _res$updatePassword4 === void 0 ? void 0 : (_res$updatePassword4$ = _res$updatePassword4.user) === null || _res$updatePassword4$ === void 0 ? void 0 : _res$updatePassword4$.id) {\n                actionsUpdatePasswordModel.clearForm();\n                router.back();\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))\n  }, ll('保存'))));\n};","map":null,"metadata":{},"sourceType":"module"}