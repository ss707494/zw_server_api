{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { homeCategorySelectionModel } from '../../../m/home/components/CategorySelection/CategorySelection';\nimport { useStoreModel } from '../../../../ModelAction/useStore';\nimport { ButtonBase, Grow } from '@material-ui/core';\nimport { Space } from '../../../../components/Box/Box';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport { mpStyle } from '../../../../style/common';\nimport { categoryItemModel, CategoryPageModel } from '../../../m/category/[id]';\nimport { useRouter } from 'next/router';\nimport { modelFactory } from '../../../../ModelAction/modelUtil';\nimport { fpMergePre } from '../../../../tools/utils';\nimport { homeTabsModel } from '../../../m/home/components/Tabs/Tabs';\nexport const CategorySelectionModel = modelFactory('CategorySelectionModel', {\n  isShow: false\n}, {\n  switchIsShow: (value, option) => option.setData(fpMergePre({\n    isShow: value\n  }))\n});\nconst Box = styled.div.withConfig({\n  displayName: \"categorySelection__Box\",\n  componentId: \"zrawnm-0\"\n})([\"display:grid;grid-template-columns:repeat(3,1fr);z-index:4;\"]);\nconst Line = styled.div.withConfig({\n  displayName: \"categorySelection__Line\",\n  componentId: \"zrawnm-1\"\n})([\"display:grid;grid-auto-rows:40px;font-size:18px;\"]);\nconst LinkButton = styled(ButtonBase).withConfig({\n  displayName: \"categorySelection__LinkButton\",\n  componentId: \"zrawnm-2\"\n})([\"&&&{justify-content:start;> main{flex-grow:1;text-align:left;}\", \"}\"], prop => prop.isact && `\n      background: #FEEBEA;\n      color: ${mpStyle.red};\n    `);\nconst Mask = styled.div.withConfig({\n  displayName: \"categorySelection__Mask\",\n  componentId: \"zrawnm-3\"\n})([\"position:fixed;top:0;left:0;right:0;bottom:0;\"]);\nexport const CategorySelection = ({\n  className\n}) => {\n  var _stateHomeCategorySel, _stateCategoryPageMod, _stateCategoryPageMod2;\n\n  const router = useRouter();\n  const {\n    actions: actionsHomeCategorySelectionModel,\n    state: stateHomeCategorySelectionModel\n  } = useStoreModel(homeCategorySelectionModel);\n  const {\n    actions: actionsCategoryPageModel,\n    state: stateCategoryPageModel\n  } = useStoreModel(CategoryPageModel);\n  const {\n    actions: actionsCategoryPageModel3,\n    state: stateCategoryPageModel3\n  } = useStoreModel(CategoryPageModel, 'CategoryPageModel3');\n  const {\n    actions: actionsCategoryItemModel\n  } = useStoreModel(categoryItemModel);\n  const {\n    actions: actionsCategorySelectionModel,\n    state: stateCategorySelectionModel\n  } = useStoreModel(CategorySelectionModel);\n  const {\n    state: stateHomeTabs\n  } = useStoreModel(homeTabsModel);\n  useEffect(() => {\n    if (stateCategorySelectionModel.isShow) {\n      actionsHomeCategorySelectionModel.getList();\n    }\n  }, [actionsHomeCategorySelectionModel, stateCategorySelectionModel.isShow]);\n  return __jsx(React.Fragment, null, stateCategorySelectionModel.isShow && __jsx(Mask, {\n    onClick: () => actionsCategorySelectionModel.switchIsShow(false)\n  }), __jsx(Grow, {\n    in: stateCategorySelectionModel.isShow\n  }, __jsx(Box, {\n    className: className\n  }, __jsx(Line, null, stateHomeCategorySelectionModel === null || stateHomeCategorySelectionModel === void 0 ? void 0 : (_stateHomeCategorySel = stateHomeCategorySelectionModel.listData) === null || _stateHomeCategorySel === void 0 ? void 0 : _stateHomeCategorySel.map(value => __jsx(LinkButton, {\n    key: `stateHomeCategorySelectionModel?.listData${value.id}`,\n    onClick: () => {\n      actionsHomeCategorySelectionModel.changeActId(value.id);\n      actionsCategoryPageModel.getProductList({\n        categoryItemInput: {\n          id: value.id\n        },\n        productItemInput: {\n          isGroup: 0\n        }\n      });\n      actionsCategoryItemModel.getCategory({\n        id: value.id\n      });\n    },\n    isact: value.id === stateHomeCategorySelectionModel.actId ? 1 : 0\n  }, __jsx(Space, {\n    w: 16\n  }), __jsx(\"main\", null, value.name), __jsx(KeyboardArrowRightIcon, null), __jsx(Space, {\n    w: 8\n  })))), __jsx(Line, null, stateCategoryPageModel === null || stateCategoryPageModel === void 0 ? void 0 : (_stateCategoryPageMod = stateCategoryPageModel.categoryList) === null || _stateCategoryPageMod === void 0 ? void 0 : _stateCategoryPageMod.map(value => __jsx(LinkButton, {\n    key: `stateCategoryPageModel?.categoryList${value.id}`,\n    onClick: () => {\n      actionsCategoryItemModel.getCategory({\n        id: value.id\n      });\n      actionsCategoryPageModel.changeActCatId(value.id);\n      actionsCategoryPageModel3.getProductList({\n        categoryItemInput: {\n          id: value.id\n        },\n        productItemInput: {\n          isGroup: 0\n        }\n      });\n    },\n    isact: stateCategoryPageModel.actCatId === value.id ? 1 : 0\n  }, __jsx(Space, {\n    w: 16\n  }), __jsx(\"main\", null, value.name), __jsx(Space, {\n    w: 8\n  })))), actionsCategoryItemModel.calcCatLevel() >= 2 && __jsx(Line, null, stateCategoryPageModel3 === null || stateCategoryPageModel3 === void 0 ? void 0 : (_stateCategoryPageMod2 = stateCategoryPageModel3.categoryList) === null || _stateCategoryPageMod2 === void 0 ? void 0 : _stateCategoryPageMod2.map(value => __jsx(LinkButton, {\n    key: `stateCategoryPageModel3?.categoryList${value.id}`,\n    onClick: async () => {\n      // actionsCategoryItemModel.getCategory({id: value.id})\n      // actionsCategoryPageModel3.changeActCatId(value.id)\n      // actionsCategorySelectionModel.switchIsShow(false)\n      await router.push(`/pc/category/[id]?homeType=${stateHomeTabs.homeType}`, `/pc/category/${value.id}?homeType=${stateHomeTabs.homeType}`);\n    },\n    isact: stateCategoryPageModel3.actCatId === value.id ? 1 : 0\n  }, __jsx(Space, {\n    w: 16\n  }), __jsx(\"main\", null, value.name), __jsx(Space, {\n    w: 8\n  }))))))) || __jsx(React.Fragment, null);\n};","map":null,"metadata":{},"sourceType":"module"}