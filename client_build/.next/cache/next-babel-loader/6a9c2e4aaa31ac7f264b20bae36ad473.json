{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../../../../ModelAction/modelUtil';\nimport { useStoreModel } from '../../../../../ModelAction/useStore';\nimport { fpMergePre } from '../../../../../tools/utils';\nimport { SigninInput } from '../../../register';\nimport { FieldContain } from '../../myInfo/updatePassword';\nimport { HeaderTitle } from '../../../../../components/HeaderTitle/HeaderTitle';\nimport { setForm } from '../../../../../tools/commonAction';\nimport { ls } from '../../../../../tools/dealKey';\nimport { useRouter } from 'next/router';\nimport { ButtonLoad } from '../../../../../components/ButtonLoad/ButtonLoad';\nimport { doc } from '../../../../../graphqlTypes/doc';\nimport { showMessage } from '../../../../../components/Message/Message';\nimport { DatePicker } from '@material-ui/pickers';\nimport { FormControl, FormLabel } from '@material-ui/core';\nimport { Space } from '../../../../../components/Box/Box';\nexport const myCreditCardEditModel = modelFactory('myCreditCardEditModel', {\n  form: {\n    number: '',\n    code: '',\n    name: '',\n    userName: '',\n    addressDetail: '',\n    zipCode: '',\n    city: '',\n    contact: '',\n    expirationTime: null\n  }\n}, {\n  setForm: setForm,\n  clearForm: (value, option) => option.setData(fpMergePre({\n    form: {\n      number: '',\n      code: '',\n      name: '',\n      userName: '',\n      addressDetail: '',\n      zipCode: '',\n      city: '',\n      contact: ''\n    }\n  })),\n  submit: (value, option) => {\n    const form = option.data.form;\n    return option.mutate(doc.saveUserPayCard, {\n      data: _objectSpread({}, form)\n    });\n  },\n  getOne: async (value, option) => {\n    var _res$userPayCard;\n\n    const res = await option.query(doc.userPayCard, {\n      data: _objectSpread({}, value)\n    });\n    option.setData(fpMergePre({\n      form: _objectSpread({}, (_res$userPayCard = res === null || res === void 0 ? void 0 : res.userPayCard) !== null && _res$userPayCard !== void 0 ? _res$userPayCard : {})\n    }));\n  }\n});\nexport const MyCreditCardEdit = () => {\n  var _ref, _router$query;\n\n  const router = useRouter();\n  const id = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id) !== null && _ref !== void 0 ? _ref : '';\n  const {\n    state: stateMCCE,\n    actions: actionsMCCE\n  } = useStoreModel(myCreditCardEditModel);\n  useEffect(() => {\n    if (id && id !== '0') {\n      actionsMCCE.getOne({\n        id\n      });\n    }\n  }, [id]);\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: `${id === '0' ? '新增' : '编辑'}信用卡`,\n    backCall: actionsMCCE.clearForm\n  }), __jsx(FieldContain, null, [['信用卡号', 'number'], ['过期日', 'expirationTime', () => __jsx(FormControl, {\n    key: `expirationTime`,\n    fullWidth: true,\n    size: 'small'\n  }, __jsx(Space, {\n    h: 4\n  }), __jsx(FormLabel, null, ls('过期日')), __jsx(DatePicker, {\n    format: 'yyyy/MM',\n    value: stateMCCE.form.expirationTime || null,\n    onChange: date => {\n      actionsMCCE.setForm(['expirationTime', date]);\n    }\n  }))], ['验证码', 'code'], ['姓名', 'userName'], ['详细地址', 'addressDetail'], ['邮政编码', 'zipCode'], ['城市', 'city'], ['联系方式', 'contact']].map(v => {\n    var _stateMCCE$form;\n\n    return v[2] && v[2]() || __jsx(SigninInput, {\n      key: `MyCreditCardEdit_${v[1]}`,\n      label: ls(v[0]),\n      value: (_stateMCCE$form = stateMCCE.form[v[1]]) !== null && _stateMCCE$form !== void 0 ? _stateMCCE$form : '',\n      onChange: event => actionsMCCE.setForm([v[1], event.target.value])\n    });\n  }), __jsx(\"section\", {\n    style: {\n      width: '100%',\n      height: '20px'\n    }\n  }), __jsx(ButtonLoad, {\n    fullWidth: true,\n    variant: 'contained',\n    color: 'secondary',\n    onClick: async () => {\n      var _await$actionsMCCE$su, _await$actionsMCCE$su2;\n\n      if ((_await$actionsMCCE$su = await actionsMCCE.submit()) === null || _await$actionsMCCE$su === void 0 ? void 0 : (_await$actionsMCCE$su2 = _await$actionsMCCE$su.saveUserPayCard) === null || _await$actionsMCCE$su2 === void 0 ? void 0 : _await$actionsMCCE$su2.id) {\n        showMessage('操作成功');\n        actionsMCCE.clearForm();\n        router.back();\n      }\n    }\n  }, \"\\u4FDD\\u5B58\")));\n};","map":null,"metadata":{},"sourceType":"module"}