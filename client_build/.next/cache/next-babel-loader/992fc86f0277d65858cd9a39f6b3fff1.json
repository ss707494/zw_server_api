{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { graphQLMutate, graphQLQuery } from '../client';\nimport { baseActionOption } from './modelUtil';\nexport const originStore = {};\n\nconst isFunction = functionToCheck => {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n};\n\nexport const dealNameSpace = (key, nameSpace) => {\n  if (nameSpace) {\n    return `${key}_${nameSpace}`;\n  }\n\n  return `${key}`;\n};\nexport const useStoreModel = (model, key) => {\n  var _model$name;\n\n  const _key = (_model$name = model.name) !== null && _model$name !== void 0 ? _model$name : !key ? '' : Array.isArray(key) ? dealNameSpace(key[0], key[1]) : key;\n\n  const {\n    actions,\n    state\n  } = model;\n  const {\n    1: setState\n  } = useState(Object.create(null));\n\n  if (!_key) {\n    throw Error('no key');\n  }\n\n  if (!originStore[_key]) {\n    originStore[_key] = {\n      keys: _key,\n      state,\n      actions: {},\n      setData: []\n    };\n  }\n\n  const notice = useCallback(data => {\n    originStore[_key].setData.forEach(value => {\n      value === null || value === void 0 ? void 0 : value(data);\n    });\n  }, [_key]);\n  const setData = useCallback(data => {\n    const oldState = originStore[_key].state;\n    const newData = isFunction(data) ? data(oldState) : data;\n    originStore[_key].state = newData;\n    notice(newData);\n  }, [_key, notice]);\n  const setLoad = useCallback((query, flag) => {\n    setData(prevState => {\n      var _prevState$fetchLoad, _query$loc, _query$loc$source;\n\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        fetchLoad: _objectSpread(_objectSpread({}, (_prevState$fetchLoad = prevState.fetchLoad) !== null && _prevState$fetchLoad !== void 0 ? _prevState$fetchLoad : {}), {}, {\n          [query === null || query === void 0 ? void 0 : (_query$loc = query.loc) === null || _query$loc === void 0 ? void 0 : (_query$loc$source = _query$loc.source) === null || _query$loc$source === void 0 ? void 0 : _query$loc$source.body]: flag\n        })\n      });\n    });\n  }, [setData]);\n  const setError = useCallback((query, err) => {\n    setData(prevState => {\n      var _prevState$fetchError, _query$loc2, _query$loc2$source;\n\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        fetchError: _objectSpread(_objectSpread({}, (_prevState$fetchError = prevState.fetchError) !== null && _prevState$fetchError !== void 0 ? _prevState$fetchError : {}), {}, {\n          [query === null || query === void 0 ? void 0 : (_query$loc2 = query.loc) === null || _query$loc2 === void 0 ? void 0 : (_query$loc2$source = _query$loc2.source) === null || _query$loc2$source === void 0 ? void 0 : _query$loc2$source.body]: err\n        })\n      });\n    });\n  }, [setData]);\n  const query = useCallback(async (queryDoc, params, option) => {\n    const queryDocString = queryDoc.doc;\n    setLoad(queryDocString, true);\n    const res = await graphQLQuery()(queryDocString, params, option).catch(e => {\n      setError(queryDocString, e);\n    }).finally(() => {\n      setLoad(queryDocString, false);\n    });\n    return res === null || res === void 0 ? void 0 : res.data;\n  }, [setError, setLoad]);\n  const mutate = useCallback(async (mutationDoc, params, option) => {\n    const mutationDocString = mutationDoc.doc;\n    setLoad(mutationDocString, true);\n    const res = await graphQLMutate()(mutationDocString, params, option).catch(e => {\n      setError(mutationDocString, e);\n    }).finally(() => {\n      setLoad(mutationDocString, false);\n    });\n    return res === null || res === void 0 ? void 0 : res.data;\n  }, [setError, setLoad]);\n\n  if (Object.keys(originStore[_key].actions).length === 0 && originStore[_key].actions.constructor === Object) {\n    Object.keys(actions).forEach(value => {\n      originStore[_key].actions[value] = v => actions[value](v, _objectSpread(_objectSpread({}, baseActionOption), {}, {\n        data: originStore[_key].state,\n        notice,\n        setData,\n        query,\n        mutate,\n        store: originStore\n      }));\n    });\n  }\n\n  useEffect(() => {\n    Object.keys(actions).forEach(value => {\n      originStore[_key].actions[value] = v => actions[value](v, _objectSpread(_objectSpread({}, baseActionOption), {}, {\n        data: originStore[_key].state,\n        notice,\n        setData,\n        query,\n        mutate,\n        store: originStore\n      }));\n    });\n  }, [_key, actions, mutate, notice, query, setData]);\n  useEffect(() => {\n    var _originStore$_key$set;\n\n    originStore[_key].setData = [...((_originStore$_key$set = originStore[_key].setData) !== null && _originStore$_key$set !== void 0 ? _originStore$_key$set : []), setState];\n    return () => {\n      originStore[_key].setData = originStore[_key].setData.filter(value => value !== setState);\n    };\n  }, [_key]);\n  return {\n    state: originStore[_key].state,\n    actions: originStore[_key].actions,\n    store: originStore,\n    getLoad: query => {\n      var _query$loc3, _query$loc3$source;\n\n      return originStore[_key].state.fetchLoad[query === null || query === void 0 ? void 0 : (_query$loc3 = query.loc) === null || _query$loc3 === void 0 ? void 0 : (_query$loc3$source = _query$loc3.source) === null || _query$loc3$source === void 0 ? void 0 : _query$loc3$source.body] ? 1 : 0;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}