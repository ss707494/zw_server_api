{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\m\\\\home\\\\components\\\\LineRanking\\\\LineRanking.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../../../../ModelAction/modelUtil';\nimport { doc } from '../../../../../graphqlTypes/doc';\nimport { useStoreModel } from '../../../../../ModelAction/useStore';\nimport { dealMaybeNumber, fpMergePre } from '../../../../../tools/utils';\nimport { GroupProductItem } from '../../../../../components/ProductItem/ProductItem';\nimport { Space } from '../../../../../components/Box/Box';\nexport var LineRankingModel = modelFactory('LineRanking', {\n  list: []\n}, {\n  getList: function () {\n    var _getList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, option) {\n      var _res$groupQueueList;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return option.query(doc.groupQueueList, {});\n\n            case 2:\n              res = _context.sent;\n              option.setData(fpMergePre({\n                list: (_res$groupQueueList = res === null || res === void 0 ? void 0 : res.groupQueueList) !== null && _res$groupQueueList !== void 0 ? _res$groupQueueList : []\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getList(_x, _x2) {\n      return _getList.apply(this, arguments);\n    }\n\n    return getList;\n  }()\n});\nexport var LineRanking = function LineRanking() {\n  _s();\n\n  var _useStoreModel = useStoreModel(LineRankingModel),\n      actionsLineRankingModel = _useStoreModel.actions,\n      stateLineRankingModel = _useStoreModel.state;\n\n  useEffect(function () {\n    actionsLineRankingModel.getList();\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 10\n    }\n  }, stateLineRankingModel.list.filter(function (v) {\n    var _v$product;\n\n    return dealMaybeNumber(v.sumFillAmount) < dealMaybeNumber((_v$product = v.product) === null || _v$product === void 0 ? void 0 : _v$product.groupPrecision);\n  }).sort(function (a, b) {\n    return dealMaybeNumber(b.sumFillAmount) - dealMaybeNumber(a.sumFillAmount);\n  }).map(function (value) {\n    var _value$product;\n\n    return __jsx(React.Fragment, {\n      key: \"ProductItem_\".concat(value.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 103\n      }\n    }, __jsx(Space, {\n      h: 16,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }), __jsx(GroupProductItem, {\n      product: (_value$product = value.product) !== null && _value$product !== void 0 ? _value$product : {},\n      groupQueue: value,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }));\n  }));\n};\n\n_s(LineRanking, \"jSHXZLsG9e3WM0Ql3B3a8NqNQ8A=\", false, function () {\n  return [useStoreModel];\n});\n\n_c = LineRanking;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineRanking\");","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/m/home/components/LineRanking/LineRanking.tsx"],"names":["React","useEffect","modelFactory","doc","useStoreModel","dealMaybeNumber","fpMergePre","GroupProductItem","Space","LineRankingModel","list","getList","value","option","query","groupQueueList","res","setData","LineRanking","actionsLineRankingModel","actions","stateLineRankingModel","state","filter","v","sumFillAmount","product","groupPrecision","sort","a","b","map","id"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,YAAR,QAA2B,sCAA3B;AAEA,SAAQC,GAAR,QAAkB,iCAAlB;AACA,SAAQC,aAAR,QAA4B,qCAA5B;AACA,SAAQC,eAAR,EAAyBC,UAAzB,QAA0C,4BAA1C;AACA,SAAQC,gBAAR,QAA+B,mDAA/B;AACA,SAAQC,KAAR,QAAoB,mCAApB;AAEA,OAAO,IAAMC,gBAAgB,GAAGP,YAAY,CAAC,aAAD,EAAgB;AAC1DQ,EAAAA,IAAI,EAAE;AADoD,CAAhB,EAEzC;AACDC,EAAAA,OAAO;AAAA,4EAAE,iBAAOC,KAAP,EAAcC,MAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACWA,MAAM,CAACC,KAAP,CAAaX,GAAG,CAACY,cAAjB,EAAiC,EAAjC,CADX;;AAAA;AACDC,cAAAA,GADC;AAEPH,cAAAA,MAAM,CAACI,OAAP,CAAeX,UAAU,CAAC;AACxBI,gBAAAA,IAAI,yBAAEM,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAED,cAAP,qEAAyB;AADL,eAAD,CAAzB;;AAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADN,CAFyC,CAArC;AAWP,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AAAA,uBAC0Cd,aAAa,CAACK,gBAAD,CADvD;AAAA,MACfU,uBADe,kBACxBC,OADwB;AAAA,MACiBC,qBADjB,kBACUC,KADV;;AAE/BrB,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,uBAAuB,CAACR,OAAxB;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACJU,qBAAqB,CAACX,IAAtB,CACIa,MADJ,CACW,UAAAC,CAAC;AAAA;;AAAA,WAAInB,eAAe,CAACmB,CAAC,CAACC,aAAH,CAAf,GAAmCpB,eAAe,eAACmB,CAAC,CAACE,OAAH,+CAAC,WAAWC,cAAZ,CAAtD;AAAA,GADZ,EAEAC,IAFA,CAEK,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUzB,eAAe,CAACyB,CAAC,CAACL,aAAH,CAAf,GAAmCpB,eAAe,CAACwB,CAAC,CAACJ,aAAH,CAA5D;AAAA,GAFL,EAEoFM,GAFpF,CAEwF,UAAAnB,KAAK;AAAA;;AAAA,WAAI,MAAC,KAAD,CAAO,QAAP;AAC1F,MAAA,GAAG,wBAAiBA,KAAK,CAACoB,EAAvB,CADuF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAG5F,MAAC,KAAD;AAAO,MAAA,CAAC,EAAE,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH4F,EAI5F,MAAC,gBAAD;AACI,MAAA,OAAO,oBAAEpB,KAAK,CAACc,OAAR,2DAAmB,EAD9B;AAEI,MAAA,UAAU,EAAEd,KAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJ4F,CAAJ;AAAA,GAF7F,CADI,CAAP;AAcD,CAnBM;;GAAMM,W;UAC8Dd,a;;;KAD9Dc,W","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {modelFactory} from '../../../../../ModelAction/modelUtil'\r\nimport {GroupQueue} from '../../../../../graphqlTypes/types'\r\nimport {doc} from '../../../../../graphqlTypes/doc'\r\nimport {useStoreModel} from '../../../../../ModelAction/useStore'\r\nimport {dealMaybeNumber, fpMergePre} from '../../../../../tools/utils'\r\nimport {GroupProductItem} from '../../../../../components/ProductItem/ProductItem'\r\nimport {Space} from '../../../../../components/Box/Box'\r\n\r\nexport const LineRankingModel = modelFactory('LineRanking', {\r\n  list: [] as GroupQueue[],\r\n}, {\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.groupQueueList, {})\r\n    option.setData(fpMergePre({\r\n      list: res?.groupQueueList ?? [],\r\n    }))\r\n  },\r\n})\r\n\r\nexport const LineRanking = () => {\r\n  const {actions: actionsLineRankingModel, state: stateLineRankingModel} = useStoreModel(LineRankingModel)\r\n  useEffect(() => {\r\n    actionsLineRankingModel.getList()\r\n  }, [])\r\n  return <div>\r\n    {stateLineRankingModel.list\r\n        .filter(v => dealMaybeNumber(v.sumFillAmount) < dealMaybeNumber(v.product?.groupPrecision))\r\n    .sort((a, b) => dealMaybeNumber(b.sumFillAmount) - dealMaybeNumber(a.sumFillAmount)).map(value => <React.Fragment\r\n            key={`ProductItem_${value.id}`}\r\n        >\r\n          <Space h={16}/>\r\n          <GroupProductItem\r\n              product={value.product ?? {}}\r\n              groupQueue={value}\r\n          />\r\n        </React.Fragment>,\r\n    )}\r\n  </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}