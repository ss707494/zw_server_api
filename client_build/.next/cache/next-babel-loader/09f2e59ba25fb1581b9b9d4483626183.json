{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\me\\\\pickupAddress\\\\list.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nimport { fpMergePre } from '../../../tools/utils';\nimport styled from 'styled-components';\nimport { Button, ButtonBase } from '@material-ui/core';\nimport { dealImgUrl } from '../../../tools/img';\nimport { grey } from '@material-ui/core/colors';\nimport { ls } from '../../../tools/dealKey';\nimport { showMessage } from '../../../components/Message/Message';\nconst pickupAddressModel = modelFactory('pickupAddressModel', {\n  list: [],\n  user: {}\n}, {\n  getList: async (value, option) => {\n    var _res$getDataConfig$va, _res$getDataConfig, _res$getDataConfig$va2;\n\n    const res = await option.query(doc.pickupAddress, {});\n    option.setData(fpMergePre({\n      list: (_res$getDataConfig$va = res === null || res === void 0 ? void 0 : (_res$getDataConfig = res.getDataConfig) === null || _res$getDataConfig === void 0 ? void 0 : (_res$getDataConfig$va2 = _res$getDataConfig.value) === null || _res$getDataConfig$va2 === void 0 ? void 0 : _res$getDataConfig$va2.list) !== null && _res$getDataConfig$va !== void 0 ? _res$getDataConfig$va : [],\n      user: res === null || res === void 0 ? void 0 : res.oneUser\n    }));\n  },\n  setDefault: async (value, option) => {\n    var _option$data$user$use, _res$updateUserInfo;\n\n    const res = option.mutate(doc.updateUserInfo, {\n      userInfo: {\n        id: (_option$data$user$use = option.data.user.userInfo) === null || _option$data$user$use === void 0 ? void 0 : _option$data$user$use.id,\n        pickupAddressId: value.id\n      }\n    });\n\n    if (res === null || res === void 0 ? void 0 : (_res$updateUserInfo = res.updateUserInfo) === null || _res$updateUserInfo === void 0 ? void 0 : _res$updateUserInfo.id) {\n      showMessage('操作成功');\n    }\n\n    return res;\n  }\n});\nconst ItemBox = styled(ButtonBase).withConfig({\n  displayName: \"list__ItemBox\",\n  componentId: \"gj9w8w-0\"\n})([\"&&&{display:flex;padding:10px 20px;> img{width:18vw;height:18vw;}> section{margin-left:9px;text-align:left;> main,footer{font-size:12px;color:\", \";}}}\"], grey[600]);\nconst Box = styled.div.withConfig({\n  displayName: \"list__Box\",\n  componentId: \"gj9w8w-1\"\n})([\"display:grid;grid-template-columns:1fr 20vw;align-items:center;justify-items:start;\"]);\nexport const PickupAddress = () => {\n  const {\n    actions: actionsPAM,\n    state: statePAM\n  } = useStoreModel(pickupAddressModel);\n  useEffect(() => {\n    if (!statePAM.list.length) {\n      actionsPAM.getList();\n    }\n  }, []);\n  console.log(statePAM.user.userInfo);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  }, __jsx(HeaderTitle, {\n    title: '我的取货点',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }), __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, statePAM.list.map(value => {\n    var _statePAM$user$userIn;\n\n    return __jsx(React.Fragment, {\n      key: `PickupAddress_${value.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 42\n      }\n    }, __jsx(ItemBox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, __jsx(\"img\", {\n      src: dealImgUrl(value.imgUrl),\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }), __jsx(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, __jsx(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, value.fullName), __jsx(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, `${value.province} ${value.city}`), __jsx(\"footer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, `${value.streetAddress}`))), ((_statePAM$user$userIn = statePAM.user.userInfo) === null || _statePAM$user$userIn === void 0 ? void 0 : _statePAM$user$userIn.pickupAddressId) === value.id && __jsx(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 67\n      }\n    }, ls('默认地址')) || __jsx(Button, {\n      onClick: async () => {\n        var _await$actionsPAM$set, _await$actionsPAM$set2;\n\n        if ((_await$actionsPAM$set = await actionsPAM.setDefault(value)) === null || _await$actionsPAM$set === void 0 ? void 0 : (_await$actionsPAM$set2 = _await$actionsPAM$set.updateUserInfo) === null || _await$actionsPAM$set2 === void 0 ? void 0 : _await$actionsPAM$set2.id) {\n          actionsPAM.getList();\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, ls('设为默认')));\n  })));\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/me/pickupAddress/list.tsx"],"names":["React","useEffect","HeaderTitle","modelFactory","doc","useStoreModel","fpMergePre","styled","Button","ButtonBase","dealImgUrl","grey","ls","showMessage","pickupAddressModel","list","user","getList","value","option","res","query","pickupAddress","setData","getDataConfig","oneUser","setDefault","mutate","updateUserInfo","userInfo","id","data","pickupAddressId","ItemBox","Box","div","PickupAddress","actions","actionsPAM","state","statePAM","length","console","log","map","imgUrl","fullName","province","city","streetAddress"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {HeaderTitle} from '../../../components/HeaderTitle/HeaderTitle'\r\nimport {modelFactory} from '../../../ModelAction/modelUtil'\r\nimport {doc} from '../../../graphqlTypes/doc'\r\nimport {useStoreModel} from '../../../ModelAction/useStore'\r\nimport {fpMergePre} from '../../../tools/utils'\r\nimport styled from 'styled-components'\r\nimport {Button, ButtonBase} from '@material-ui/core'\r\nimport {dealImgUrl} from '../../../tools/img'\r\nimport {grey} from '@material-ui/core/colors'\r\nimport {User, UserInfoItemInput} from '../../../graphqlTypes/types'\r\nimport {ls} from '../../../tools/dealKey'\r\nimport {showMessage} from '../../../components/Message/Message'\r\n\r\nconst pickupAddressModel = modelFactory('pickupAddressModel', {\r\n  list: [],\r\n  user: {} as User,\r\n}, {\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.pickupAddress, {})\r\n    option.setData(fpMergePre({\r\n      list: res?.getDataConfig?.value?.list ?? [],\r\n      user: res?.oneUser,\r\n    }))\r\n  },\r\n  setDefault: async (value, option) => {\r\n    const res = option.mutate(doc.updateUserInfo, {\r\n      userInfo: {\r\n        id: option.data.user.userInfo?.id,\r\n        pickupAddressId: value.id,\r\n      } as UserInfoItemInput\r\n    })\r\n    if (res?.updateUserInfo?.id) {\r\n      showMessage('操作成功')\r\n    }\r\n    return res\r\n  },\r\n\r\n})\r\n\r\nconst ItemBox = styled(ButtonBase)`\r\n  &&& {\r\n    display: flex;\r\n    padding: 10px 20px;\r\n    > img {\r\n      width: 18vw;\r\n      height: 18vw;\r\n    }\r\n    > section {\r\n      margin-left: 9px;\r\n      text-align: left;\r\n      > main, footer {\r\n        font-size: 12px;\r\n        color: ${grey[600]};\r\n      }\r\n    }\r\n  }\r\n`\r\nconst Box = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 20vw;\r\n  align-items: center;\r\n  justify-items: start;\r\n`\r\n\r\nexport const PickupAddress = () => {\r\n  const {actions: actionsPAM, state: statePAM} = useStoreModel(pickupAddressModel)\r\n  useEffect(() => {\r\n    if (!statePAM.list.length) {\r\n      actionsPAM.getList()\r\n    }\r\n  }, [])\r\n\r\n  console.log(statePAM.user.userInfo)\r\n\r\n  return <div>\r\n    <HeaderTitle\r\n        title={'我的取货点'}\r\n    />\r\n    <Box>\r\n      {statePAM.list.map((value: any) => <React.Fragment key={`PickupAddress_${value.id}`}>\r\n        <ItemBox>\r\n          <img src={dealImgUrl(value.imgUrl)}\r\n               alt=\"\"/>\r\n          <section>\r\n            <header>{value.fullName}</header>\r\n            <main>{`${value.province} ${value.city}`}</main>\r\n            <footer>\r\n              {`${value.streetAddress}`}\r\n            </footer>\r\n          </section>\r\n        </ItemBox>\r\n        {(statePAM.user.userInfo?.pickupAddressId === value.id && <section>{ls('默认地址')}</section>) ||\r\n        <Button\r\n            onClick={async () => {\r\n              if ((await actionsPAM.setDefault(value))?.updateUserInfo?.id) {\r\n                actionsPAM.getList()\r\n              }\r\n            }}\r\n        >{ls('设为默认')}</Button>\r\n        }\r\n      </React.Fragment>)}\r\n    </Box>\r\n  </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}