{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport 'cross-fetch/polyfill';\nimport { getToken, setToken } from '../tools/token';\nimport Router from 'next/router';\nimport ApolloClient from 'apollo-boost';\nimport { ssLog } from '../tools/global';\nimport { doc } from '../graphqlTypes/doc';\nimport { showMessage } from '../components/Message/Message';\n\nconst omitTypename = (key, value) => {\n  return key === '__typename' ? undefined : value;\n};\n\nexport const getClient = () => {\n  const request = operation => {\n    if (operation.variables) {\n      operation.variables = JSON.parse(JSON.stringify(operation.variables), omitTypename);\n    }\n\n    operation.setContext(({\n      headers = {}\n    }) => ({\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        // 后台万能权限\n        Authorization: getToken()\n      })\n    }));\n  };\n\n  const refreshToken = () => {\n    graphQLQuery()(doc.refreshToken, {\n      data: getToken('refreshtoken')\n    }).then(res => {\n      var _res$data, _res$data$refreshToke;\n\n      if ((_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$refreshToke = _res$data.refreshToken) === null || _res$data$refreshToke === void 0 ? void 0 : _res$data$refreshToke.token) {\n        var _res$data2, _res$data2$refreshTok, _res$data3, _res$data3$refreshTok;\n\n        setToken((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$refreshTok = _res$data2.refreshToken) === null || _res$data2$refreshTok === void 0 ? void 0 : _res$data2$refreshTok.token);\n        setToken((_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$refreshTok = _res$data3.refreshToken) === null || _res$data3$refreshTok === void 0 ? void 0 : _res$data3$refreshTok.refreshtoken, 'refreshtoken');\n        showMessage({\n          message: '登录超时,刷新登录信息'\n        });\n        Router.reload();\n      } else {\n        showMessage({\n          message: '请重新登录'\n        });\n        Router.push('/login');\n      }\n    }).catch(err => {\n      ssLog(err);\n      showMessage({\n        message: '请重新登录'\n      });\n      Router.push('/login');\n    });\n  };\n\n  const onError = ({\n    response,\n    operation,\n    graphQLErrors,\n    networkError\n  }) => {\n    // console.log(response)\n    // console.log(operation)\n    if (graphQLErrors) {\n      graphQLErrors.forEach(({\n        message,\n        locations,\n        path,\n        extensions\n      }) => {\n        ssLog(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n\n        if ((extensions === null || extensions === void 0 ? void 0 : extensions.code) === 'UNAUTHENTICATED') {\n          if (message.includes('first')) {\n            refreshToken();\n          } else {\n            showMessage({\n              message: '请重新登录'\n            });\n            Router.push('/login');\n          }\n        }\n\n        if (message.includes('Unexpected error')) {\n          showMessage({\n            message: message.split('\"')[1],\n            msg_type: 'error'\n          });\n        } else {\n          showMessage({\n            message\n          });\n        }\n      });\n    }\n\n    if (networkError) {\n      var _networkError$result;\n\n      const errMsg = 'bodyText' in networkError ? networkError === null || networkError === void 0 ? void 0 : networkError.bodyText : 'result' in networkError ? networkError === null || networkError === void 0 ? void 0 : (_networkError$result = networkError.result) === null || _networkError$result === void 0 ? void 0 : _networkError$result.error : '';\n      ssLog(`[Network error]: ${errMsg}`);\n\n      if ('statusCode' in networkError && (networkError === null || networkError === void 0 ? void 0 : networkError.statusCode) === 401) {\n        if (errMsg.includes('first') && getToken('refreshtoken')) {\n          refreshToken();\n        } else {\n          showMessage({\n            message: '请重新登录'\n          });\n          Router.push('/login');\n        }\n      }\n    }\n  };\n\n  console.log('client_api');\n  console.log(process.env.client_api_uri);\n  return new ApolloClient({\n    // link: httpLink,\n    uri: process.env.client_api_uri || 'http://localhost:4464/type__graphql/api',\n    request,\n    onError\n  });\n};\nconst defaultClient = getClient(); // const dealParams = ((params: any) => ({\n//   data: params,\n// }))\n\nconst dealParams = params => params;\n\nexport const graphQLQuery = (client = defaultClient) => async (query, params, option) => {\n  var _option$dealParamsIn;\n\n  const _dealParamsIn = (_option$dealParamsIn = option === null || option === void 0 ? void 0 : option.dealParamsIn) !== null && _option$dealParamsIn !== void 0 ? _option$dealParamsIn : dealParams;\n\n  return client.query(_objectSpread({\n    fetchPolicy: 'network-only',\n    query,\n    variables: _objectSpread({}, _dealParamsIn ? _dealParamsIn(params) : params)\n  }, option));\n};\nexport const graphQLMutate = (client = defaultClient) => async (mutation, params, option) => {\n  var _option$dealParamsIn2;\n\n  const _dealParamsIn = (_option$dealParamsIn2 = option === null || option === void 0 ? void 0 : option.dealParamsIn) !== null && _option$dealParamsIn2 !== void 0 ? _option$dealParamsIn2 : dealParams;\n\n  return client.mutate(_objectSpread({\n    mutation,\n    variables: _objectSpread({}, _dealParamsIn ? _dealParamsIn(params) : params)\n  }, option));\n};\n\nconst serverClient = () => new ApolloClient({\n  // link: httpLink,\n  uri: process.env.client_api_uri || 'http://localhost:4464/type__graphql/api'\n});\n\nexport const serverQuery = async (query, params, option) => {\n  var _await$graphQLQuery;\n\n  return (_await$graphQLQuery = await graphQLQuery(serverClient())(query, params, option)) === null || _await$graphQLQuery === void 0 ? void 0 : _await$graphQLQuery.data;\n};\nexport const serverMutate = async (mutation, params, option) => {\n  var _await$graphQLMutate;\n\n  return (_await$graphQLMutate = await graphQLMutate(serverClient())(mutation, params, option)) === null || _await$graphQLMutate === void 0 ? void 0 : _await$graphQLMutate.data;\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/client/index.ts"],"names":["getToken","setToken","Router","ApolloClient","ssLog","doc","showMessage","omitTypename","key","value","undefined","getClient","request","operation","variables","JSON","parse","stringify","setContext","headers","Authorization","refreshToken","graphQLQuery","data","then","res","token","refreshtoken","message","reload","push","catch","err","onError","response","graphQLErrors","networkError","forEach","locations","path","extensions","code","includes","split","msg_type","errMsg","bodyText","result","error","statusCode","console","log","process","env","client_api_uri","uri","defaultClient","dealParams","params","client","query","option","_dealParamsIn","dealParamsIn","fetchPolicy","graphQLMutate","mutation","mutate","serverClient","serverQuery","serverMutate"],"mappings":"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","sourcesContent":["import 'cross-fetch/polyfill'\r\nimport {getToken, setToken} from '../tools/token'\r\nimport {Operation} from 'apollo-link'\r\nimport {ErrorLink} from 'apollo-link-error'\r\nimport Router from 'next/router'\r\nimport ApolloClient from 'apollo-boost'\r\nimport {ssLog} from '../tools/global'\r\nimport {DocumentNode} from 'graphql'\r\nimport {doc} from '../graphqlTypes/doc'\r\nimport {showMessage} from '../components/Message/Message'\r\n\r\nconst omitTypename = (key: any, value: any) => {\r\n  return key === '__typename' ? undefined : value\r\n}\r\n\r\nexport const getClient = () => {\r\n\r\n  const request: (operation: Operation) => Promise<void> | void = (operation) => {\r\n    if (operation.variables) {\r\n      operation.variables = JSON.parse(JSON.stringify(operation.variables), omitTypename)\r\n    }\r\n    operation.setContext(({headers = {}}) => ({\r\n      headers: {\r\n        ...headers,\r\n        // 后台万能权限\r\n        Authorization: getToken(),\r\n      },\r\n    }))\r\n  }\r\n\r\n  const refreshToken = () => {\r\n    graphQLQuery()(doc.refreshToken, {\r\n      data: getToken('refreshtoken'),\r\n    }).then(res => {\r\n      if (res.data?.refreshToken?.token) {\r\n        setToken(res.data?.refreshToken?.token)\r\n        setToken(res.data?.refreshToken?.refreshtoken, 'refreshtoken')\r\n        showMessage({message: '登录超时,刷新登录信息'})\r\n        Router.reload()\r\n      } else {\r\n        showMessage({message: '请重新登录'})\r\n        Router.push('/login')\r\n      }\r\n    }).catch(err => {\r\n      ssLog(err)\r\n      showMessage({message: '请重新登录'})\r\n      Router.push('/login')\r\n    })\r\n  }\r\n  const onError: ErrorLink.ErrorHandler = ({response, operation, graphQLErrors, networkError}) => {\r\n    // console.log(response)\r\n    // console.log(operation)\r\n    if (graphQLErrors) {\r\n      graphQLErrors.forEach(({message, locations, path, extensions}) => {\r\n        ssLog(\r\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\r\n        )\r\n        if (extensions?.code === 'UNAUTHENTICATED') {\r\n          if (message.includes('first')) {\r\n            refreshToken()\r\n          } else {\r\n            showMessage({message: '请重新登录'})\r\n            Router.push('/login')\r\n          }\r\n        }\r\n        if (message.includes('Unexpected error')) {\r\n          showMessage({\r\n            message: message.split('\"')[1],\r\n            msg_type: 'error',\r\n          })\r\n        } else {\r\n          showMessage({message})\r\n        }\r\n      })\r\n    }\r\n\r\n    if (networkError) {\r\n      const errMsg = ('bodyText' in networkError) ? networkError?.bodyText : ('result' in networkError) ? networkError?.result?.error : ''\r\n      ssLog(`[Network error]: ${errMsg}`)\r\n      if ('statusCode' in networkError && networkError?.statusCode === 401) {\r\n        if (errMsg.includes('first') && getToken('refreshtoken')) {\r\n          refreshToken()\r\n        } else {\r\n          showMessage({message: '请重新登录'})\r\n          Router.push('/login')\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log('client_api')\r\n  console.log(process.env.client_api_uri)\r\n  return new ApolloClient({\r\n    // link: httpLink,\r\n    uri: process.env.client_api_uri || 'http://localhost:4464/type__graphql/api',\r\n    request,\r\n    onError,\r\n  })\r\n}\r\n\r\nconst defaultClient = getClient()\r\n\r\n// const dealParams = ((params: any) => ({\r\n//   data: params,\r\n// }))\r\nconst dealParams = ((params: any) => params)\r\n\r\nexport const graphQLQuery = (client = defaultClient) => async (query: DocumentNode, params: any, option?: any) => {\r\n  const _dealParamsIn = option?.dealParamsIn ?? dealParams\r\n  return client.query({\r\n    fetchPolicy: 'network-only',\r\n    query,\r\n    variables: {\r\n      ...(_dealParamsIn ? _dealParamsIn(params) : params),\r\n    },\r\n    ...option,\r\n  })\r\n}\r\n\r\nexport const graphQLMutate = (client = defaultClient) => async (mutation: any, params: any, option?: any) => {\r\n  const _dealParamsIn = option?.dealParamsIn ?? dealParams\r\n  return client.mutate({\r\n    mutation,\r\n    variables: {\r\n      ...(_dealParamsIn ? _dealParamsIn(params) : params),\r\n    },\r\n    ...option,\r\n  })\r\n}\r\n\r\nconst serverClient = () => new ApolloClient({\r\n  // link: httpLink,\r\n  uri: process.env.client_api_uri || 'http://localhost:4464/type__graphql/api',\r\n})\r\n\r\nexport const serverQuery = async (query: any, params: any, option?: any) => (await graphQLQuery(serverClient())(query, params, option))?.data\r\n\r\nexport const serverMutate = async (mutation: any, params: any, option?: any) => (await graphQLMutate(serverClient())(mutation, params, option))?.data\r\n\r\n"]},"metadata":{},"sourceType":"module"}