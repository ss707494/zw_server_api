{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Router from 'next/router';\nimport { fpMergePre } from '../../../tools/utils';\nimport { setToken } from '../../../tools/token';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\n\nvar _toLogin = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Router.push('/m/login');\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function toLogin() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var meModel = modelFactory('meModel', {\n  user: {}\n}, {\n  getLoginUser: function () {\n    var _getLoginUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value, option) {\n      var _yield$option$query;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return option.query(doc.oneUser);\n\n            case 2:\n              _context2.t1 = _yield$option$query = _context2.sent;\n              _context2.t0 = _context2.t1 === null;\n\n              if (_context2.t0) {\n                _context2.next = 6;\n                break;\n              }\n\n              _context2.t0 = _yield$option$query === void 0;\n\n            case 6:\n              if (!_context2.t0) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.t2 = void 0;\n              _context2.next = 11;\n              break;\n\n            case 10:\n              _context2.t2 = _yield$option$query.oneUser;\n\n            case 11:\n              res = _context2.t2;\n              option.setData(fpMergePre({\n                user: res\n              }));\n              return _context2.abrupt(\"return\", res);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function getLoginUser(_x, _x2) {\n      return _getLoginUser.apply(this, arguments);\n    }\n\n    return getLoginUser;\n  }(),\n  logout: function () {\n    var _logout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(value, option) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setToken('');\n              setToken('', 'refreshtoken');\n              _context3.next = 4;\n              return _toLogin();\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function logout(_x3, _x4) {\n      return _logout.apply(this, arguments);\n    }\n\n    return logout;\n  }(),\n  toLogin: function toLogin(value) {\n    _toLogin();\n  }\n});","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/m/me/model.ts"],"names":["Router","fpMergePre","setToken","doc","modelFactory","toLogin","push","meModel","user","getLoginUser","value","option","query","oneUser","res","setData","logout"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AAEA,SAAQC,UAAR,QAAyB,sBAAzB;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,SAAQC,GAAR,QAAkB,2BAAlB;AACA,SAAQC,YAAR,QAA2B,gCAA3B;;AAEA,IAAMC,QAAO;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACRL,MAAM,CAACM,IAAP,CAAY,UAAZ,CADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPD,OAAO;AAAA;AAAA;AAAA,GAAb;;AAGA,OAAO,IAAME,OAAO,GAAGH,YAAY,CAAC,SAAD,EAAY;AAC7CI,EAAAA,IAAI,EAAE;AADuC,CAAZ,EAEhC;AACDC,EAAAA,YAAY;AAAA,iFAAE,kBAAOC,KAAP,EAAcC,MAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACOA,MAAM,CAACC,KAAP,CAAaT,GAAG,CAACU,OAAjB,CADP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,6BACA,oBAAmCA,OADnC;;AAAA;AACNC,cAAAA,GADM;AAEZH,cAAAA,MAAM,CAACI,OAAP,CAAed,UAAU,CAAC;AACxBO,gBAAAA,IAAI,EAAEM;AADkB,eAAD,CAAzB;AAFY,gDAKLA,GALK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADX;AAQDE,EAAAA,MAAM;AAAA,2EAAE,kBAAON,KAAP,EAAcC,MAAd;AAAA;AAAA;AAAA;AAAA;AACNT,cAAAA,QAAQ,CAAC,EAAD,CAAR;AACAA,cAAAA,QAAQ,CAAC,EAAD,EAAK,cAAL,CAAR;AAFM;AAAA,qBAGAG,QAAO,EAHP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KARL;AAaDA,EAAAA,OAAO,EAAE,iBAAAK,KAAK,EAAI;AAChBL,IAAAA,QAAO;AACR;AAfA,CAFgC,CAA5B","sourcesContent":["import Router from 'next/router'\r\nimport {User} from '../../../graphqlTypes/types'\r\nimport {fpMergePre} from '../../../tools/utils'\r\nimport {setToken} from '../../../tools/token'\r\nimport {doc} from '../../../graphqlTypes/doc'\r\nimport {modelFactory} from '../../../ModelAction/modelUtil'\r\n\r\nconst toLogin = async () => {\r\n  await Router.push('/m/login')\r\n}\r\nexport const meModel = modelFactory('meModel', {\r\n  user: {} as User,\r\n}, {\r\n  getLoginUser: async (value, option) => {\r\n    const res = (await option.query(doc.oneUser))?.oneUser as User\r\n    option.setData(fpMergePre({\r\n      user: res,\r\n    }))\r\n    return res\r\n  },\r\n  logout: async (value, option) => {\r\n    setToken('')\r\n    setToken('', 'refreshtoken')\r\n    await toLogin()\r\n  },\r\n  toLogin: value => {\r\n    toLogin()\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}