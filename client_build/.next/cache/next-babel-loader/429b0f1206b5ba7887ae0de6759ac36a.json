{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../../../../ModelAction/modelUtil';\nimport { useStoreModel } from '../../../../../ModelAction/useStore';\nimport { fpMergePre } from '../../../../../tools/utils';\nimport { HeaderTitle } from '../../../../../components/HeaderTitle/HeaderTitle';\nimport { setForm } from '../../../../../tools/commonAction';\nimport { useRouter } from 'next/router';\nimport { doc } from '../../../../../graphqlTypes/doc';\nimport { CreditAddressInputTypeEnum } from '../../../../../ss_common/enum';\nimport { myAddressModel } from '../../myAddress/list';\nimport { CardFieldContain } from './fieldContain';\nexport const MyCreditCardEditModel = modelFactory('myCreditCardEditModel', {\n  selectId: '',\n  form: {\n    number: '',\n    code: '',\n    name: '',\n    userName: '',\n    addressDetail: '',\n    zipCode: '',\n    city: '',\n    zip: '',\n    province: '',\n    district: '',\n    address: '',\n    contact: '',\n    expirationTime: null,\n    creditAddressInputType: CreditAddressInputTypeEnum.Input\n  },\n  isEditNumber: true\n}, {\n  setForm: setForm,\n  clearForm: (value, option) => option.setData(fpMergePre({\n    form: {\n      number: '',\n      code: '',\n      name: '',\n      userName: '',\n      addressDetail: '',\n      zipCode: '',\n      city: '',\n      zip: '',\n      province: '',\n      district: '',\n      address: '',\n      contact: '',\n      expirationTime: null,\n      creditAddressInputType: CreditAddressInputTypeEnum.Input\n    }\n  })),\n  changeSelectId: (value, option) => option.setData(fpMergePre({\n    selectId: `${value.id}`,\n    form: {\n      zip: value.zip,\n      province: value.province,\n      city: value.city,\n      district: value.district,\n      address: value.address,\n      contact: value.contactInformation\n    }\n  })),\n  submit: (value, option) => {\n    const _option$data$form = option.data.form,\n          {\n      id\n    } = _option$data$form,\n          form = _objectWithoutProperties(_option$data$form, [\"id\"]);\n\n    return option.mutate(doc.saveUserPayCard, {\n      data: _objectSpread(_objectSpread({}, form), id ? {\n        id\n      } : {})\n    });\n  },\n  getOne: async (value, option) => {\n    var _res$userPayCard;\n\n    const res = await option.query(doc.userPayCard, {\n      data: _objectSpread({}, value)\n    });\n    option.setData(fpMergePre({\n      isEditNumber: false,\n      form: _objectSpread({}, (_res$userPayCard = res === null || res === void 0 ? void 0 : res.userPayCard) !== null && _res$userPayCard !== void 0 ? _res$userPayCard : {})\n    }));\n  },\n  numberFocus: (value, option) => {\n    if (!option.data.isEditNumber) {\n      option.setData(fpMergePre({\n        isEditNumber: true,\n        form: {\n          number: ''\n        }\n      }));\n    }\n  }\n});\nexport const MyCreditCardEdit = () => {\n  var _ref, _router$query;\n\n  const router = useRouter();\n  const id = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id) !== null && _ref !== void 0 ? _ref : '';\n  const {\n    actions: actionsMyAddressModel\n  } = useStoreModel(myAddressModel);\n  const {\n    actions: actionsMyCreditCardEditModel\n  } = useStoreModel(MyCreditCardEditModel);\n  useEffect(() => {\n    if (id && id !== '0') {\n      actionsMyCreditCardEditModel.getOne({\n        id\n      });\n    } else {\n      actionsMyCreditCardEditModel.setForm(['id', '']);\n    }\n  }, [actionsMyCreditCardEditModel, id]);\n  useEffect(() => {\n    actionsMyAddressModel.getList();\n  }, []);\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: `${id === '0' ? '新增' : '编辑'}信用卡`,\n    backCall: actionsMyCreditCardEditModel.clearForm\n  }), __jsx(CardFieldContain, {\n    finallyAction: () => {\n      router.back();\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}