{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { graphQLMutate, graphQLQuery } from '../client';\nimport { baseActionOption } from './modelUtil';\nexport const originStore = {};\n\nconst isFunction = functionToCheck => {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n};\n\nexport const dealNameSpace = (key, nameSpace) => {\n  if (nameSpace) {\n    return `${key}_${nameSpace}`;\n  }\n\n  return `${key}`;\n};\nexport const useStoreModel = (model, key) => {\n  var _model$name;\n\n  const _key = (_model$name = model.name) !== null && _model$name !== void 0 ? _model$name : !key ? '' : Array.isArray(key) ? dealNameSpace(key[0], key[1]) : key;\n\n  const {\n    actions,\n    state\n  } = model;\n  const {\n    1: setState\n  } = useState(Object.create(null));\n\n  if (!_key) {\n    throw Error('no key');\n  }\n\n  if (!originStore[_key]) {\n    originStore[_key] = {\n      keys: _key,\n      state,\n      actions: {},\n      setData: []\n    };\n  }\n\n  const notice = useCallback(data => {\n    originStore[_key].setData.forEach(value => {\n      value === null || value === void 0 ? void 0 : value(data);\n    });\n  }, [_key]);\n  const setData = useCallback(data => {\n    const oldState = originStore[_key].state;\n    const newData = isFunction(data) ? data(oldState) : data;\n    originStore[_key].state = newData;\n    notice(newData);\n  }, [_key, notice]);\n  const setLoad = useCallback((query, flag) => {\n    setData(prevState => {\n      var _prevState$fetchLoad, _query$loc, _query$loc$source;\n\n      return _objectSpread({}, prevState, {\n        fetchLoad: _objectSpread({}, (_prevState$fetchLoad = prevState.fetchLoad) !== null && _prevState$fetchLoad !== void 0 ? _prevState$fetchLoad : {}, {\n          [query === null || query === void 0 ? void 0 : (_query$loc = query.loc) === null || _query$loc === void 0 ? void 0 : (_query$loc$source = _query$loc.source) === null || _query$loc$source === void 0 ? void 0 : _query$loc$source.body]: flag\n        })\n      });\n    });\n  }, [setData]);\n  const setError = useCallback((query, err) => {\n    setData(prevState => {\n      var _prevState$fetchError, _query$loc2, _query$loc2$source;\n\n      return _objectSpread({}, prevState, {\n        fetchError: _objectSpread({}, (_prevState$fetchError = prevState.fetchError) !== null && _prevState$fetchError !== void 0 ? _prevState$fetchError : {}, {\n          [query === null || query === void 0 ? void 0 : (_query$loc2 = query.loc) === null || _query$loc2 === void 0 ? void 0 : (_query$loc2$source = _query$loc2.source) === null || _query$loc2$source === void 0 ? void 0 : _query$loc2$source.body]: err\n        })\n      });\n    });\n  }, [setData]);\n  const query = useCallback(async (query, params, option) => {\n    setLoad(query, true);\n    const res = await graphQLQuery()(query, params, option).catch(e => {\n      setError(query, e);\n    }).finally(() => {\n      setLoad(query, false);\n    });\n    return res === null || res === void 0 ? void 0 : res.data;\n  }, [setError, setLoad]);\n  const mutate = useCallback(async (mutation, params, option) => {\n    setLoad(mutation, true);\n    const res = await graphQLMutate()(mutation, params, option).catch(e => {\n      setError(mutation, e);\n    }).finally(() => {\n      setLoad(mutation, false);\n    });\n    return res === null || res === void 0 ? void 0 : res.data;\n  }, [setError, setLoad]);\n\n  if (Object.keys(originStore[_key].actions).length === 0 && originStore[_key].actions.constructor === Object) {\n    Object.keys(actions).forEach(value => {\n      originStore[_key].actions[value] = v => actions[value](v, _objectSpread({}, baseActionOption, {\n        data: originStore[_key].state,\n        notice,\n        setData,\n        query,\n        mutate,\n        store: originStore\n      }));\n    });\n  }\n\n  useEffect(() => {\n    Object.keys(actions).forEach(value => {\n      originStore[_key].actions[value] = v => actions[value](v, _objectSpread({}, baseActionOption, {\n        data: originStore[_key].state,\n        notice,\n        setData,\n        query,\n        mutate,\n        store: originStore\n      }));\n    });\n  }, [_key, actions, mutate, notice, query, setData]);\n  useEffect(() => {\n    var _originStore$_key$set;\n\n    originStore[_key].setData = [...((_originStore$_key$set = originStore[_key].setData) !== null && _originStore$_key$set !== void 0 ? _originStore$_key$set : []), setState];\n    return () => {\n      originStore[_key].setData = originStore[_key].setData.filter(value => value !== setState);\n    };\n  }, [_key]);\n  return {\n    state: originStore[_key].state,\n    actions: originStore[_key].actions,\n    store: originStore,\n    getLoad: query => {\n      var _query$loc3, _query$loc3$source;\n\n      return originStore[_key].state.fetchLoad[query === null || query === void 0 ? void 0 : (_query$loc3 = query.loc) === null || _query$loc3 === void 0 ? void 0 : (_query$loc3$source = _query$loc3.source) === null || _query$loc3$source === void 0 ? void 0 : _query$loc3$source.body] ? 1 : 0;\n    }\n  };\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/ModelAction/useStore.ts"],"names":["useCallback","useEffect","useState","graphQLMutate","graphQLQuery","baseActionOption","originStore","isFunction","functionToCheck","toString","call","dealNameSpace","key","nameSpace","useStoreModel","model","_key","name","Array","isArray","actions","state","setState","Object","create","Error","keys","setData","notice","data","forEach","value","oldState","newData","setLoad","query","flag","prevState","fetchLoad","loc","source","body","setError","err","fetchError","params","option","res","catch","e","finally","mutate","mutation","length","constructor","v","store","filter","getLoad"],"mappings":"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","sourcesContent":["import {useCallback, useEffect, useState} from \"react\"\r\nimport {graphQLMutate, graphQLQuery} from '../client'\r\nimport {baseActionOption} from './modelUtil'\r\n\r\nexport const originStore: OriginStore = {}\r\n\r\nconst isFunction = (functionToCheck: any) => {\r\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]'\r\n}\r\n\r\ntype StoreStateResult<T, E extends ModelActionObjHelp<any, T>> = ModelResult<T, E> & {\r\n  store: OriginStore\r\n  getLoad: (query: any) => number\r\n}\r\n\r\ntype UseModelState = <T extends FetchObj, E extends ModelActionObjHelp<any, T>>(model: ModelData<T, E>, key?: string | [string, string]) => StoreStateResult<T, E>\r\n\r\nexport const dealNameSpace = (key: string, nameSpace: string) => {\r\n  if (nameSpace) {\r\n    return `${key}_${nameSpace}`\r\n  }\r\n  return `${key}`\r\n}\r\n\r\nexport const useStoreModel: UseModelState = (model, key?: string | [string, string]) => {\r\n  const _key = model.name ?? (!key ? '' : Array.isArray(key) ? dealNameSpace(key[0], key[1]) : key)\r\n  const {actions, state} = model\r\n  const [, setState] = useState(Object.create(null))\r\n  if (!_key) {\r\n    throw Error('no key')\r\n  }\r\n  if (!originStore[_key]) {\r\n    originStore[_key] = {\r\n      keys: _key,\r\n      state,\r\n      actions: {},\r\n      setData: []\r\n    }\r\n  }\r\n  const notice = useCallback((data: any) => {\r\n    originStore[_key].setData.forEach(value => {\r\n      value?.(data)\r\n    })\r\n  }, [_key])\r\n  const setData: Dispatch<SetStateAction<typeof state>> = useCallback((data) => {\r\n    const oldState = originStore[_key].state\r\n    const newData = isFunction(data) ? (data as (v: typeof oldState) => void)(oldState) : data\r\n    originStore[_key].state = newData\r\n    notice(newData)\r\n  }, [_key, notice])\r\n\r\n  const setLoad = useCallback((query: any, flag: boolean) => {\r\n    setData(prevState => ({\r\n      ...prevState,\r\n      fetchLoad: {\r\n        ...prevState.fetchLoad ?? {},\r\n        [query?.loc?.source?.body]: flag,\r\n      }\r\n    }))\r\n  }, [setData])\r\n  const setError = useCallback((query: any, err: any) => {\r\n    setData(prevState => ({\r\n      ...prevState,\r\n      fetchError: {\r\n        ...prevState.fetchError ?? {},\r\n        [query?.loc?.source?.body]: err,\r\n      }\r\n    }))\r\n  }, [setData])\r\n\r\n  const query: GraphqlQuery = useCallback(async (query, params, option) => {\r\n    setLoad(query, true)\r\n    const res = await graphQLQuery()(query, params, option).catch(e => {\r\n      setError(query, e)\r\n    }).finally(() => {\r\n      setLoad(query, false)\r\n    }) as any\r\n    return res?.data\r\n  }, [setError, setLoad])\r\n  const mutate: GraphqlMutate = useCallback(async (mutation, params, option) => {\r\n    setLoad(mutation, true)\r\n    const res = await graphQLMutate()(mutation, params, option).catch(e => {\r\n      setError(mutation, e)\r\n    }).finally(() => {\r\n      setLoad(mutation, false)\r\n    }) as any\r\n    return res?.data\r\n  }, [setError, setLoad])\r\n\r\n  if (Object.keys(originStore[_key].actions).length === 0 && originStore[_key].actions.constructor === Object) {\r\n    Object.keys(actions).forEach(value => {\r\n      originStore[_key].actions[value] = (v: any) => actions[value](v, {\r\n        ...baseActionOption,\r\n        data: originStore[_key].state,\r\n        notice,\r\n        setData,\r\n        query,\r\n        mutate,\r\n        store: originStore,\r\n      })\r\n    })\r\n  }\r\n  useEffect(() => {\r\n    Object.keys(actions).forEach(value => {\r\n      originStore[_key].actions[value] = (v: any) => actions[value](v, {\r\n        ...baseActionOption,\r\n        data: originStore[_key].state,\r\n        notice,\r\n        setData,\r\n        query,\r\n        mutate,\r\n        store: originStore,\r\n      })\r\n    })\r\n  }, [_key, actions, mutate, notice, query, setData])\r\n  useEffect(() => {\r\n    originStore[_key].setData = [\r\n      ...originStore[_key].setData ?? [],\r\n      setState,\r\n    ]\r\n    return () => {\r\n      originStore[_key].setData = originStore[_key].setData.filter(value => value !== setState)\r\n    }\r\n  }, [_key])\r\n\r\n  return {\r\n    state: originStore[_key].state,\r\n    actions: (originStore[_key].actions) as DealFunObj<typeof actions>,\r\n    store: originStore,\r\n    getLoad: query => originStore[_key].state.fetchLoad[query?.loc?.source?.body] ? 1 : 0\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}