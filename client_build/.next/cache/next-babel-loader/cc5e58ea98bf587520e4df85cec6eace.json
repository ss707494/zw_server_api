{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { mpStyle } from '../../../../style/common';\nimport styled from 'styled-components';\nimport { MeLayoutBox } from '../components/meLayoutBox';\nimport { Button, Divider } from '@material-ui/core';\nimport { Space } from '../../../../components/Box/Box';\nimport { ll } from '../../../../tools/dealKey';\nimport { BaseField } from '../components/BaseField';\nimport { modelFactory } from '../../../../ModelAction/modelUtil';\nimport { useStoreModel } from '../../../../ModelAction/useStore';\nimport { UpdateMyInfoModel, useUpdateMyInfoInit } from '../../../m/me/myInfo/updateMyInfo';\nimport { fpMergePre } from '../../../../tools/utils';\nimport { meModel } from '../../../m/me/model';\nimport { ButtonLoad } from '../../../../components/ButtonLoad/ButtonLoad';\nimport { doc } from '../../../../graphqlTypes/doc';\nimport { updatePasswordModel } from '../../../m/me/myInfo/updatePassword';\nvar TopTitle = styled('div').withConfig({\n  displayName: \"myInfo__TopTitle\",\n  componentId: \"y3lzcv-0\"\n})([\"\", \";display:grid;grid-template-columns:1fr max-content;&&&{.MuiButton-root{width:95px;height:27px;border-radius:19px;color:\", \";border:1px solid \", \";}}\"], mpStyle.fontType.l, mpStyle.red, mpStyle.red);\nvar FormBox = styled.div.withConfig({\n  displayName: \"myInfo__FormBox\",\n  componentId: \"y3lzcv-1\"\n})([\"display:grid;grid-template-columns:repeat(3,240px);grid-column-gap:60px;grid-row-gap:24px;\"]);\nvar SubmitButtons = styled.div.withConfig({\n  displayName: \"myInfo__SubmitButtons\",\n  componentId: \"y3lzcv-2\"\n})([\"&&&{.MuiButton-root{width:215px;height:50px;border-radius:8px;}}\"]);\nexport var PcMyInfoModel = modelFactory('PcMyInfoModel', {\n  isEditInfo: false,\n  isEditPass: false\n}, {\n  setEditInfo: function () {\n    var _setEditInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, option) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", option.setData(fpMergePre({\n                isEditInfo: value\n              })));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function setEditInfo(_x, _x2) {\n      return _setEditInfo.apply(this, arguments);\n    }\n\n    return setEditInfo;\n  }(),\n  setEditPass: function () {\n    var _setEditPass = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value, option) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", option.setData(fpMergePre({\n                isEditPass: value\n              })));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function setEditPass(_x3, _x4) {\n      return _setEditPass.apply(this, arguments);\n    }\n\n    return setEditPass;\n  }()\n});\nexport var PcMyInfo = function PcMyInfo() {\n  var _useStoreModel = useStoreModel(PcMyInfoModel),\n      actionsPcMyInfoModel = _useStoreModel.actions,\n      statePcMyInfoModel = _useStoreModel.state;\n\n  var _useStoreModel2 = useStoreModel(UpdateMyInfoModel),\n      actionsUpdateMyInfoModel = _useStoreModel2.actions,\n      stateUpdateMyInfoModel = _useStoreModel2.state,\n      getLoad = _useStoreModel2.getLoad;\n\n  var _useStoreModel3 = useStoreModel(updatePasswordModel),\n      stateUpdatePasswordModel = _useStoreModel3.state,\n      actionsUpdatePasswordModel = _useStoreModel3.actions;\n\n  var _useStoreModel4 = useStoreModel(meModel),\n      actionsMe = _useStoreModel4.actions,\n      stateMeModel = _useStoreModel4.state;\n\n  var _useUpdateMyInfoInit = useUpdateMyInfoInit(),\n      initForm = _useUpdateMyInfoInit.initForm;\n\n  return __jsx(MeLayoutBox, null, __jsx(TopTitle, null, ll('个人资料'), !statePcMyInfoModel.isEditInfo && __jsx(Button, {\n    variant: 'outlined',\n    onClick: function onClick() {\n      return actionsPcMyInfoModel.setEditInfo(true);\n    }\n  }, ll('编辑'))), __jsx(Space, {\n    h: mpStyle.space.xs\n  }), __jsx(Divider, null), __jsx(Space, {\n    h: mpStyle.space.s\n  }), __jsx(FormBox, null, __jsx(BaseField, {\n    readonly: !statePcMyInfoModel.isEditInfo,\n    label: ll('姓名'),\n    value: stateUpdateMyInfoModel.form.name,\n    onChange: function onChange(event) {\n      return actionsUpdateMyInfoModel.setForm(['name', event.target.value]);\n    }\n  }), __jsx(BaseField, {\n    readonly: !statePcMyInfoModel.isEditInfo,\n    label: ll('电话'),\n    value: stateUpdateMyInfoModel.form.phone,\n    onChange: function onChange(event) {\n      return actionsUpdateMyInfoModel.setForm(['phone', event.target.value]);\n    }\n  }), __jsx(BaseField, {\n    readonly: !statePcMyInfoModel.isEditInfo,\n    label: ll('邮箱'),\n    value: stateUpdateMyInfoModel.form.email,\n    onChange: function onChange(event) {\n      return actionsUpdateMyInfoModel.setForm(['email', event.target.value]);\n    }\n  }), __jsx(SubmitButtons, {\n    style: {\n      gridArea: '2/1/3/3',\n      alignSelf: 'start'\n    }\n  }, statePcMyInfoModel.isEditInfo && __jsx(React.Fragment, null, __jsx(ButtonLoad, {\n    variant: 'outlined',\n    loading: getLoad(doc.updateUserInfo),\n    onClick: function onClick() {\n      actionsPcMyInfoModel.setEditInfo(false);\n      initForm();\n    }\n  }, ll('取消')), __jsx(Space, {\n    w: mpStyle.space.s\n  }), __jsx(ButtonLoad, {\n    variant: 'contained',\n    color: 'secondary',\n    loading: getLoad(doc.updateUserInfo),\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _res$updateUserInfo;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return actionsUpdateMyInfoModel.submit();\n\n            case 2:\n              res = _context3.sent;\n\n              if (res === null || res === void 0 ? void 0 : (_res$updateUserInfo = res.updateUserInfo) === null || _res$updateUserInfo === void 0 ? void 0 : _res$updateUserInfo.id) {\n                actionsMe.getLoginUser();\n                actionsPcMyInfoModel.setEditInfo(false);\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))\n  }, ll('保存'))))), __jsx(Space, {\n    h: mpStyle.space.s\n  }), __jsx(TopTitle, null, ll('账户资料'), !statePcMyInfoModel.isEditPass && __jsx(Button, {\n    variant: 'outlined',\n    onClick: function onClick() {\n      return actionsPcMyInfoModel.setEditPass(true);\n    }\n  }, ll('编辑'))), __jsx(Space, {\n    h: mpStyle.space.xs\n  }), __jsx(Divider, null), __jsx(Space, {\n    h: mpStyle.space.s\n  }), __jsx(FormBox, null, !statePcMyInfoModel.isEditPass && __jsx(React.Fragment, null, __jsx(BaseField, {\n    readonly: true,\n    label: ll('达人账号名'),\n    value: stateMeModel.user.name\n  }), __jsx(BaseField, {\n    readonly: true,\n    label: ll('密码'),\n    value: '*******'\n  }), __jsx(\"div\", null)) || __jsx(React.Fragment, null, __jsx(BaseField, {\n    readonly: true,\n    label: ll('达人账号名'),\n    value: stateMeModel.user.name\n  }), __jsx(\"div\", null), __jsx(\"div\", null), __jsx(BaseField, {\n    label: ll('原始密码'),\n    type: 'password',\n    value: stateUpdatePasswordModel.form.oldPassword,\n    onChange: function onChange(event) {\n      return actionsUpdatePasswordModel.setForm(['oldPassword', event.target.value]);\n    }\n  }), __jsx(\"div\", null), __jsx(\"div\", null), __jsx(BaseField, {\n    label: ll('新密码'),\n    type: 'password',\n    value: stateUpdatePasswordModel.form.newPassword,\n    onChange: function onChange(event) {\n      return actionsUpdatePasswordModel.setForm(['newPassword', event.target.value]);\n    }\n  }), __jsx(BaseField, {\n    label: ll('确认密码'),\n    type: 'password',\n    value: stateUpdatePasswordModel.form.confirmPassword,\n    onChange: function onChange(event) {\n      return actionsUpdatePasswordModel.setForm(['confirmPassword', event.target.value]);\n    }\n  }), __jsx(\"div\", null), __jsx(SubmitButtons, {\n    style: {\n      gridArea: '4/1/5/3',\n      alignSelf: 'start'\n    }\n  }, __jsx(ButtonLoad, {\n    variant: 'outlined',\n    loading: getLoad(doc.updateUserInfo),\n    onClick: function onClick() {\n      actionsPcMyInfoModel.setEditPass(false);\n      actionsUpdatePasswordModel.clearForm();\n    }\n  }, ll('取消')), __jsx(Space, {\n    w: mpStyle.space.s\n  }), __jsx(ButtonLoad, {\n    variant: 'contained',\n    color: 'secondary',\n    loading: getLoad(doc.updateUserInfo),\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var _res$updatePassword;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return actionsUpdatePasswordModel.submit();\n\n            case 2:\n              res = _context4.sent;\n\n              if (res === null || res === void 0 ? void 0 : (_res$updatePassword = res.updatePassword) === null || _res$updatePassword === void 0 ? void 0 : _res$updatePassword.id) {\n                actionsMe.getLoginUser();\n                actionsPcMyInfoModel.setEditPass(false);\n              }\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))\n  }, ll('保存'))))));\n};","map":null,"metadata":{},"sourceType":"module"}