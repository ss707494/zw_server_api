{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\cart\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { PickUpTypeEnum } from '../../ss_common/enum';\nimport { fpMergePre } from '../../tools/utils';\nimport { setForm } from '../../tools/commonAction';\nimport { doc } from '../../graphqlTypes/doc';\nimport { ShopCartPage } from './shopCart';\nimport React from 'react';\nimport { useStoreModel } from '../../ModelAction/useStore';\nimport { OrderPage } from './orderPage';\nexport const pageTypeEnum = {\n  shopCart: 'shopCart',\n  order: 'order'\n};\nconst initForm = {\n  pickUpType: PickUpTypeEnum.Self,\n  addressId: ''\n};\nexport const shopCartModel = modelFactory('shopCartModel', {\n  user: {},\n  payCardList: [],\n  userAddressList: [],\n  selfAddress: [],\n  pageType: pageTypeEnum.shopCart,\n  shopCartList: [],\n  shopCartListNext: [],\n  form: _objectSpread({}, initForm)\n}, {\n  clearForm: (value, option) => option.setData(fpMergePre({\n    form: _objectSpread({}, initForm)\n  })),\n  setForm: setForm,\n  getList: async (value, option) => {\n    var _res$shopCartList$fil, _res$shopCartList$fil2;\n\n    const res = await option.query(doc.userShopCartList);\n    option.setData(fpMergePre({\n      shopCartList: (_res$shopCartList$fil = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !v.isNext)) !== null && _res$shopCartList$fil !== void 0 ? _res$shopCartList$fil : [],\n      shopCartListNext: (_res$shopCartList$fil2 = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !!v.isNext)) !== null && _res$shopCartList$fil2 !== void 0 ? _res$shopCartList$fil2 : []\n    }));\n  },\n  updatePageType: (value, option) => option.setData(fpMergePre({\n    pageType: value\n  })),\n  getOrderInfo: async (value, option) => {\n    var _res$getDataConfig$va, _res$getDataConfig, _res$getDataConfig$va2, _option$data$userAddr, _option$data$userAddr2, _option$data$selfAddr, _option$data$selfAddr2;\n\n    const res = await option.query(doc.orderConfirmInfo);\n    option.setData(fpMergePre({\n      user: res === null || res === void 0 ? void 0 : res.oneUser,\n      payCardList: res === null || res === void 0 ? void 0 : res.payCardListOneUser,\n      userAddressList: res === null || res === void 0 ? void 0 : res.userAddressListOneUser,\n      selfAddress: (_res$getDataConfig$va = res === null || res === void 0 ? void 0 : (_res$getDataConfig = res.getDataConfig) === null || _res$getDataConfig === void 0 ? void 0 : (_res$getDataConfig$va2 = _res$getDataConfig.value) === null || _res$getDataConfig$va2 === void 0 ? void 0 : _res$getDataConfig$va2.list) !== null && _res$getDataConfig$va !== void 0 ? _res$getDataConfig$va : []\n    }));\n    option.setData(fpMergePre({\n      form: {\n        addressId: option.data.form.pickUpType === PickUpTypeEnum.Delivery && ((_option$data$userAddr = option.data.userAddressList) === null || _option$data$userAddr === void 0 ? void 0 : (_option$data$userAddr2 = _option$data$userAddr.find(v => v.isDefault)) === null || _option$data$userAddr2 === void 0 ? void 0 : _option$data$userAddr2.id) || ((_option$data$selfAddr = option.data.selfAddress) === null || _option$data$selfAddr === void 0 ? void 0 : (_option$data$selfAddr2 = _option$data$selfAddr[0]) === null || _option$data$selfAddr2 === void 0 ? void 0 : _option$data$selfAddr2.id)\n      }\n    }));\n  }\n});\nexport const CartPage = () => {\n  const {\n    state: stateSCM\n  } = useStoreModel(shopCartModel);\n  return stateSCM.pageType === pageTypeEnum.order && __jsx(OrderPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 55\n    }\n  }) || __jsx(ShopCartPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 72\n    }\n  });\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/cart/index.tsx"],"names":["modelFactory","PickUpTypeEnum","fpMergePre","setForm","doc","ShopCartPage","React","useStoreModel","OrderPage","pageTypeEnum","shopCart","order","initForm","pickUpType","Self","addressId","shopCartModel","user","payCardList","userAddressList","selfAddress","pageType","shopCartList","shopCartListNext","form","clearForm","value","option","setData","getList","res","query","userShopCartList","filter","v","isNext","updatePageType","getOrderInfo","orderConfirmInfo","oneUser","payCardListOneUser","userAddressListOneUser","getDataConfig","list","data","Delivery","find","isDefault","id","CartPage","state","stateSCM"],"mappings":"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","sourcesContent":["import {modelFactory} from '../../ModelAction/modelUtil'\r\nimport {OrderInfoItemInput, ShopCart, User, UserAddress, UserPayCard} from '../../graphqlTypes/types'\r\nimport {PickUpTypeEnum} from '../../ss_common/enum'\r\nimport {fpMergePre} from '../../tools/utils'\r\nimport {setForm} from '../../tools/commonAction'\r\nimport {doc} from '../../graphqlTypes/doc'\r\nimport {ShopCartPage} from './shopCart'\r\nimport React from 'react'\r\nimport {useStoreModel} from '../../ModelAction/useStore'\r\nimport {OrderPage} from './orderPage'\r\n\r\nexport const pageTypeEnum = {\r\n  shopCart: 'shopCart',\r\n  order: 'order',\r\n}\r\n\r\nconst initForm: OrderInfoItemInput = {\r\n  pickUpType: PickUpTypeEnum.Self,\r\n  addressId: '',\r\n}\r\nexport const shopCartModel = modelFactory('shopCartModel', {\r\n  user: {} as User,\r\n  payCardList: [] as UserPayCard[],\r\n  userAddressList: [] as UserAddress[],\r\n  selfAddress: [] as any[],\r\n  pageType: pageTypeEnum.shopCart,\r\n  shopCartList: [] as ShopCart[],\r\n  shopCartListNext: [] as ShopCart[],\r\n  form: {\r\n    ...initForm,\r\n  } as OrderInfoItemInput,\r\n}, {\r\n  clearForm: (value, option) => option.setData(fpMergePre({\r\n    form: {\r\n      ...initForm,\r\n    },\r\n  })),\r\n  setForm: setForm,\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.userShopCartList)\r\n    option.setData(fpMergePre({\r\n      shopCartList: res?.shopCartList.filter((v: ShopCart) => !v.isNext) ?? [],\r\n      shopCartListNext: res?.shopCartList.filter((v: ShopCart) => !!v.isNext) ?? [],\r\n    }))\r\n  },\r\n  updatePageType: (value: string, option) => option.setData(fpMergePre({\r\n    pageType: value,\r\n  })),\r\n  getOrderInfo: async (value, option) => {\r\n    const res = await option.query(doc.orderConfirmInfo)\r\n    option.setData(fpMergePre({\r\n      user: res?.oneUser,\r\n      payCardList: res?.payCardListOneUser,\r\n      userAddressList: res?.userAddressListOneUser,\r\n      selfAddress: res?.getDataConfig?.value?.list ?? [],\r\n    }))\r\n    option.setData(fpMergePre({\r\n      form: {\r\n        addressId: (option.data.form.pickUpType === PickUpTypeEnum.Delivery && option.data.userAddressList?.find(v=> v.isDefault)?.id) || option.data.selfAddress?.[0]?.id,\r\n      },\r\n    }))\r\n  },\r\n})\r\n\r\nexport const CartPage = () => {\r\n  const {state: stateSCM} = useStoreModel(shopCartModel)\r\n  return (stateSCM.pageType === pageTypeEnum.order && <OrderPage/>) || <ShopCartPage/>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}