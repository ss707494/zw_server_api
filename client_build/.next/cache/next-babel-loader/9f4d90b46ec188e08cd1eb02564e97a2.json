{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport styled from 'styled-components';\nimport { Divider, IconButton, InputAdornment, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { Search } from '@material-ui/icons';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nimport { setForm } from '../../../tools/commonAction';\nimport { fpMergePre } from '../../../tools/utils';\nimport { ll } from '../../../tools/dealKey';\nimport { GroupProductItem, ProductItemOneRow } from '../../../components/ProductItem/ProductItem';\nimport { Space } from '../../../components/Box/Box';\nimport { getPromoCodeItem } from '../card/[type]';\nimport { UpdateShopCart } from '../../../components/ProductItem/UpdateShopCart';\nexport const SearchPageModel = modelFactory('SearchPage', {\n  form: {\n    keyword: ''\n  },\n  productList: [],\n  groupProductList: [],\n  promoCodePromoCodeList: [],\n  darenCardPromoCodeList: [],\n  user: {}\n}, {\n  setForm: setForm,\n  getData: async (value, option) => {\n    var _option$data$form$key, _res$productList$list, _res$productList, _res$groupProductList, _res$groupProductList2, _res$promoCodePromoCo, _res$darenCardPromoCo, _res$oneUser;\n\n    const res = await option.query(doc.searchData, {\n      keyword: (_option$data$form$key = option.data.form.keyword) !== null && _option$data$form$key !== void 0 ? _option$data$form$key : ''\n    });\n    option.setData(fpMergePre({\n      productList: (_res$productList$list = res === null || res === void 0 ? void 0 : (_res$productList = res.productList) === null || _res$productList === void 0 ? void 0 : _res$productList.list) !== null && _res$productList$list !== void 0 ? _res$productList$list : [],\n      groupProductList: (_res$groupProductList = res === null || res === void 0 ? void 0 : (_res$groupProductList2 = res.groupProductList) === null || _res$groupProductList2 === void 0 ? void 0 : _res$groupProductList2.list) !== null && _res$groupProductList !== void 0 ? _res$groupProductList : [],\n      promoCodePromoCodeList: (_res$promoCodePromoCo = res === null || res === void 0 ? void 0 : res.promoCodePromoCodeList) !== null && _res$promoCodePromoCo !== void 0 ? _res$promoCodePromoCo : [],\n      darenCardPromoCodeList: (_res$darenCardPromoCo = res === null || res === void 0 ? void 0 : res.darenCardPromoCodeList) !== null && _res$darenCardPromoCo !== void 0 ? _res$darenCardPromoCo : [],\n      user: (_res$oneUser = res === null || res === void 0 ? void 0 : res.oneUser) !== null && _res$oneUser !== void 0 ? _res$oneUser : {}\n    }));\n  }\n});\nconst SearchInput = styled.div.withConfig({\n  displayName: \"searchPage__SearchInput\",\n  componentId: \"r45djw-0\"\n})([\"padding:0 16px;\"]);\nconst Title = styled.div.withConfig({\n  displayName: \"searchPage__Title\",\n  componentId: \"r45djw-1\"\n})([\"padding:16px;font-size:18px;\"]);\nconst ListBox = styled.div.withConfig({\n  displayName: \"searchPage__ListBox\",\n  componentId: \"r45djw-2\"\n})([\"padding:0 16px;\"]);\nexport const SearchPage = () => {\n  const {\n    actions: actionsSearchPageModel,\n    state: stateSearchPageModel\n  } = useStoreModel(SearchPageModel);\n  useEffect(() => {}, []);\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: '搜索',\n    LeftIcon: CloseIcon,\n    showCart: true\n  }), __jsx(SearchInput, null, __jsx(Autocomplete, {\n    size: 'small',\n    freeSolo: true,\n    disableClearable: true,\n    options: [],\n    value: stateSearchPageModel.form.keyword,\n    onInputChange: (event, value) => actionsSearchPageModel.setForm(['keyword', value]),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      autoFocus: true,\n      margin: \"normal\",\n      variant: \"outlined\",\n      InputProps: {\n        endAdornment: __jsx(InputAdornment, {\n          position: 'end'\n        }, __jsx(IconButton, {\n          onClick: () => {\n            actionsSearchPageModel.getData();\n          }\n        }, __jsx(Search, null)))\n      },\n      onKeyUp: event => {\n        if ((event === null || event === void 0 ? void 0 : event.keyCode) === 13) {\n          actionsSearchPageModel.getData();\n        }\n      }\n    }))\n  })), stateSearchPageModel.productList.length > 0 && __jsx(React.Fragment, null, __jsx(Title, null, ll('零售商品')), __jsx(ListBox, null, stateSearchPageModel.productList.map(value => __jsx(ProductItemOneRow, {\n    key: `productList${value.id}`,\n    product: value\n  }))), __jsx(Space, {\n    h: 16\n  }), __jsx(Divider, null)), stateSearchPageModel.groupProductList.length > 0 && __jsx(React.Fragment, null, __jsx(Title, null, ll('拼团商品')), __jsx(ListBox, null, stateSearchPageModel.groupProductList.map(value => __jsx(GroupProductItem, {\n    key: `productList${value.id}`,\n    product: value\n  }))), __jsx(Space, {\n    h: 16\n  }), __jsx(Divider, null)), stateSearchPageModel.darenCardPromoCodeList.length > 0 && __jsx(React.Fragment, null, __jsx(Title, null, ll('达人卡')), __jsx(ListBox, null, stateSearchPageModel.darenCardPromoCodeList.map(value => getPromoCodeItem(value, stateSearchPageModel.user))), __jsx(Space, {\n    h: 16\n  }), __jsx(Divider, null)), stateSearchPageModel.promoCodePromoCodeList.length > 0 && __jsx(React.Fragment, null, __jsx(Title, null, ll('优惠码')), __jsx(ListBox, null, stateSearchPageModel.promoCodePromoCodeList.map(value => getPromoCodeItem(value, stateSearchPageModel.user))), __jsx(Space, {\n    h: 16\n  }), __jsx(Divider, null)), __jsx(UpdateShopCart, null));\n};","map":null,"metadata":{},"sourceType":"module"}