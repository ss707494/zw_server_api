{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../../../../ModelAction/modelUtil';\nimport { useStoreModel } from '../../../../../ModelAction/useStore';\nimport { dealLastNumber, fpMergePre } from '../../../../../tools/utils';\nimport { SigninInput } from '../../../register';\nimport { FieldContain } from '../../myInfo/updatePassword';\nimport { HeaderTitle } from '../../../../../components/HeaderTitle/HeaderTitle';\nimport { setForm } from '../../../../../tools/commonAction';\nimport { ls } from '../../../../../tools/dealKey';\nimport { useRouter } from 'next/router';\nimport { ButtonLoad } from '../../../../../components/ButtonLoad/ButtonLoad';\nimport { doc } from '../../../../../graphqlTypes/doc';\nimport { showMessage } from '../../../../../components/Message/Message';\nimport { DatePicker } from '@material-ui/pickers';\nimport { FormControl, FormControlLabel, FormLabel, MenuItem, Radio, RadioGroup, TextField } from '@material-ui/core';\nimport { Space } from '../../../../../components/Box/Box';\nimport { CreditAddressInputTypeEnum, ProvinceData } from '../../../../../ss_common/enum';\nimport styled from 'styled-components';\nimport { myAddressModel } from '../../myAddress/list';\nexport const myCreditCardEditModel = modelFactory('myCreditCardEditModel', {\n  selectId: '',\n  form: {\n    number: '',\n    code: '',\n    name: '',\n    userName: '',\n    addressDetail: '',\n    zipCode: '',\n    city: '',\n    zip: '',\n    province: '',\n    district: '',\n    address: '',\n    contact: '',\n    expirationTime: null,\n    creditAddressInputType: CreditAddressInputTypeEnum.Input\n  },\n  isEditNumber: true\n}, {\n  setForm: setForm,\n  clearForm: (value, option) => option.setData(fpMergePre({\n    form: {\n      number: '',\n      code: '',\n      name: '',\n      userName: '',\n      addressDetail: '',\n      zipCode: '',\n      city: '',\n      zip: '',\n      province: '',\n      district: '',\n      address: '',\n      contact: '',\n      expirationTime: null,\n      creditAddressInputType: CreditAddressInputTypeEnum.Input\n    }\n  })),\n  changeSelectId: (value, option) => option.setData(fpMergePre({\n    selectId: `${value.id}`,\n    form: {\n      zip: value.zip,\n      province: value.province,\n      city: value.city,\n      district: value.district,\n      address: value.address,\n      contact: value.contactInformation\n    }\n  })),\n  submit: (value, option) => {\n    const _option$data$form = option.data.form,\n          {\n      id\n    } = _option$data$form,\n          form = _objectWithoutProperties(_option$data$form, [\"id\"]);\n\n    return option.mutate(doc.saveUserPayCard, {\n      data: _objectSpread(_objectSpread({}, form), id ? {\n        id\n      } : {})\n    });\n  },\n  getOne: async (value, option) => {\n    var _res$userPayCard;\n\n    const res = await option.query(doc.userPayCard, {\n      data: _objectSpread({}, value)\n    });\n    option.setData(fpMergePre({\n      isEditNumber: false,\n      form: _objectSpread({}, (_res$userPayCard = res === null || res === void 0 ? void 0 : res.userPayCard) !== null && _res$userPayCard !== void 0 ? _res$userPayCard : {})\n    }));\n  },\n  numberFocus: (value, option) => {\n    if (!option.data.isEditNumber) {\n      option.setData(fpMergePre({\n        isEditNumber: true,\n        form: {\n          number: ''\n        }\n      }));\n    }\n  }\n});\nconst RadioGroupBox = styled(RadioGroup).withConfig({\n  displayName: \"id__RadioGroupBox\",\n  componentId: \"uddvah-0\"\n})([\"&&&{display:flex;flex-direction:row;}\"]);\nexport const MyCreditCardEdit = () => {\n  var _ref, _router$query;\n\n  const router = useRouter();\n  const id = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id) !== null && _ref !== void 0 ? _ref : '';\n  const {\n    actions: actionsMyAddressModel,\n    state: stateMyAddressModel\n  } = useStoreModel(myAddressModel);\n  const {\n    state: stateMCCE,\n    actions: actionsMCCE\n  } = useStoreModel(myCreditCardEditModel);\n  useEffect(() => {\n    if (id && id !== '0') {\n      actionsMCCE.getOne({\n        id\n      });\n    } else {\n      actionsMCCE.setForm(['id', '']);\n    }\n  }, [id]);\n  useEffect(() => {\n    actionsMyAddressModel.getList();\n  }, []);\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: `${id === '0' ? '新增' : '编辑'}信用卡`,\n    backCall: actionsMCCE.clearForm\n  }), __jsx(FieldContain, null, [['信用卡号', 'number', () => {\n    var _dealLastNumber;\n\n    return __jsx(SigninInput, {\n      key: `numberKey`,\n      label: ls('信用卡号'),\n      value: stateMCCE.isEditNumber ? stateMCCE.form['number'] : (_dealLastNumber = dealLastNumber(stateMCCE.form['number'])) !== null && _dealLastNumber !== void 0 ? _dealLastNumber : '',\n      onChange: event => actionsMCCE.setForm(['number', event.target.value]),\n      onFocus: () => actionsMCCE.numberFocus()\n    });\n  }], ['过期日', 'expirationTime', () => __jsx(FormControl, {\n    key: `expirationTime`,\n    fullWidth: true,\n    size: 'small'\n  }, __jsx(Space, {\n    h: 4\n  }), __jsx(FormLabel, {\n    style: {\n      fontSize: '0.75rem'\n    }\n  }, ls('过期日')), __jsx(DatePicker, {\n    format: 'MM/yy',\n    value: stateMCCE.form.expirationTime || null,\n    onChange: date => {\n      actionsMCCE.setForm(['expirationTime', date]);\n    }\n  }))], ['验证码', 'code', () => {\n    var _stateMCCE$form$code;\n\n    return __jsx(SigninInput, {\n      key: `codeKey`,\n      type: \"password\",\n      label: ls('验证码'),\n      value: (_stateMCCE$form$code = stateMCCE.form['code']) !== null && _stateMCCE$form$code !== void 0 ? _stateMCCE$form$code : '',\n      onChange: event => actionsMCCE.setForm(['code', event.target.value])\n    });\n  }], ['持卡人姓名', 'userName'], ['详细地址', 'addressDetail', () => {\n    var _stateMCCE$form$provi;\n\n    return __jsx(React.Fragment, {\n      key: `addressDetail__box`\n    }, __jsx(FormControl, {\n      key: `addressDetail`,\n      fullWidth: true,\n      size: 'small'\n    }, __jsx(Space, {\n      h: 10\n    }), __jsx(FormLabel, {\n      style: {\n        fontSize: 'small'\n      }\n    }, ls('账单地址')), __jsx(RadioGroupBox, {\n      value: stateMCCE.form.creditAddressInputType,\n      onChange: (event, value) => actionsMCCE.setForm(['creditAddressInputType', value])\n    }, __jsx(FormControlLabel, {\n      label: ls('收货地址中选择'),\n      value: CreditAddressInputTypeEnum.Select,\n      control: __jsx(Radio, null)\n    }), __jsx(FormControlLabel, {\n      value: CreditAddressInputTypeEnum.Input,\n      label: ls('新地址手动输入'),\n      control: __jsx(Radio, null)\n    }))), stateMCCE.form.creditAddressInputType === CreditAddressInputTypeEnum.Select && __jsx(TextField, {\n      key: 'creditAddressInputType_select',\n      style: {\n        marginTop: '10px'\n      },\n      select: true,\n      fullWidth: true,\n      value: '##',\n      onChange: e => actionsMCCE.changeSelectId(stateMyAddressModel.list.find(v => v.id === e.target.value))\n    }, __jsx(MenuItem, {\n      value: '##',\n      disabled: true\n    }, ls('选择地址')), stateMyAddressModel.list.map(item => __jsx(MenuItem, {\n      key: `addressSelect_${item.id}`,\n      value: `${item.id}`\n    }, item.name, \", \", item.address))), [['详细地址', 'address'], ['地区', 'district'], ['城市', 'city'], ['州', 'province', __jsx(TextField, {\n      key: 'myAddressEdit_province',\n      style: {\n        marginTop: '10px'\n      },\n      select: true,\n      fullWidth: true,\n      label: '州',\n      value: (_stateMCCE$form$provi = stateMCCE.form.province) !== null && _stateMCCE$form$provi !== void 0 ? _stateMCCE$form$provi : '',\n      onChange: e => actionsMCCE.setForm(['province', e.target.value]),\n      disabled: stateMCCE.form.creditAddressInputType === CreditAddressInputTypeEnum.Select\n    }, ProvinceData.map(item => __jsx(MenuItem, {\n      key: `provinceData_${item[0]}`,\n      value: item[1]\n    }, item[1])))], ['邮政编码', 'zip']].map(v => {\n      var _stateMCCE$form;\n\n      return v[2] && v[2] || __jsx(SigninInput, {\n        key: `myAddressEdit_${v[1]}`,\n        label: ls(v[0]),\n        value: (_stateMCCE$form = stateMCCE.form[v[1]]) !== null && _stateMCCE$form !== void 0 ? _stateMCCE$form : '',\n        onChange: event => actionsMCCE.setForm([v[1], event.target.value]),\n        disabled: stateMCCE.form.creditAddressInputType === CreditAddressInputTypeEnum.Select\n      });\n    }));\n  }], // ['邮政编码', 'zipCode'],\n  // ['城市', 'city'],\n  ['联系方式', 'contact']].map(v => {\n    var _stateMCCE$form2;\n\n    return v[2] && v[2]() || __jsx(SigninInput, {\n      key: `MyCreditCardEdit_${v[1]}`,\n      label: ls(v[0]),\n      value: (_stateMCCE$form2 = stateMCCE.form[v[1]]) !== null && _stateMCCE$form2 !== void 0 ? _stateMCCE$form2 : '',\n      onChange: event => actionsMCCE.setForm([v[1], event.target.value]),\n      disabled: stateMCCE.form.creditAddressInputType === CreditAddressInputTypeEnum.Select\n    });\n  }), __jsx(\"section\", {\n    style: {\n      width: '100%',\n      height: '20px'\n    }\n  }), __jsx(ButtonLoad, {\n    fullWidth: true,\n    variant: 'contained',\n    color: 'secondary',\n    onClick: async () => {\n      var _await$actionsMCCE$su, _await$actionsMCCE$su2;\n\n      if ((_await$actionsMCCE$su = await actionsMCCE.submit()) === null || _await$actionsMCCE$su === void 0 ? void 0 : (_await$actionsMCCE$su2 = _await$actionsMCCE$su.saveUserPayCard) === null || _await$actionsMCCE$su2 === void 0 ? void 0 : _await$actionsMCCE$su2.id) {\n        showMessage('操作成功');\n        actionsMCCE.clearForm();\n        router.back();\n      }\n    }\n  }, \"\\u4FDD\\u5B58\")));\n};","map":null,"metadata":{},"sourceType":"module"}