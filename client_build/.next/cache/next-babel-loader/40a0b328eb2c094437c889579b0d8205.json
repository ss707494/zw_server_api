{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Snackbar } from '@material-ui/core';\nimport { amber, blue, common, green, grey, red } from '@material-ui/core/colors';\nimport { originStore, useStoreModel } from '../../ModelAction/useStore';\nimport { fpMergePre } from '../../tools/utils';\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { ll } from '../../tools/dealKey';\nconst typeHelp = {\n  default: `background: ${grey[700]};`,\n  success: `background: ${green[600]};`,\n  warning: `background: ${amber[700]};`,\n  info: `background: ${blue[700]};`,\n  error: `background: ${red[700]};`\n};\n\nconst getType = (type = 'default') => typeHelp[type];\n\nconst CusSnackbar = styled(Snackbar).withConfig({\n  displayName: \"Message__CusSnackbar\",\n  componentId: \"om26s-0\"\n})([\"&&& > div{color:\", \";\", \"}\"], common.white, ({\n  msg_type\n}) => getType(msg_type));\nconst messageModel = modelFactory('messageModel', {\n  open: false,\n  message: '',\n  autoHideDuration: 2000,\n  msg_type: 'default'\n}, {\n  open: (value, option) => {\n    if (typeof value === 'string') {\n      option.setData(fpMergePre({\n        autoHideDuration: 2000,\n        msg_type: 'default',\n        message: value,\n        open: true\n      }));\n    } else {\n      option.setData(fpMergePre(_objectSpread(_objectSpread({\n        autoHideDuration: 2000,\n        msg_type: 'default'\n      }, value), {}, {\n        open: true\n      })));\n    }\n  },\n  onClose: (value, option) => option.setData(fpMergePre({\n    open: false\n  }))\n});\nexport const Message = () => {\n  const {\n    state: mState,\n    actions\n  } = useStoreModel(messageModel);\n  return __jsx(CusSnackbar, {\n    open: mState.open,\n    autoHideDuration: mState.autoHideDuration,\n    message: ll(mState.message),\n    msg_type: mState.msg_type,\n    onClose: () => actions.onClose()\n  });\n};\nexport const showMessage = option => {\n  originStore['messageModel'].actions.open(option);\n  return;\n};","map":null,"metadata":{},"sourceType":"module"}