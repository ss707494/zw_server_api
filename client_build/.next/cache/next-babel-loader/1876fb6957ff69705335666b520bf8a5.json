{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../../../../ModelAction/modelUtil';\nimport { doc } from '../../../../../graphqlTypes/doc';\nimport { useStoreModel } from '../../../../../ModelAction/useStore';\nimport { dealMaybeNumber, fpMergePre } from '../../../../../tools/utils';\nimport { GroupProductItem } from '../../../../../components/ProductItem/ProductItem';\nimport { Space } from '../../../../../components/Box/Box';\nexport const LineRankingModel = modelFactory('LineRanking', {\n  list: []\n}, {\n  getList: async (value, option) => {\n    var _res$groupQueueList;\n\n    const res = await option.query(doc.groupQueueList, {});\n    option.setData(fpMergePre({\n      list: (_res$groupQueueList = res === null || res === void 0 ? void 0 : res.groupQueueList) !== null && _res$groupQueueList !== void 0 ? _res$groupQueueList : []\n    }));\n  }\n});\nexport const LineRanking = () => {\n  const {\n    actions: actionsLineRankingModel,\n    state: stateLineRankingModel\n  } = useStoreModel(LineRankingModel);\n  useEffect(() => {\n    actionsLineRankingModel.getList();\n  }, [actionsLineRankingModel]);\n  return __jsx(\"div\", null, stateLineRankingModel.list.filter(v => {\n    var _v$product;\n\n    return dealMaybeNumber(v.sumFillAmount) < dealMaybeNumber((_v$product = v.product) === null || _v$product === void 0 ? void 0 : _v$product.groupPrecision);\n  }).sort((a, b) => dealMaybeNumber(b.sumFillAmount) - dealMaybeNumber(a.sumFillAmount)).map(value => {\n    var _value$product;\n\n    return __jsx(React.Fragment, {\n      key: `ProductItem_${value.id}`\n    }, __jsx(Space, {\n      h: 16\n    }), __jsx(GroupProductItem, {\n      product: (_value$product = value.product) !== null && _value$product !== void 0 ? _value$product : {},\n      groupQueue: value\n    }));\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}