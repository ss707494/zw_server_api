{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { Button, ExpansionPanel, ExpansionPanelDetails, ExpansionPanelSummary } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { ExpandMore } from '@material-ui/icons';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { DictTypeEnum } from '../../../ss_common/enum';\nimport { fpMergePre } from '../../../tools/utils';\nimport { grey } from '@material-ui/core/colors';\nimport { mpStyle } from '../../../style/common';\nimport { HelpDetail, HelpDetailModel } from './helpDetail';\nexport const HelpCenterModel = modelFactory('HelpCenter', {\n  typeList: [],\n  problemListData: {}\n}, {\n  getData: async (value, option) => {\n    var _helpDocumentationTyp, _helpDocumentationTyp2, _helpDocumentationTyp3, _helpDocumentation$ge, _helpDocumentation$ge2, _helpDocumentation$ge3;\n\n    const helpDocumentationType = await option.query(doc.getDataConfig, {\n      data: {\n        type: DictTypeEnum.HelpDocumentationType\n      }\n    });\n    const helpDocumentation = await option.query(doc.getDataConfig, {\n      data: {\n        type: DictTypeEnum.HelpDocumentation\n      }\n    });\n    option.setData(fpMergePre({\n      typeList: (_helpDocumentationTyp = helpDocumentationType === null || helpDocumentationType === void 0 ? void 0 : (_helpDocumentationTyp2 = helpDocumentationType.getDataConfig) === null || _helpDocumentationTyp2 === void 0 ? void 0 : (_helpDocumentationTyp3 = _helpDocumentationTyp2.value) === null || _helpDocumentationTyp3 === void 0 ? void 0 : _helpDocumentationTyp3.typeList) !== null && _helpDocumentationTyp !== void 0 ? _helpDocumentationTyp : [],\n      problemListData: (_helpDocumentation$ge = helpDocumentation === null || helpDocumentation === void 0 ? void 0 : (_helpDocumentation$ge2 = helpDocumentation.getDataConfig) === null || _helpDocumentation$ge2 === void 0 ? void 0 : (_helpDocumentation$ge3 = _helpDocumentation$ge2.value) === null || _helpDocumentation$ge3 === void 0 ? void 0 : _helpDocumentation$ge3.problemListData) !== null && _helpDocumentation$ge !== void 0 ? _helpDocumentation$ge : {}\n    }));\n  }\n});\nconst Box = styled.div.withConfig({\n  displayName: \"helpCenter__Box\",\n  componentId: \"xqxd49-0\"\n})([\"padding:16px 0;\"]);\nconst ExpansionPanelDetailsCus = styled(ExpansionPanelDetails).withConfig({\n  displayName: \"helpCenter__ExpansionPanelDetailsCus\",\n  componentId: \"xqxd49-1\"\n})([\"&&&{flex-direction:column;padding:0 16px;}\"]);\nconst ListButton = styled(Button).withConfig({\n  displayName: \"helpCenter__ListButton\",\n  componentId: \"xqxd49-2\"\n})([\"&&&{background:\", \";margin-bottom:16px;.MuiButton-label{justify-content:initial;padding-left:8px;position:relative;&:before{position:absolute;left:-5px;top:-32px;content:'.';color:\", \";display:flex;align-items:center;font-size:36px;}}}\"], grey[300], mpStyle.red);\nexport const HelpCenter = () => {\n  var _stateHelpCenterModel;\n\n  const {\n    actions: actionsHelpCenterModel,\n    state: stateHelpCenterModel\n  } = useStoreModel(HelpCenterModel);\n  const {\n    actions: actionsHelpDetailModel\n  } = useStoreModel(HelpDetailModel);\n  useEffect(() => {\n    actionsHelpCenterModel.getData();\n  }, []);\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: '帮助中心'\n  }), __jsx(Box, null, (_stateHelpCenterModel = stateHelpCenterModel.typeList) === null || _stateHelpCenterModel === void 0 ? void 0 : _stateHelpCenterModel.map(v => {\n    var _stateHelpCenterModel2, _stateHelpCenterModel3;\n\n    return __jsx(ExpansionPanel, {\n      key: `typeList${v === null || v === void 0 ? void 0 : v.id}`\n    }, __jsx(ExpansionPanelSummary, {\n      expandIcon: __jsx(ExpandMore, null)\n    }, v === null || v === void 0 ? void 0 : v.name), __jsx(ExpansionPanelDetailsCus, null, stateHelpCenterModel === null || stateHelpCenterModel === void 0 ? void 0 : (_stateHelpCenterModel2 = stateHelpCenterModel.problemListData) === null || _stateHelpCenterModel2 === void 0 ? void 0 : (_stateHelpCenterModel3 = _stateHelpCenterModel2[v === null || v === void 0 ? void 0 : v.id]) === null || _stateHelpCenterModel3 === void 0 ? void 0 : _stateHelpCenterModel3.map(pro => __jsx(ListButton, {\n      key: `problemListData${pro === null || pro === void 0 ? void 0 : pro.id}`,\n      fullWidth: true,\n      variant: 'text',\n      onClick: async () => {\n        await actionsHelpDetailModel.openClick(_objectSpread({}, pro));\n      }\n    }, pro === null || pro === void 0 ? void 0 : pro.problem))));\n  })), __jsx(HelpDetail, null));\n};","map":null,"metadata":{},"sourceType":"module"}