{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { HeaderTitle } from '../../../../components/HeaderTitle/HeaderTitle';\nimport { SigninInput } from '../../register';\nimport { ll } from '../../../../tools/dealKey';\nimport { modelFactory } from '../../../../ModelAction/modelUtil';\nimport { useStoreModel } from '../../../../ModelAction/useStore';\nimport { fpMergePre } from '../../../../tools/utils';\nimport styled from 'styled-components';\nimport { ButtonLoad } from '../../../../components/ButtonLoad/ButtonLoad';\nimport { doc } from '../../../../graphqlTypes/doc';\nimport { showMessage } from '../../../../components/Message/Message';\nimport router from 'next/router';\nimport { setToken } from '../../../../tools/token';\nimport { setForm } from '../../../../tools/commonAction';\nexport const updatePasswordModel = modelFactory('updatePasswordModel', {\n  form: {\n    oldPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  }\n}, {\n  setForm: setForm,\n  clearForm: (value, option) => {\n    option.setData(fpMergePre({\n      form: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      }\n    }));\n  },\n  submit: async (value, option) => {\n    var _res$updatePassword, _res$updatePassword$u;\n\n    const form = option.data.form;\n\n    if (!form.oldPassword || !form.newPassword) {\n      return showMessage('请填写表单');\n    }\n\n    if (form.newPassword !== form.confirmPassword) {\n      return showMessage('两次密码不一致');\n    }\n\n    const res = await option.mutate(doc.updatePassword, {\n      data: form\n    });\n\n    if (res === null || res === void 0 ? void 0 : (_res$updatePassword = res.updatePassword) === null || _res$updatePassword === void 0 ? void 0 : (_res$updatePassword$u = _res$updatePassword.user) === null || _res$updatePassword$u === void 0 ? void 0 : _res$updatePassword$u.id) {\n      var _res$updatePassword2, _res$updatePassword2$, _res$updatePassword3, _res$updatePassword3$;\n\n      setToken((_res$updatePassword2 = res.updatePassword) === null || _res$updatePassword2 === void 0 ? void 0 : (_res$updatePassword2$ = _res$updatePassword2.authBody) === null || _res$updatePassword2$ === void 0 ? void 0 : _res$updatePassword2$.token);\n      setToken((_res$updatePassword3 = res.updatePassword) === null || _res$updatePassword3 === void 0 ? void 0 : (_res$updatePassword3$ = _res$updatePassword3.authBody) === null || _res$updatePassword3$ === void 0 ? void 0 : _res$updatePassword3$.refreshtoken, 'refreshtoken');\n      showMessage('操作成功');\n    }\n\n    return res;\n  }\n});\nexport const FieldContain = styled.div.withConfig({\n  displayName: \"updatePassword__FieldContain\",\n  componentId: \"sc-132wbin-0\"\n})([\"padding:0 22px;&&&{.MuiFormControl-root{margin-top:10px;}}\"]);\nexport const UpdatePassword = () => {\n  const {\n    state: stateUpdatePasswordModel,\n    actions: actionsUpdatePasswordModel\n  } = useStoreModel(updatePasswordModel);\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: '修改密码',\n    backCall: actionsUpdatePasswordModel.clearForm\n  }), __jsx(FieldContain, null, __jsx(SigninInput, {\n    label: ll('原始密码'),\n    type: 'password',\n    value: stateUpdatePasswordModel.form.oldPassword,\n    onChange: event => actionsUpdatePasswordModel.setForm(['oldPassword', event.target.value])\n  }), __jsx(SigninInput, {\n    label: ll('新密码'),\n    type: 'password',\n    value: stateUpdatePasswordModel.form.newPassword,\n    onChange: event => actionsUpdatePasswordModel.setForm(['newPassword', event.target.value])\n  }), __jsx(SigninInput, {\n    label: ll('确认密码'),\n    type: 'password',\n    value: stateUpdatePasswordModel.form.confirmPassword,\n    onChange: event => actionsUpdatePasswordModel.setForm(['confirmPassword', event.target.value])\n  }), __jsx(ButtonLoad, {\n    style: {\n      marginTop: '20px'\n    },\n    variant: 'contained',\n    color: 'secondary',\n    fullWidth: true,\n    onClick: async () => {\n      var _res$updatePassword4, _res$updatePassword4$;\n\n      const res = await actionsUpdatePasswordModel.submit();\n\n      if (res === null || res === void 0 ? void 0 : (_res$updatePassword4 = res.updatePassword) === null || _res$updatePassword4 === void 0 ? void 0 : (_res$updatePassword4$ = _res$updatePassword4.user) === null || _res$updatePassword4$ === void 0 ? void 0 : _res$updatePassword4$.id) {\n        actionsUpdatePasswordModel.clearForm();\n        router.back();\n      }\n    }\n  }, ll('保存'))));\n};","map":null,"metadata":{},"sourceType":"module"}