{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\components\\\\Message\\\\Message.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Snackbar } from '@material-ui/core';\nimport { amber, blue, common, green, grey, red } from '@material-ui/core/colors';\nimport { originStore, useStoreModel } from '../../ModelAction/useStore';\nimport { fpMergePre } from '../../tools/utils';\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { ls } from '../../tools/dealKey';\nconst typeHelp = {\n  default: `background: ${grey[700]};`,\n  success: `background: ${green[600]};`,\n  warning: `background: ${amber[700]};`,\n  info: `background: ${blue[700]};`,\n  error: `background: ${red[700]};`\n};\n\nconst getType = (type = 'default') => typeHelp[type];\n\nconst CusSnackbar = styled(Snackbar).withConfig({\n  displayName: \"Message__CusSnackbar\",\n  componentId: \"om26s-0\"\n})([\"&&& > div{color:\", \";\", \"}\"], common.white, ({\n  msg_type\n}) => getType(msg_type));\nconst messageModel = modelFactory('messageModel', {\n  open: false,\n  message: '',\n  autoHideDuration: 2000,\n  msg_type: 'default'\n}, {\n  open: (value, option) => {\n    if (typeof value === 'string') {\n      option.setData(fpMergePre({\n        autoHideDuration: 2000,\n        msg_type: 'default',\n        message: value,\n        open: true\n      }));\n    } else {\n      option.setData(fpMergePre(_objectSpread(_objectSpread({\n        autoHideDuration: 2000,\n        msg_type: 'default'\n      }, value), {}, {\n        open: true\n      })));\n    }\n  },\n  onClose: (value, option) => option.setData(fpMergePre({\n    open: false\n  }))\n});\nexport const Message = () => {\n  const {\n    state: mState,\n    actions\n  } = useStoreModel(messageModel);\n  return __jsx(CusSnackbar, {\n    open: mState.open,\n    autoHideDuration: mState.autoHideDuration,\n    message: ls(mState.message),\n    msg_type: mState.msg_type,\n    onClose: () => actions.onClose(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }\n  });\n};\nexport const showMessage = option => {\n  originStore['messageModel'].actions.open(option);\n  return;\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/components/Message/Message.tsx"],"names":["React","styled","Snackbar","amber","blue","common","green","grey","red","originStore","useStoreModel","fpMergePre","modelFactory","ls","typeHelp","default","success","warning","info","error","getType","type","CusSnackbar","white","msg_type","messageModel","open","message","autoHideDuration","value","option","setData","onClose","Message","state","mState","actions","showMessage"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {Snackbar} from '@material-ui/core'\r\nimport {amber, blue, common, green, grey, red} from '@material-ui/core/colors'\r\nimport {SnackbarProps} from '@material-ui/core/Snackbar/Snackbar'\r\nimport {originStore, useStoreModel} from '../../ModelAction/useStore'\r\nimport {fpMergePre} from '../../tools/utils'\r\nimport {modelFactory} from '../../ModelAction/modelUtil'\r\nimport { ls } from '../../tools/dealKey'\r\n\r\nconst typeHelp = {\r\n  default: `background: ${grey[700]};`,\r\n  success: `background: ${green[600]};`,\r\n  warning: `background: ${amber[700]};`,\r\n  info: `background: ${blue[700]};`,\r\n  error: `background: ${red[700]};`,\r\n}\r\nconst getType = (type = 'default') => (typeHelp as any)[type]\r\n\r\ntype MessageProps = Partial<SnackbarProps & {\r\n  msg_type: 'default' | 'success' | 'info' | 'warning' | 'error' | string\r\n}>\r\n\r\nconst CusSnackbar = styled(Snackbar)<MessageProps>`\r\n  &&& > div {\r\n    color: ${common.white};\r\n    ${({msg_type}) => getType(msg_type)}\r\n  }\r\n`\r\n\r\nconst messageModel = modelFactory('messageModel', {\r\n  open: false,\r\n  message: '',\r\n  autoHideDuration: 2000,\r\n  msg_type: 'default',\r\n} as MessageProps, {\r\n  open: (value: string | MessageProps, option) => {\r\n    if (typeof value === 'string') {\r\n      option.setData(fpMergePre({\r\n        autoHideDuration: 2000,\r\n        msg_type: 'default',\r\n        message: value,\r\n        open: true,\r\n      }))\r\n    } else {\r\n      option.setData(fpMergePre({\r\n        autoHideDuration: 2000,\r\n        msg_type: 'default',\r\n        ...value,\r\n        open: true,\r\n      }))\r\n    }\r\n  },\r\n  onClose: (value, option) => option.setData(fpMergePre({\r\n    open: false,\r\n  })),\r\n})\r\n\r\nexport const Message = () => {\r\n  const {state: mState, actions} = useStoreModel(messageModel)\r\n  return <CusSnackbar\r\n      open={mState.open}\r\n      autoHideDuration={mState.autoHideDuration}\r\n      message={ls(mState.message as string)}\r\n      msg_type={mState.msg_type}\r\n      onClose={() => actions.onClose()}\r\n  />\r\n}\r\n\r\nexport const showMessage = (option: string | MessageProps) => {\r\n  originStore['messageModel'].actions.open(option)\r\n  return\r\n}\r\n"]},"metadata":{},"sourceType":"module"}