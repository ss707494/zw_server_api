{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport styled from 'styled-components';\nimport { useStoreModel } from '../../ModelAction/useStore';\nimport { dealMaybeNumber, dealMoney, dealUrlQuery, fpMerge, fpMergePre } from '../../tools/utils';\nimport { groupProductModel } from './[id]';\nimport { ShopCartProductBox } from \"../cart/CartProduct\";\nimport { dealImgUrl } from \"../../tools/img\";\nimport { ProductPrice } from \"../../components/ProductItem/ProductItem\";\nimport { IconButton, MenuItem, TextField } from \"@material-ui/core\";\nimport { ls } from \"../../tools/dealKey\";\nimport { Space } from \"../../components/Box/Box\";\nimport { getPickUpTypeName, PickUpTypeEnum } from \"../../ss_common/enum\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { AddressBox, CardBox, ShopTitle, ShopTotal } from \"../cart/orderPage\";\nimport { shopCartModel } from \"../cart\";\nimport { SelectAddress, selectAddressModel } from \"../cart/components/SelectAddress\";\nimport { SelectCard, selectCardModel } from \"../cart/components/SelectCard\";\nimport { ButtonLoad } from \"../../components/ButtonLoad/ButtonLoad\";\nimport { mpStyle } from \"../../style/common\";\nimport { showMessage } from '../../components/Message/Message';\nimport { useRouter } from 'next/router';\nexport const groupOrderPageModel = modelFactory('orderPageModel', {\n  show: false\n}, {\n  open: (value, option) => {\n    option.setData(fpMergePre({\n      show: true\n    }));\n  }\n});\nconst OrderPageBox = styled.div.withConfig({\n  displayName: \"groupOrderPage__OrderPageBox\",\n  componentId: \"bhof7w-0\"\n})([\"position:fixed;top:0;bottom:0;left:0;right:0;background:white;> footer{position:fixed;bottom:0;box-sizing:border-box;box-shadow:\", \";width:100vw;text-align:right;}\"], mpStyle.shadow[\"1\"]);\nexport const GroupOrderPage = () => {\n  var _stateSCM$payCardList, _product$priceOut, _stateSCM$freightConf, _product$img, _product$img$;\n\n  const router = useRouter();\n  const {\n    state: stateOrderPageModel\n  } = useStoreModel(groupOrderPageModel);\n  const {\n    actions: actionsGroupProduct,\n    state: stateGroupProduct\n  } = useStoreModel(groupProductModel);\n  const product = stateGroupProduct.product;\n  const {\n    state: stateSCM,\n    actions: actionsSCM\n  } = useStoreModel(shopCartModel);\n  useEffect(() => {\n    if (!stateSCM.user.id) {\n      actionsSCM.getOrderInfo();\n    }\n  }, []);\n  const {\n    actions: actionsSAM\n  } = useStoreModel(selectAddressModel);\n  const {\n    actions: actionsSelectCard\n  } = useStoreModel(selectCardModel);\n  const addressData = stateSCM.dealAddressData(stateSCM);\n  const cardData = ((_stateSCM$payCardList = stateSCM.payCardList) === null || _stateSCM$payCardList === void 0 ? void 0 : _stateSCM$payCardList.find(v => v.id === stateSCM.form.paymentMethodCardId)) || {};\n  const productTotal = ((_product$priceOut = product.priceOut) !== null && _product$priceOut !== void 0 ? _product$priceOut : 0) * stateGroupProduct.selectNum;\n  const transportationCosts = stateSCM.form.pickUpType === PickUpTypeEnum.Delivery && stateSCM.freightConfig.reduce((pre, cur) => {\n    if (pre > parseFloat(cur === null || cur === void 0 ? void 0 : cur.freightPay) && productTotal < parseFloat(cur === null || cur === void 0 ? void 0 : cur.orderMax)) {\n      return parseFloat(cur === null || cur === void 0 ? void 0 : cur.freightPay);\n    } else {\n      return pre;\n    }\n  }, parseFloat((_stateSCM$freightConf = stateSCM.freightConfig[stateSCM.freightConfig.length - 1]) === null || _stateSCM$freightConf === void 0 ? void 0 : _stateSCM$freightConf.freightPay)) || 0;\n  const actuallyPaid = productTotal + transportationCosts + dealMaybeNumber(stateSCM.form.saleTax);\n  const generateCoin = actuallyPaid * 0.01;\n  return stateOrderPageModel.show && __jsx(OrderPageBox, null, __jsx(ShopCartProductBox, {\n    style: {\n      padding: '20px'\n    }\n  }, __jsx(\"img\", {\n    src: dealImgUrl(product === null || product === void 0 ? void 0 : (_product$img = product.img) === null || _product$img === void 0 ? void 0 : (_product$img$ = _product$img[0]) === null || _product$img$ === void 0 ? void 0 : _product$img$.url),\n    alt: \"\"\n  }), __jsx(\"main\", null, product === null || product === void 0 ? void 0 : product.name, product === null || product === void 0 ? void 0 : product.weight, product === null || product === void 0 ? void 0 : product.unit), __jsx(\"section\", null, product === null || product === void 0 ? void 0 : product.remark), __jsx(\"footer\", null, __jsx(ProductPrice, {\n    product: product\n  }), __jsx(\"span\", null, stateGroupProduct.selectNum, ls('份')))), __jsx(TextField, {\n    style: {\n      margin: '16px',\n      width: 'calc(100vw - 32px)'\n    },\n    fullWidth: true,\n    label: ls('运送方式'),\n    select: true,\n    value: stateSCM.form.pickUpType,\n    onChange: event => {\n      actionsSCM.setForm(['pickUpType', event.target.value]);\n      actionsSCM.setForm(['addressId', stateSCM.initAddressId(fpMerge(stateSCM, {\n        form: {\n          pickUpType: event.target.value\n        }\n      }))]);\n    }\n  }, __jsx(MenuItem, {\n    value: PickUpTypeEnum.Self\n  }, ls(getPickUpTypeName(PickUpTypeEnum.Self))), __jsx(MenuItem, {\n    value: PickUpTypeEnum.Delivery\n  }, ls(getPickUpTypeName(PickUpTypeEnum.Delivery)))), __jsx(AddressBox, null, __jsx(\"main\", null, __jsx(\"header\", null, `${addressData.combineAddress}`), __jsx(\"footer\", null, `${addressData.name} ${addressData.contactInformation}`)), __jsx(\"aside\", null, __jsx(IconButton, {\n    onClick: async () => {\n      const res = await actionsSAM.openClick();\n\n      if (res) {\n        actionsSCM.setForm(['addressId', res]);\n      }\n    }\n  }, __jsx(ChevronRightIcon, null)))), __jsx(ShopTitle, null, __jsx(Space, {\n    w: 20\n  }), ls('付款方式')), __jsx(CardBox, null, __jsx(\"header\", null, cardData.name), __jsx(\"footer\", null, cardData.number), __jsx(\"aside\", null, __jsx(IconButton, {\n    onClick: async () => {\n      const res = await actionsSelectCard.openClick();\n\n      if (res) {\n        actionsSCM.setForm(['paymentMethodCardId', res]);\n      }\n    }\n  }, __jsx(ChevronRightIcon, null)))), __jsx(SelectAddress, null), __jsx(SelectCard, null), __jsx(ShopTotal, null, __jsx(\"header\", null, ls('购物车总计')), __jsx(\"footer\", null, dealMoney(productTotal))), transportationCosts > 0 && __jsx(ShopTotal, null, __jsx(\"header\", null, ls('运费')), __jsx(\"footer\", null, dealMoney(transportationCosts))), __jsx(ShopTotal, null, __jsx(\"header\", null, ls('份数折扣')), __jsx(\"footer\", null, stateGroupProduct.numDiscount)), __jsx(ShopTotal, null, __jsx(\"header\", null, ls('成团折上折')), __jsx(\"footer\", null, stateGroupProduct.groupDiscount)), __jsx(ShopTotal, {\n    style: {\n      fontSize: '18px'\n    }\n  }, __jsx(\"header\", null, ls('订单总额')), __jsx(\"footer\", null, dealMoney(actuallyPaid))), __jsx(Space, {\n    h: 60\n  }), __jsx(\"footer\", null, __jsx(ButtonLoad, {\n    variant: 'contained',\n    color: 'secondary',\n    onClick: async () => {\n      var _stateSCM$user$userIn, _res$saveGroupOrder;\n\n      const res = await actionsGroupProduct.submit({\n        orderInfoItemInput: _objectSpread(_objectSpread({}, stateSCM.form), {}, {\n          generateCoin,\n          actuallyPaid,\n          transportationCosts,\n          subtotal: productTotal,\n          currentUserLevel: (_stateSCM$user$userIn = stateSCM.user.userInfo) === null || _stateSCM$user$userIn === void 0 ? void 0 : _stateSCM$user$userIn.userLevel,\n          rOrderProduct: [{\n            count: stateGroupProduct.selectNum,\n            productId: product === null || product === void 0 ? void 0 : product.id,\n            product\n          }]\n        })\n      });\n\n      if (res === null || res === void 0 ? void 0 : (_res$saveGroupOrder = res.saveGroupOrder) === null || _res$saveGroupOrder === void 0 ? void 0 : _res$saveGroupOrder.id) {\n        var _res$saveGroupOrder2;\n\n        showMessage('操作成功 将前往付款'); // await router.replace('/cart/result')\n\n        const _query = dealUrlQuery({\n          orderId: res === null || res === void 0 ? void 0 : (_res$saveGroupOrder2 = res.saveGroupOrder) === null || _res$saveGroupOrder2 === void 0 ? void 0 : _res$saveGroupOrder2.id\n        });\n\n        await router.replace(`/pay${_query}`, `/pay${_query}`);\n        actionsSCM.clearData();\n        actionsSCM.getList();\n      }\n    }\n  }, ls('提交订单')))) || null;\n};","map":null,"metadata":{},"sourceType":"module"}