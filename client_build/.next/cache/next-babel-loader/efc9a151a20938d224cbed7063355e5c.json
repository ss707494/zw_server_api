{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\me\\\\myCreditCard\\\\list.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { fpMergePre } from '../../../tools/utils';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nvar myCreditCardListModel = modelFactory('myCreditCardListModel', {\n  list: []\n}, {\n  getList: function getList(value, option) {\n    var res;\n    return _regeneratorRuntime.async(function getList$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(option.query(doc.payCardListOneUser));\n\n          case 2:\n            res = _context.sent;\n            option.setData(fpMergePre({\n              list: res === null || res === void 0 ? void 0 : res.payCardListOneUser\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport var MyCreditCardList = function MyCreditCardList() {\n  var _useStoreModel = useStoreModel(myCreditCardListModel),\n      stateMCC = _useStoreModel.state,\n      actionsMCC = _useStoreModel.actions;\n\n  useEffect(function () {\n    actionsMCC.getList();\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }\n  }, __jsx(HeaderTitle, {\n    title: '我的信用卡',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }), \"MyCreditCardList\");\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/me/myCreditCard/list.tsx"],"names":["React","useEffect","HeaderTitle","modelFactory","doc","fpMergePre","useStoreModel","myCreditCardListModel","list","getList","value","option","query","payCardListOneUser","res","setData","MyCreditCardList","stateMCC","state","actionsMCC","actions"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,QAA0B,6CAA1B;AACA,SAAQC,YAAR,QAA2B,gCAA3B;AACA,SAAQC,GAAR,QAAkB,2BAAlB;AACA,SAAQC,UAAR,QAAyB,sBAAzB;AACA,SAAQC,aAAR,QAA4B,+BAA5B;AAEA,IAAMC,qBAAqB,GAAGJ,YAAY,CAAC,uBAAD,EAA0B;AAClEK,EAAAA,IAAI,EAAE;AAD4D,CAA1B,EAEvC;AACDC,EAAAA,OAAO,EAAE,iBAAOC,KAAP,EAAcC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACWA,MAAM,CAACC,KAAP,CAAaR,GAAG,CAACS,kBAAjB,CADX;;AAAA;AACDC,YAAAA,GADC;AAEPH,YAAAA,MAAM,CAACI,OAAP,CAAeV,UAAU,CAAC;AACxBG,cAAAA,IAAI,EAAEM,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAED;AADa,aAAD,CAAzB;;AAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADR,CAFuC,CAA1C;AAYA,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA,uBACWV,aAAa,CAACC,qBAAD,CADxB;AAAA,MACtBU,QADsB,kBAC7BC,KAD6B;AAAA,MACHC,UADG,kBACZC,OADY;;AAEpCnB,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,UAAU,CAACV,OAAX;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,WAAD;AACI,IAAA,KAAK,EAAE,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,qBAAP;AAMD,CAXM","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {HeaderTitle} from '../../../components/HeaderTitle/HeaderTitle'\r\nimport {modelFactory} from '../../../ModelAction/modelUtil'\r\nimport {doc} from '../../../graphqlTypes/doc'\r\nimport {fpMergePre} from '../../../tools/utils'\r\nimport {useStoreModel} from '../../../ModelAction/useStore'\r\n\r\nconst myCreditCardListModel = modelFactory('myCreditCardListModel', {\r\n  list: [],\r\n}, {\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.payCardListOneUser)\r\n    option.setData(fpMergePre({\r\n      list: res?.payCardListOneUser\r\n    }))\r\n  },\r\n\r\n})\r\n\r\nexport const MyCreditCardList = () => {\r\n  const {state: stateMCC, actions: actionsMCC} = useStoreModel(myCreditCardListModel)\r\n  useEffect(() => {\r\n    actionsMCC.getList()\r\n  }, [])\r\n  return <div>\r\n    <HeaderTitle\r\n        title={'我的信用卡'}\r\n    />\r\n    MyCreditCardList\r\n  </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}