{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport 'cross-fetch/polyfill';\nimport { getToken, setToken } from '../tools/token';\nimport Router from 'next/router';\nimport ApolloClient from 'apollo-boost';\nimport { ssLog } from '../tools/global';\nimport { doc } from '../graphqlTypes/doc';\nimport { showMessage } from '../components/Message/Message';\nexport var getClient = function getClient() {\n  var request = function request(operation) {\n    // if (operation.variables) {\n    //   operation.variables = JSON.parse(JSON.stringify(operation.variables), omitTypename)\n    // }\n    operation.setContext(function (_ref) {\n      var _ref$headers = _ref.headers,\n          headers = _ref$headers === void 0 ? {} : _ref$headers;\n      return {\n        headers: _objectSpread({}, headers, {\n          // 后台万能权限\n          Authorization: getToken()\n        })\n      };\n    });\n  };\n\n  var refreshToken = function refreshToken() {\n    graphQLQuery()(doc.refreshToken, {\n      data: getToken('refreshtoken')\n    }).then(function (res) {\n      var _res$data, _res$data$refreshToke;\n\n      if ((_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$refreshToke = _res$data.refreshToken) === null || _res$data$refreshToke === void 0 ? void 0 : _res$data$refreshToke.token) {\n        var _res$data2, _res$data2$refreshTok, _res$data3, _res$data3$refreshTok;\n\n        setToken((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$refreshTok = _res$data2.refreshToken) === null || _res$data2$refreshTok === void 0 ? void 0 : _res$data2$refreshTok.token);\n        setToken((_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$refreshTok = _res$data3.refreshToken) === null || _res$data3$refreshTok === void 0 ? void 0 : _res$data3$refreshTok.refreshtoken, 'refreshtoken');\n        showMessage({\n          message: '登录超时,刷新登录信息'\n        });\n        Router.reload();\n      } else {\n        showMessage({\n          message: '请重新登录'\n        });\n        Router.push('/login');\n      }\n    })[\"catch\"](function (err) {\n      ssLog(err);\n      showMessage({\n        message: '请重新登录'\n      });\n      Router.push('/login');\n    });\n  };\n\n  var onError = function onError(_ref2) {\n    var response = _ref2.response,\n        operation = _ref2.operation,\n        graphQLErrors = _ref2.graphQLErrors,\n        networkError = _ref2.networkError;\n\n    // console.log(response)\n    // console.log(operation)\n    if (graphQLErrors) {\n      graphQLErrors.forEach(function (_ref3) {\n        var message = _ref3.message,\n            locations = _ref3.locations,\n            path = _ref3.path,\n            extensions = _ref3.extensions;\n        ssLog(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n\n        if ((extensions === null || extensions === void 0 ? void 0 : extensions.code) === 'UNAUTHENTICATED') {\n          if (message.includes('first')) {\n            refreshToken();\n          } else {\n            showMessage({\n              message: '请重新登录'\n            });\n            Router.push('/login');\n          }\n        }\n\n        if (message.includes('Unexpected error')) {\n          showMessage({\n            message: message.split('\"')[1],\n            msg_type: 'error'\n          });\n        } else {\n          showMessage({\n            message: message\n          });\n        }\n      });\n    }\n\n    if (networkError) {\n      var _networkError$result;\n\n      var errMsg = 'bodyText' in networkError ? networkError === null || networkError === void 0 ? void 0 : networkError.bodyText : 'result' in networkError ? networkError === null || networkError === void 0 ? void 0 : (_networkError$result = networkError.result) === null || _networkError$result === void 0 ? void 0 : _networkError$result.error : '';\n      ssLog(\"[Network error]: \".concat(errMsg));\n\n      if ('statusCode' in networkError && (networkError === null || networkError === void 0 ? void 0 : networkError.statusCode) === 401) {\n        if (errMsg.includes('first') && getToken('refreshtoken')) {\n          refreshToken();\n        } else {\n          showMessage({\n            message: '请重新登录'\n          });\n          Router.push('/login');\n        }\n      }\n    }\n  };\n\n  return new ApolloClient({\n    // link: httpLink,\n    uri: process.env.client_api_uri || 'http://localhost:4464/type__graphql/api',\n    request: request,\n    onError: onError\n  });\n};\nvar defaultClient = getClient(); // const dealParams = ((params: any) => ({\n//   data: params,\n// }))\n\nvar dealParams = function dealParams(params) {\n  return params;\n};\n\nexport var graphQLQuery = function graphQLQuery() {\n  var client = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultClient;\n  return function _callee(query, params, option) {\n    var _option$dealParamsIn;\n\n    var _dealParamsIn;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _dealParamsIn = (_option$dealParamsIn = option === null || option === void 0 ? void 0 : option.dealParamsIn) !== null && _option$dealParamsIn !== void 0 ? _option$dealParamsIn : dealParams;\n            return _context.abrupt(\"return\", client.query(_objectSpread({\n              fetchPolicy: 'network-only',\n              query: query,\n              variables: _objectSpread({}, _dealParamsIn ? _dealParamsIn(params) : params)\n            }, option)));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var graphQLMutate = function graphQLMutate() {\n  var client = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultClient;\n  return function _callee2(mutation, params, option) {\n    var _option$dealParamsIn2;\n\n    var _dealParamsIn;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _dealParamsIn = (_option$dealParamsIn2 = option === null || option === void 0 ? void 0 : option.dealParamsIn) !== null && _option$dealParamsIn2 !== void 0 ? _option$dealParamsIn2 : dealParams;\n            return _context2.abrupt(\"return\", client.mutate(_objectSpread({\n              mutation: mutation,\n              variables: _objectSpread({}, _dealParamsIn ? _dealParamsIn(params) : params)\n            }, option)));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar serverClient = function serverClient() {\n  return new ApolloClient({\n    // link: httpLink,\n    uri: process.env.client_api_uri || 'http://localhost:4464/type__graphql/api'\n  });\n};\n\nexport var serverQuery = function serverQuery(query, params, option) {\n  var _await$graphQLQuery;\n\n  return _regeneratorRuntime.async(function serverQuery$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(graphQLQuery(serverClient())(query, params, option));\n\n        case 2:\n          _context3.t1 = _await$graphQLQuery = _context3.sent;\n          _context3.t0 = _context3.t1 === null;\n\n          if (_context3.t0) {\n            _context3.next = 6;\n            break;\n          }\n\n          _context3.t0 = _await$graphQLQuery === void 0;\n\n        case 6:\n          if (!_context3.t0) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.t2 = void 0;\n          _context3.next = 11;\n          break;\n\n        case 10:\n          _context3.t2 = _await$graphQLQuery.data;\n\n        case 11:\n          return _context3.abrupt(\"return\", _context3.t2);\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var serverMutate = function serverMutate(mutation, params, option) {\n  var _await$graphQLMutate;\n\n  return _regeneratorRuntime.async(function serverMutate$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(graphQLMutate(serverClient())(mutation, params, option));\n\n        case 2:\n          _context4.t1 = _await$graphQLMutate = _context4.sent;\n          _context4.t0 = _context4.t1 === null;\n\n          if (_context4.t0) {\n            _context4.next = 6;\n            break;\n          }\n\n          _context4.t0 = _await$graphQLMutate === void 0;\n\n        case 6:\n          if (!_context4.t0) {\n            _context4.next = 10;\n            break;\n          }\n\n          _context4.t2 = void 0;\n          _context4.next = 11;\n          break;\n\n        case 10:\n          _context4.t2 = _await$graphQLMutate.data;\n\n        case 11:\n          return _context4.abrupt(\"return\", _context4.t2);\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/client/index.ts"],"names":["getToken","setToken","Router","ApolloClient","ssLog","doc","showMessage","getClient","request","operation","setContext","headers","Authorization","refreshToken","graphQLQuery","data","then","res","token","refreshtoken","message","reload","push","err","onError","response","graphQLErrors","networkError","forEach","locations","path","extensions","code","includes","split","msg_type","errMsg","bodyText","result","error","statusCode","uri","process","env","client_api_uri","defaultClient","dealParams","params","client","query","option","_dealParamsIn","dealParamsIn","fetchPolicy","variables","graphQLMutate","mutation","mutate","serverClient","serverQuery","serverMutate"],"mappings":"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","sourcesContent":["import 'cross-fetch/polyfill'\r\nimport {getToken, setToken} from '../tools/token'\r\nimport {Operation} from 'apollo-link'\r\nimport {ErrorLink} from 'apollo-link-error'\r\nimport Router from 'next/router'\r\nimport ApolloClient from 'apollo-boost'\r\nimport {ssLog} from '../tools/global'\r\nimport {DocumentNode} from 'graphql'\r\nimport {doc} from '../graphqlTypes/doc'\r\nimport {showMessage} from '../components/Message/Message'\r\n\r\nexport const getClient = () => {\r\n\r\n  const request: (operation: Operation) => Promise<void> | void = (operation) => {\r\n    // if (operation.variables) {\r\n    //   operation.variables = JSON.parse(JSON.stringify(operation.variables), omitTypename)\r\n    // }\r\n    operation.setContext(({headers = {}}) => ({\r\n      headers: {\r\n        ...headers,\r\n        // 后台万能权限\r\n        Authorization: getToken(),\r\n      },\r\n    }))\r\n  }\r\n\r\n  const refreshToken = () => {\r\n    graphQLQuery()(doc.refreshToken, {\r\n      data: getToken('refreshtoken'),\r\n    }).then(res => {\r\n      if (res.data?.refreshToken?.token) {\r\n        setToken(res.data?.refreshToken?.token)\r\n        setToken(res.data?.refreshToken?.refreshtoken, 'refreshtoken')\r\n        showMessage({message: '登录超时,刷新登录信息'})\r\n        Router.reload()\r\n      } else {\r\n        showMessage({message: '请重新登录'})\r\n        Router.push('/login')\r\n      }\r\n    }).catch(err => {\r\n      ssLog(err)\r\n      showMessage({message: '请重新登录'})\r\n      Router.push('/login')\r\n    })\r\n  }\r\n  const onError: ErrorLink.ErrorHandler = ({response, operation, graphQLErrors, networkError}) => {\r\n    // console.log(response)\r\n    // console.log(operation)\r\n    if (graphQLErrors) {\r\n      graphQLErrors.forEach(({message, locations, path, extensions}) => {\r\n        ssLog(\r\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\r\n        )\r\n        if (extensions?.code === 'UNAUTHENTICATED') {\r\n          if (message.includes('first')) {\r\n            refreshToken()\r\n          } else {\r\n            showMessage({message: '请重新登录'})\r\n            Router.push('/login')\r\n          }\r\n        }\r\n        if (message.includes('Unexpected error')) {\r\n          showMessage({\r\n            message: message.split('\"')[1],\r\n            msg_type: 'error',\r\n          })\r\n        } else {\r\n          showMessage({message})\r\n        }\r\n      })\r\n    }\r\n\r\n    if (networkError) {\r\n      const errMsg = ('bodyText' in networkError) ? networkError?.bodyText : ('result' in networkError) ? networkError?.result?.error : ''\r\n      ssLog(`[Network error]: ${errMsg}`)\r\n      if ('statusCode' in networkError && networkError?.statusCode === 401) {\r\n        if (errMsg.includes('first') && getToken('refreshtoken')) {\r\n          refreshToken()\r\n        } else {\r\n          showMessage({message: '请重新登录'})\r\n          Router.push('/login')\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return new ApolloClient({\r\n    // link: httpLink,\r\n    uri: process.env.client_api_uri || 'http://localhost:4464/type__graphql/api',\r\n    request,\r\n    onError,\r\n  })\r\n}\r\n\r\nconst defaultClient = getClient()\r\n\r\n// const dealParams = ((params: any) => ({\r\n//   data: params,\r\n// }))\r\nconst dealParams = ((params: any) => params)\r\n\r\nexport const graphQLQuery = (client = defaultClient) => async (query: DocumentNode, params: any, option?: any) => {\r\n  const _dealParamsIn = option?.dealParamsIn ?? dealParams\r\n  return client.query({\r\n    fetchPolicy: 'network-only',\r\n    query,\r\n    variables: {\r\n      ...(_dealParamsIn ? _dealParamsIn(params) : params),\r\n    },\r\n    ...option,\r\n  })\r\n}\r\n\r\nexport const graphQLMutate = (client = defaultClient) => async (mutation: any, params: any, option?: any) => {\r\n  const _dealParamsIn = option?.dealParamsIn ?? dealParams\r\n  return client.mutate({\r\n    mutation,\r\n    variables: {\r\n      ...(_dealParamsIn ? _dealParamsIn(params) : params),\r\n    },\r\n    ...option,\r\n  })\r\n}\r\n\r\nconst serverClient = () => new ApolloClient({\r\n  // link: httpLink,\r\n  uri: process.env.client_api_uri || 'http://localhost:4464/type__graphql/api',\r\n})\r\n\r\nexport const serverQuery = async (query: any, params: any, option?: any) => (await graphQLQuery(serverClient())(query, params, option))?.data\r\n\r\nexport const serverMutate = async (mutation: any, params: any, option?: any) => (await graphQLMutate(serverClient())(mutation, params, option))?.data\r\n\r\n"]},"metadata":{},"sourceType":"module"}