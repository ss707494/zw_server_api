{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\home\\\\components\\\\ThemeSelection\\\\ThemeSelection.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../../../ModelAction/modelUtil';\nimport { doc } from '../../../../graphqlTypes/doc';\nimport { fpMergePre } from '../../../../tools/utils';\nimport { useStoreModel } from '../../../../ModelAction/useStore';\nimport { ProductItemOneRow } from '../../../../components/ProductItem/ProductItem';\nimport { DictTypeEnum } from '../../../../ss_common/enum';\nconst themeSelectionModel = modelFactory('themeSelectionModel', {\n  themeSelectionData: [],\n  productList: []\n}, {\n  getData: async (value, option) => {\n    var _res$getDataConfig$va, _res$getDataConfig, _res$getDataConfig$va2, _res$getDataConfig$va3, _res$getDataConfig$va4, _res$limitTimeData, _res$limitTimeData$va, _productRes$productLi, _productRes$productLi2;\n\n    const res = await option.query(doc.getDataConfig, {\n      data: {\n        type: DictTypeEnum.PromotionThemeSelect\n      }\n    });\n    const productRes = await option.query(doc.productListByIds, {\n      ids: (_res$getDataConfig$va = res === null || res === void 0 ? void 0 : (_res$getDataConfig = res.getDataConfig) === null || _res$getDataConfig === void 0 ? void 0 : (_res$getDataConfig$va2 = _res$getDataConfig.value) === null || _res$getDataConfig$va2 === void 0 ? void 0 : (_res$getDataConfig$va3 = _res$getDataConfig$va2.list) === null || _res$getDataConfig$va3 === void 0 ? void 0 : (_res$getDataConfig$va4 = _res$getDataConfig$va3[0]) === null || _res$getDataConfig$va4 === void 0 ? void 0 : _res$getDataConfig$va4.selectProductList) !== null && _res$getDataConfig$va !== void 0 ? _res$getDataConfig$va : []\n    });\n    option.setData(fpMergePre({\n      themeSelectionData: (res === null || res === void 0 ? void 0 : (_res$limitTimeData = res.limitTimeData) === null || _res$limitTimeData === void 0 ? void 0 : (_res$limitTimeData$va = _res$limitTimeData.value) === null || _res$limitTimeData$va === void 0 ? void 0 : _res$limitTimeData$va.list) || [],\n      productList: (_productRes$productLi = productRes === null || productRes === void 0 ? void 0 : (_productRes$productLi2 = productRes.productListByIds) === null || _productRes$productLi2 === void 0 ? void 0 : _productRes$productLi2.list) !== null && _productRes$productLi !== void 0 ? _productRes$productLi : []\n    }));\n  }\n});\nexport const ThemeSelection = () => {\n  const {\n    state: statePromotionFlashSale,\n    actions: actionsPromotionFlashSale\n  } = useStoreModel(themeSelectionModel);\n  useEffect(() => {\n    actionsPromotionFlashSale.getData();\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }\n  }, statePromotionFlashSale.productList.map(product => __jsx(ProductItemOneRow, {\n    key: `ProductItemOneRow_${product.id}`,\n    product: product,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 57\n    }\n  })));\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/home/components/ThemeSelection/ThemeSelection.tsx"],"names":["React","useEffect","modelFactory","doc","fpMergePre","useStoreModel","ProductItemOneRow","DictTypeEnum","themeSelectionModel","themeSelectionData","productList","getData","value","option","res","query","getDataConfig","data","type","PromotionThemeSelect","productRes","productListByIds","ids","list","selectProductList","setData","limitTimeData","ThemeSelection","state","statePromotionFlashSale","actions","actionsPromotionFlashSale","map","product","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,YAAR,QAA2B,mCAA3B;AACA,SAAQC,GAAR,QAAkB,8BAAlB;AACA,SAAQC,UAAR,QAAyB,yBAAzB;AACA,SAAQC,aAAR,QAA4B,kCAA5B;AAEA,SAAQC,iBAAR,QAAgC,gDAAhC;AACA,SAAQC,YAAR,QAA2B,4BAA3B;AAEA,MAAMC,mBAAmB,GAAGN,YAAY,CAAC,qBAAD,EAAwB;AAC9DO,EAAAA,kBAAkB,EAAE,EAD0C;AAE9DC,EAAAA,WAAW,EAAE;AAFiD,CAAxB,EAGrC;AACDC,EAAAA,OAAO,EAAE,OAAOC,KAAP,EAAcC,MAAd,KAAyB;AAAA;;AAChC,UAAMC,GAAG,GAAG,MAAMD,MAAM,CAACE,KAAP,CAAaZ,GAAG,CAACa,aAAjB,EAAgC;AAChDC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEX,YAAY,CAACY;AADf;AAD0C,KAAhC,CAAlB;AAKA,UAAMC,UAAU,GAAG,MAAMP,MAAM,CAACE,KAAP,CAAaZ,GAAG,CAACkB,gBAAjB,EAAmC;AAC1DC,MAAAA,GAAG,2BAAER,GAAF,aAAEA,GAAF,6CAAEA,GAAG,CAAEE,aAAP,iFAAE,mBAAoBJ,KAAtB,qFAAE,uBAA2BW,IAA7B,qFAAE,uBAAkC,CAAlC,CAAF,2DAAE,uBAAsCC,iBAAxC,yEAA6D;AADN,KAAnC,CAAzB;AAGAX,IAAAA,MAAM,CAACY,OAAP,CAAerB,UAAU,CAAC;AACxBK,MAAAA,kBAAkB,EAAE,CAAAK,GAAG,SAAH,IAAAA,GAAG,WAAH,kCAAAA,GAAG,CAAEY,aAAL,mGAAoBd,KAApB,gFAA2BW,IAA3B,KAAmC,EAD/B;AAExBb,MAAAA,WAAW,2BAAEU,UAAF,aAAEA,UAAF,iDAAEA,UAAU,CAAEC,gBAAd,2DAAE,uBAA8BE,IAAhC,yEAAwC;AAF3B,KAAD,CAAzB;AAID;AAdA,CAHqC,CAAxC;AAqBA,OAAO,MAAMI,cAAc,GAAG,MAAM;AAClC,QAAM;AAACC,IAAAA,KAAK,EAAEC,uBAAR;AAAiCC,IAAAA,OAAO,EAAEC;AAA1C,MAAuE1B,aAAa,CAACG,mBAAD,CAA1F;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,yBAAyB,CAACpB,OAA1B;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACJkB,uBAAuB,CAACnB,WAAxB,CAAoCsB,GAApC,CAAwCC,OAAO,IAAI,MAAC,iBAAD;AAChD,IAAA,GAAG,EAAG,qBAAoBA,OAAO,CAACC,EAAG,EADW;AAEhD,IAAA,OAAO,EAAED,OAFuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnD,CADI,CAAP;AAMD,CAZM","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {modelFactory} from '../../../../ModelAction/modelUtil'\r\nimport {doc} from '../../../../graphqlTypes/doc'\r\nimport {fpMergePre} from '../../../../tools/utils'\r\nimport {useStoreModel} from '../../../../ModelAction/useStore'\r\nimport {DataConfigItemInput, Product} from '../../../../graphqlTypes/types'\r\nimport {ProductItemOneRow} from '../../../../components/ProductItem/ProductItem'\r\nimport {DictTypeEnum} from '../../../../ss_common/enum'\r\n\r\nconst themeSelectionModel = modelFactory('themeSelectionModel', {\r\n  themeSelectionData: [] as any[],\r\n  productList: [] as Product[],\r\n}, {\r\n  getData: async (value, option) => {\r\n    const res = await option.query(doc.getDataConfig, {\r\n      data: {\r\n        type: DictTypeEnum.PromotionThemeSelect,\r\n      } as DataConfigItemInput,\r\n    })\r\n    const productRes = await option.query(doc.productListByIds, {\r\n      ids: res?.getDataConfig?.value?.list?.[0]?.selectProductList ?? [],\r\n    })\r\n    option.setData(fpMergePre({\r\n      themeSelectionData: res?.limitTimeData?.value?.list || [],\r\n      productList: productRes?.productListByIds?.list ?? [],\r\n    }))\r\n  },\r\n\r\n})\r\n\r\nexport const ThemeSelection = () => {\r\n  const {state: statePromotionFlashSale, actions: actionsPromotionFlashSale} = useStoreModel(themeSelectionModel)\r\n  useEffect(() => {\r\n    actionsPromotionFlashSale.getData()\r\n  }, [])\r\n\r\n  return <div>\r\n    {statePromotionFlashSale.productList.map(product => <ProductItemOneRow\r\n        key={`ProductItemOneRow_${product.id}`}\r\n        product={product}\r\n    />)}\r\n  </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}