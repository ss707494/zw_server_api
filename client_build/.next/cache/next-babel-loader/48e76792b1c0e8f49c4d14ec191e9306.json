{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\components\\\\Message\\\\Message.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Snackbar } from '@material-ui/core';\nimport { amber, blue, common, green, grey, red } from '@material-ui/core/colors';\nimport { originStore, useStoreModel } from '../../ModelAction/useStore';\nimport { fpMergePre } from '../../tools/utils';\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { ls } from '../../tools/dealKey';\nvar typeHelp = {\n  \"default\": \"background: \".concat(grey[700], \";\"),\n  success: \"background: \".concat(green[600], \";\"),\n  warning: \"background: \".concat(amber[700], \";\"),\n  info: \"background: \".concat(blue[700], \";\"),\n  error: \"background: \".concat(red[700], \";\")\n};\n\nvar getType = function getType() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  return typeHelp[type];\n};\n\nvar CusSnackbar = styled(Snackbar).withConfig({\n  displayName: \"Message__CusSnackbar\",\n  componentId: \"om26s-0\"\n})([\"&&& > div{color:\", \";\", \"}\"], common.white, function (_ref) {\n  var msg_type = _ref.msg_type;\n  return getType(msg_type);\n});\n_c = CusSnackbar;\nvar messageModel = modelFactory('messageModel', {\n  open: false,\n  message: '',\n  autoHideDuration: 2000,\n  msg_type: 'default'\n}, {\n  open: function open(value, option) {\n    if (typeof value === 'string') {\n      option.setData(fpMergePre({\n        autoHideDuration: 2000,\n        msg_type: 'default',\n        message: value,\n        open: true\n      }));\n    } else {\n      option.setData(fpMergePre(_objectSpread(_objectSpread({\n        autoHideDuration: 2000,\n        msg_type: 'default'\n      }, value), {}, {\n        open: true\n      })));\n    }\n  },\n  onClose: function onClose(value, option) {\n    return option.setData(fpMergePre({\n      open: false\n    }));\n  }\n});\nexport var Message = function Message() {\n  _s();\n\n  var _useStoreModel = useStoreModel(messageModel),\n      mState = _useStoreModel.state,\n      actions = _useStoreModel.actions;\n\n  return __jsx(CusSnackbar, {\n    open: mState.open,\n    autoHideDuration: mState.autoHideDuration,\n    message: ls(mState.message),\n    msg_type: mState.msg_type,\n    onClose: function onClose() {\n      return actions.onClose();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }\n  });\n};\n\n_s(Message, \"ditCAUNRlvYRvkKc5ZkS3daLNgQ=\", false, function () {\n  return [useStoreModel];\n});\n\n_c2 = Message;\nexport var showMessage = function showMessage(option) {\n  originStore['messageModel'].actions.open(option);\n  return;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CusSnackbar\");\n$RefreshReg$(_c2, \"Message\");","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/components/Message/Message.tsx"],"names":["React","styled","Snackbar","amber","blue","common","green","grey","red","originStore","useStoreModel","fpMergePre","modelFactory","ls","typeHelp","success","warning","info","error","getType","type","CusSnackbar","white","msg_type","messageModel","open","message","autoHideDuration","value","option","setData","onClose","Message","mState","state","actions","showMessage"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {Snackbar} from '@material-ui/core'\r\nimport {amber, blue, common, green, grey, red} from '@material-ui/core/colors'\r\nimport {SnackbarProps} from '@material-ui/core/Snackbar/Snackbar'\r\nimport {originStore, useStoreModel} from '../../ModelAction/useStore'\r\nimport {fpMergePre} from '../../tools/utils'\r\nimport {modelFactory} from '../../ModelAction/modelUtil'\r\nimport { ls } from '../../tools/dealKey'\r\n\r\nconst typeHelp = {\r\n  default: `background: ${grey[700]};`,\r\n  success: `background: ${green[600]};`,\r\n  warning: `background: ${amber[700]};`,\r\n  info: `background: ${blue[700]};`,\r\n  error: `background: ${red[700]};`,\r\n}\r\nconst getType = (type = 'default') => (typeHelp as any)[type]\r\n\r\ntype MessageProps = Partial<SnackbarProps & {\r\n  msg_type: 'default' | 'success' | 'info' | 'warning' | 'error' | string\r\n}>\r\n\r\nconst CusSnackbar = styled(Snackbar)<MessageProps>`\r\n  &&& > div {\r\n    color: ${common.white};\r\n    ${({msg_type}) => getType(msg_type)}\r\n  }\r\n`\r\n\r\nconst messageModel = modelFactory('messageModel', {\r\n  open: false,\r\n  message: '',\r\n  autoHideDuration: 2000,\r\n  msg_type: 'default',\r\n} as MessageProps, {\r\n  open: (value: string | MessageProps, option) => {\r\n    if (typeof value === 'string') {\r\n      option.setData(fpMergePre({\r\n        autoHideDuration: 2000,\r\n        msg_type: 'default',\r\n        message: value,\r\n        open: true,\r\n      }))\r\n    } else {\r\n      option.setData(fpMergePre({\r\n        autoHideDuration: 2000,\r\n        msg_type: 'default',\r\n        ...value,\r\n        open: true,\r\n      }))\r\n    }\r\n  },\r\n  onClose: (value, option) => option.setData(fpMergePre({\r\n    open: false,\r\n  })),\r\n})\r\n\r\nexport const Message = () => {\r\n  const {state: mState, actions} = useStoreModel(messageModel)\r\n  return <CusSnackbar\r\n      open={mState.open}\r\n      autoHideDuration={mState.autoHideDuration}\r\n      message={ls(mState.message as string)}\r\n      msg_type={mState.msg_type}\r\n      onClose={() => actions.onClose()}\r\n  />\r\n}\r\n\r\nexport const showMessage = (option: string | MessageProps) => {\r\n  originStore['messageModel'].actions.open(option)\r\n  return\r\n}\r\n"]},"metadata":{},"sourceType":"module"}