{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\me\\\\pickupAddress\\\\list.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { DictTypeEnum } from '../../../ss_common/enum';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nvar pickupAddressModel = modelFactory('pickupAddressModel', {\n  list: []\n}, {\n  getList: function getList(value, option) {\n    var res;\n    return _regeneratorRuntime.async(function getList$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(option.query(doc.getDataConfig, {\n              data: {\n                type: DictTypeEnum.SelfAddress\n              }\n            }));\n\n          case 2:\n            res = _context.sent;\n            console.log(res);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport var PickupAddress = function PickupAddress() {\n  var _useStoreModel = useStoreModel(pickupAddressModel),\n      actionsPAM = _useStoreModel.actions,\n      statePAM = _useStoreModel.state;\n\n  useEffect(function () {\n    if (!statePAM.list.length) {\n      actionsPAM.getList();\n    }\n  }, []);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }\n  }, __jsx(HeaderTitle, {\n    title: '我的取货点',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }), \"pickupAddress\");\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/me/pickupAddress/list.tsx"],"names":["React","useEffect","HeaderTitle","modelFactory","doc","DictTypeEnum","useStoreModel","pickupAddressModel","list","getList","value","option","query","getDataConfig","data","type","SelfAddress","res","console","log","PickupAddress","actionsPAM","actions","statePAM","state","length"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,QAA0B,6CAA1B;AACA,SAAQC,YAAR,QAA2B,gCAA3B;AACA,SAAQC,GAAR,QAAkB,2BAAlB;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AAEA,SAAQC,aAAR,QAA4B,+BAA5B;AAEA,IAAMC,kBAAkB,GAAGJ,YAAY,CAAC,oBAAD,EAAuB;AAC5DK,EAAAA,IAAI,EAAE;AADsD,CAAvB,EAEpC;AACDC,EAAAA,OAAO,EAAE,iBAAOC,KAAP,EAAcC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACWA,MAAM,CAACC,KAAP,CAAaR,GAAG,CAACS,aAAjB,EAAgC;AAChDC,cAAAA,IAAI,EAAE;AACJC,gBAAAA,IAAI,EAAEV,YAAY,CAACW;AADf;AAD0C,aAAhC,CADX;;AAAA;AACDC,YAAAA,GADC;AAMPC,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AANO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADR,CAFoC,CAAvC;AAcA,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,uBACcd,aAAa,CAACC,kBAAD,CAD3B;AAAA,MACjBc,UADiB,kBAC1BC,OAD0B;AAAA,MACEC,QADF,kBACLC,KADK;;AAEjCvB,EAAAA,SAAS,CAAC,YAAI;AACZ,QAAI,CAACsB,QAAQ,CAACf,IAAT,CAAciB,MAAnB,EAA2B;AACzBJ,MAAAA,UAAU,CAACZ,OAAX;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAOA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,WAAD;AACI,IAAA,KAAK,EAAE,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,kBAAP;AAMD,CAfM","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {HeaderTitle} from '../../../components/HeaderTitle/HeaderTitle'\r\nimport {modelFactory} from '../../../ModelAction/modelUtil'\r\nimport {doc} from '../../../graphqlTypes/doc'\r\nimport {DictTypeEnum} from '../../../ss_common/enum'\r\nimport {DataConfigItemInput} from '../../../graphqlTypes/types'\r\nimport {useStoreModel} from '../../../ModelAction/useStore'\r\n\r\nconst pickupAddressModel = modelFactory('pickupAddressModel', {\r\n  list: [],\r\n}, {\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.getDataConfig, {\r\n      data: {\r\n        type: DictTypeEnum.SelfAddress,\r\n      } as DataConfigItemInput,\r\n    })\r\n    console.log(res)\r\n  },\r\n\r\n})\r\n\r\nexport const PickupAddress = () => {\r\n  const {actions: actionsPAM, state: statePAM} = useStoreModel(pickupAddressModel)\r\n  useEffect(()=>{\r\n    if (!statePAM.list.length) {\r\n      actionsPAM.getList()\r\n    }\r\n  }, [])\r\n\r\n\r\n  return <div>\r\n    <HeaderTitle\r\n        title={'我的取货点'}\r\n    />\r\n    pickupAddress\r\n  </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}