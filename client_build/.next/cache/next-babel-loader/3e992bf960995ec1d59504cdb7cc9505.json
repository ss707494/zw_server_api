{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\cart\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { PickUpTypeEnum } from '../../ss_common/enum';\nimport { fpMergePre } from '../../tools/utils';\nimport { setForm } from '../../tools/commonAction';\nimport { doc } from '../../graphqlTypes/doc';\nimport { ShopCartPage } from './shopCart';\nimport React from 'react';\nimport { useStoreModel } from '../../ModelAction/useStore';\nimport { OrderPage } from './orderPage';\nexport const pageTypeEnum = {\n  shopCart: 'shopCart',\n  order: 'order'\n};\nconst initForm = {\n  pickUpType: PickUpTypeEnum.Self,\n  addressId: ''\n};\n\nconst _addressList = option => {\n  return option.data.form.pickUpType === PickUpTypeEnum.Delivery && option.data.userAddressList || option.data.selfAddress;\n};\n\nexport const shopCartModel = modelFactory('shopCartModel', {\n  user: {},\n  payCardList: [],\n  userAddressList: [],\n  selfAddress: [],\n  pageType: pageTypeEnum.shopCart,\n  shopCartList: [],\n  shopCartListNext: [],\n  form: _objectSpread({}, initForm),\n  dealAddressList: state => state.form.pickUpType === PickUpTypeEnum.Delivery && state.userAddressList || state.selfAddress.map(v => _objectSpread(_objectSpread({}, v), {}, {\n    combineAddress: `${v.province} ${v.city} ${v.streetAddress}`,\n    name: v.fullName,\n    contactInformation: v.phone\n  })),\n  dealAddressData: state => state.dealAddressList(state).find(v => v.id === state.form.addressId) || {},\n  initAddressId: state => {\n    var _state$userAddressLis, _state$userAddressLis2, _state$selfAddress, _state$selfAddress$;\n\n    return state.form.pickUpType === PickUpTypeEnum.Delivery && ((_state$userAddressLis = state.userAddressList) === null || _state$userAddressLis === void 0 ? void 0 : (_state$userAddressLis2 = _state$userAddressLis.find(v => v.isDefault)) === null || _state$userAddressLis2 === void 0 ? void 0 : _state$userAddressLis2.id) || ((_state$selfAddress = state.selfAddress) === null || _state$selfAddress === void 0 ? void 0 : (_state$selfAddress$ = _state$selfAddress[0]) === null || _state$selfAddress$ === void 0 ? void 0 : _state$selfAddress$.id);\n  }\n}, {\n  clearForm: (value, option) => option.setData(fpMergePre({\n    form: _objectSpread({}, initForm)\n  })),\n  setForm: setForm,\n  getList: async (value, option) => {\n    var _res$shopCartList$fil, _res$shopCartList$fil2;\n\n    const res = await option.query(doc.userShopCartList);\n    option.setData(fpMergePre({\n      shopCartList: (_res$shopCartList$fil = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !v.isNext)) !== null && _res$shopCartList$fil !== void 0 ? _res$shopCartList$fil : [],\n      shopCartListNext: (_res$shopCartList$fil2 = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !!v.isNext)) !== null && _res$shopCartList$fil2 !== void 0 ? _res$shopCartList$fil2 : []\n    }));\n  },\n  updatePageType: (value, option) => option.setData(fpMergePre({\n    pageType: value\n  })),\n  getOrderInfo: async (value, option) => {\n    var _res$getDataConfig$va, _res$getDataConfig, _res$getDataConfig$va2, _res$userAddressListO, _res$userAddressListO2, _res$getDataConfig2, _res$getDataConfig2$v, _res$getDataConfig2$v2, _res$getDataConfig2$v3;\n\n    const res = await option.query(doc.orderConfirmInfo);\n    option.setData(fpMergePre({\n      user: res === null || res === void 0 ? void 0 : res.oneUser,\n      payCardList: res === null || res === void 0 ? void 0 : res.payCardListOneUser,\n      userAddressList: res === null || res === void 0 ? void 0 : res.userAddressListOneUser,\n      selfAddress: (_res$getDataConfig$va = res === null || res === void 0 ? void 0 : (_res$getDataConfig = res.getDataConfig) === null || _res$getDataConfig === void 0 ? void 0 : (_res$getDataConfig$va2 = _res$getDataConfig.value) === null || _res$getDataConfig$va2 === void 0 ? void 0 : _res$getDataConfig$va2.list) !== null && _res$getDataConfig$va !== void 0 ? _res$getDataConfig$va : []\n    }));\n    option.setData(fpMergePre({\n      form: {\n        addressId: option.data.form.pickUpType === PickUpTypeEnum.Delivery && (res === null || res === void 0 ? void 0 : (_res$userAddressListO = res.userAddressListOneUser) === null || _res$userAddressListO === void 0 ? void 0 : (_res$userAddressListO2 = _res$userAddressListO.find(v => v.isDefault)) === null || _res$userAddressListO2 === void 0 ? void 0 : _res$userAddressListO2.id) || (res === null || res === void 0 ? void 0 : (_res$getDataConfig2 = res.getDataConfig) === null || _res$getDataConfig2 === void 0 ? void 0 : (_res$getDataConfig2$v = _res$getDataConfig2.value) === null || _res$getDataConfig2$v === void 0 ? void 0 : (_res$getDataConfig2$v2 = _res$getDataConfig2$v.list) === null || _res$getDataConfig2$v2 === void 0 ? void 0 : (_res$getDataConfig2$v3 = _res$getDataConfig2$v2[0]) === null || _res$getDataConfig2$v3 === void 0 ? void 0 : _res$getDataConfig2$v3.id)\n      }\n    }));\n  }\n});\nexport const CartPage = () => {\n  const {\n    state: stateSCM\n  } = useStoreModel(shopCartModel);\n  return stateSCM.pageType === pageTypeEnum.order && __jsx(OrderPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 55\n    }\n  }) || __jsx(ShopCartPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 72\n    }\n  });\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/cart/index.tsx"],"names":["modelFactory","PickUpTypeEnum","fpMergePre","setForm","doc","ShopCartPage","React","useStoreModel","OrderPage","pageTypeEnum","shopCart","order","initForm","pickUpType","Self","addressId","_addressList","option","data","form","Delivery","userAddressList","selfAddress","shopCartModel","user","payCardList","pageType","shopCartList","shopCartListNext","dealAddressList","state","map","v","combineAddress","province","city","streetAddress","name","fullName","contactInformation","phone","dealAddressData","find","id","initAddressId","isDefault","clearForm","value","setData","getList","res","query","userShopCartList","filter","isNext","updatePageType","getOrderInfo","orderConfirmInfo","oneUser","payCardListOneUser","userAddressListOneUser","getDataConfig","list","CartPage","stateSCM"],"mappings":"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","sourcesContent":["import {modelFactory} from '../../ModelAction/modelUtil'\r\nimport {OrderInfoItemInput, ShopCart, User, UserAddress, UserPayCard} from '../../graphqlTypes/types'\r\nimport {PickUpTypeEnum} from '../../ss_common/enum'\r\nimport {fpMergePre} from '../../tools/utils'\r\nimport {setForm} from '../../tools/commonAction'\r\nimport {doc} from '../../graphqlTypes/doc'\r\nimport {ShopCartPage} from './shopCart'\r\nimport React from 'react'\r\nimport {useStoreModel} from '../../ModelAction/useStore'\r\nimport {OrderPage} from './orderPage'\r\n\r\nexport const pageTypeEnum = {\r\n  shopCart: 'shopCart',\r\n  order: 'order',\r\n}\r\n\r\nconst initForm: OrderInfoItemInput = {\r\n  pickUpType: PickUpTypeEnum.Self,\r\n  addressId: '',\r\n}\r\nconst _addressList = (option: BaseModelActionOption) => {\r\n  return (option.data.form.pickUpType === PickUpTypeEnum.Delivery && option.data.userAddressList) || option.data.selfAddress\r\n}\r\nexport const shopCartModel = modelFactory('shopCartModel', {\r\n  user: {} as User,\r\n  payCardList: [] as UserPayCard[],\r\n  userAddressList: [] as UserAddress[],\r\n  selfAddress: [] as any[],\r\n  pageType: pageTypeEnum.shopCart,\r\n  shopCartList: [] as ShopCart[],\r\n  shopCartListNext: [] as ShopCart[],\r\n  form: {\r\n    ...initForm,\r\n  } as OrderInfoItemInput,\r\n  dealAddressList: ((state: any) => (state.form.pickUpType === PickUpTypeEnum.Delivery && state.userAddressList) || state.selfAddress.map((v: any) => ({\r\n    ...v,\r\n    combineAddress: `${v.province} ${v.city} ${v.streetAddress}`,\r\n    name: v.fullName,\r\n    contactInformation: v.phone,\r\n  }))) as (state: any) => UserAddress[],\r\n  dealAddressData: (state: any) => state.dealAddressList(state).find((v: UserAddress) => v.id === state.form.addressId) || {},\r\n  initAddressId: (state: any) => (state.form.pickUpType === PickUpTypeEnum.Delivery && state.userAddressList?.find((v: UserAddress) => v.isDefault)?.id) || state.selfAddress?.[0]?.id,\r\n}, {\r\n  clearForm: (value, option) => option.setData(fpMergePre({\r\n    form: {\r\n      ...initForm,\r\n    },\r\n  })),\r\n  setForm: setForm,\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.userShopCartList)\r\n    option.setData(fpMergePre({\r\n      shopCartList: res?.shopCartList.filter((v: ShopCart) => !v.isNext) ?? [],\r\n      shopCartListNext: res?.shopCartList.filter((v: ShopCart) => !!v.isNext) ?? [],\r\n    }))\r\n  },\r\n  updatePageType: (value: string, option) => option.setData(fpMergePre({\r\n    pageType: value,\r\n  })),\r\n  getOrderInfo: async (value, option) => {\r\n    const res = await option.query(doc.orderConfirmInfo)\r\n    option.setData(fpMergePre({\r\n      user: res?.oneUser,\r\n      payCardList: res?.payCardListOneUser,\r\n      userAddressList: res?.userAddressListOneUser,\r\n      selfAddress: res?.getDataConfig?.value?.list ?? [],\r\n    }))\r\n    option.setData(fpMergePre({\r\n      form: {\r\n        addressId: (option.data.form.pickUpType === PickUpTypeEnum.Delivery && res?.userAddressListOneUser?.find((v: UserAddress) => v.isDefault)?.id) || res?.getDataConfig?.value?.list?.[0]?.id,\r\n      },\r\n    }))\r\n  },\r\n})\r\n\r\nexport const CartPage = () => {\r\n  const {state: stateSCM} = useStoreModel(shopCartModel)\r\n  return (stateSCM.pageType === pageTypeEnum.order && <OrderPage/>) || <ShopCartPage/>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}