{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Router from 'next/router';\nimport { fpMergePre } from '../../tools/utils';\nimport { setToken } from '../../tools/token';\nimport { doc } from '../../graphqlTypes/doc';\nimport { modelFactory } from '../../ModelAction/modelUtil';\n\nvar _toLogin = function toLogin() {\n  return _regeneratorRuntime.async(function toLogin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Router.push('/login'));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport var meModel = modelFactory('meModel', {\n  user: {}\n}, {\n  getLoginUser: function getLoginUser(value, option) {\n    var _await$option$query;\n\n    var res;\n    return _regeneratorRuntime.async(function getLoginUser$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(option.query(doc.oneUser));\n\n          case 2:\n            _context2.t1 = _await$option$query = _context2.sent;\n            _context2.t0 = _context2.t1 === null;\n\n            if (_context2.t0) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.t0 = _await$option$query === void 0;\n\n          case 6:\n            if (!_context2.t0) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.t2 = void 0;\n            _context2.next = 11;\n            break;\n\n          case 10:\n            _context2.t2 = _await$option$query.oneUser;\n\n          case 11:\n            res = _context2.t2;\n            option.setData(fpMergePre({\n              user: res\n            }));\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  logout: function logout(value, option) {\n    return _regeneratorRuntime.async(function logout$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            setToken('');\n            setToken('', 'refreshtoken');\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(_toLogin());\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  toLogin: function toLogin(value) {\n    _toLogin();\n  }\n});","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/me/model.ts"],"names":["Router","fpMergePre","setToken","doc","modelFactory","toLogin","push","meModel","user","getLoginUser","value","option","query","oneUser","res","setData","logout"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,aAAnB;AAEA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SAAQC,QAAR,QAAuB,mBAAvB;AACA,SAAQC,GAAR,QAAkB,wBAAlB;AACA,SAAQC,YAAR,QAA2B,6BAA3B;;AAEA,IAAMC,QAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACRL,MAAM,CAACM,IAAP,CAAY,QAAZ,CADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAGA,OAAO,IAAMC,OAAO,GAAGH,YAAY,CAAC,SAAD,EAAY;AAC7CI,EAAAA,IAAI,EAAE;AADuC,CAAZ,EAEhC;AACDC,EAAAA,YAAY,EAAE,sBAAOC,KAAP,EAAcC,MAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACOA,MAAM,CAACC,KAAP,CAAaT,GAAG,CAACU,OAAjB,CADP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,2BACA,oBAAmCA,OADnC;;AAAA;AACNC,YAAAA,GADM;AAEZH,YAAAA,MAAM,CAACI,OAAP,CAAed,UAAU,CAAC;AACxBO,cAAAA,IAAI,EAAEM;AADkB,aAAD,CAAzB;;AAFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADb;AAODE,EAAAA,MAAM,EAAE,gBAAON,KAAP,EAAcC,MAAd;AAAA;AAAA;AAAA;AAAA;AACNT,YAAAA,QAAQ,CAAC,EAAD,CAAR;AACAA,YAAAA,QAAQ,CAAC,EAAD,EAAK,cAAL,CAAR;AAFM;AAAA,6CAGAG,QAAO,EAHP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAPP;AAYDA,EAAAA,OAAO,EAAE,iBAAAK,KAAK,EAAI;AAChBL,IAAAA,QAAO;AACR;AAdA,CAFgC,CAA5B","sourcesContent":["import Router from 'next/router'\r\nimport {User} from '../../graphqlTypes/types'\r\nimport {fpMergePre} from '../../tools/utils'\r\nimport {setToken} from '../../tools/token'\r\nimport {doc} from '../../graphqlTypes/doc'\r\nimport {modelFactory} from '../../ModelAction/modelUtil'\r\n\r\nconst toLogin = async () => {\r\n  await Router.push('/login')\r\n}\r\nexport const meModel = modelFactory('meModel', {\r\n  user: {} as User,\r\n}, {\r\n  getLoginUser: async (value, option) => {\r\n    const res = (await option.query(doc.oneUser))?.oneUser as User\r\n    option.setData(fpMergePre({\r\n      user: res,\r\n    }))\r\n  },\r\n  logout: async (value, option) => {\r\n    setToken('')\r\n    setToken('', 'refreshtoken')\r\n    await toLogin()\r\n  },\r\n  toLogin: value => {\r\n    toLogin()\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}