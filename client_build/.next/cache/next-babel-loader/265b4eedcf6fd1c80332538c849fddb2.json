{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\productList\\\\[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { useRouter } from 'next/router';\nimport { fpMergePre } from '../../tools/utils';\nimport { doc } from '../../graphqlTypes/doc';\nimport { useStoreModel } from '../../ModelAction/useStore';\nimport { HeaderTitle } from '../../components/HeaderTitle/HeaderTitle';\nexport var productListModel = modelFactory('productListModel', {\n  category: {}\n}, {\n  getCategory: function () {\n    var _getCategory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, option) {\n      var _res$oneCategory;\n\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return option.query(doc.oneCategory, {\n                data: value\n              });\n\n            case 2:\n              res = _context.sent;\n              option.setData(fpMergePre({\n                category: (_res$oneCategory = res === null || res === void 0 ? void 0 : res.oneCategory) !== null && _res$oneCategory !== void 0 ? _res$oneCategory : {}\n              }));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function getCategory(_x, _x2) {\n      return _getCategory.apply(this, arguments);\n    }\n\n    return getCategory;\n  }(),\n  getData: function () {\n    var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value, option) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function getData(_x3, _x4) {\n      return _getData.apply(this, arguments);\n    }\n\n    return getData;\n  }()\n});\nexport var ProductList = function ProductList() {\n  _s();\n\n  var _ref, _router$query, _statePLM$category;\n\n  var router = useRouter();\n  var id = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id) !== null && _ref !== void 0 ? _ref : '';\n\n  var _useStoreModel = useStoreModel(productListModel),\n      actionsPLM = _useStoreModel.actions,\n      statePLM = _useStoreModel.state;\n\n  useEffect(function () {\n    if (!!id) {\n      actionsPLM.getCategory();\n    }\n  }, [id]);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }, __jsx(HeaderTitle, {\n    title: (_statePLM$category = statePLM.category) === null || _statePLM$category === void 0 ? void 0 : _statePLM$category.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }), \"productList\");\n};\n\n_s(ProductList, \"sO8E6/TSlRC/n4ppHotWzdYhSo0=\", false, function () {\n  return [useRouter, useStoreModel];\n});\n\n_c = ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/productList/[id].tsx"],"names":["React","useEffect","modelFactory","useRouter","fpMergePre","doc","useStoreModel","HeaderTitle","productListModel","category","getCategory","value","option","query","oneCategory","data","res","setData","getData","ProductList","router","id","actionsPLM","actions","statePLM","state","name"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,YAAR,QAA2B,6BAA3B;AAEA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SAAQC,GAAR,QAAkB,wBAAlB;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AACA,SAAQC,WAAR,QAA0B,0CAA1B;AAEA,OAAO,IAAMC,gBAAgB,GAAGN,YAAY,CAAC,kBAAD,EAAqB;AAC/DO,EAAAA,QAAQ,EAAE;AADqD,CAArB,EAEzC;AACDC,EAAAA,WAAW;AAAA,gFAAE,iBAAOC,KAAP,EAAiCC,MAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACOA,MAAM,CAACC,KAAP,CAAaR,GAAG,CAACS,WAAjB,EAA8B;AAACC,gBAAAA,IAAI,EAAEJ;AAAP,eAA9B,CADP;;AAAA;AACLK,cAAAA,GADK;AAEXJ,cAAAA,MAAM,CAACK,OAAP,CAAeb,UAAU,CAAC;AACxBK,gBAAAA,QAAQ,sBAAEO,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEF,WAAP,+DAAsB;AADN,eAAD,CAAzB;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADV;AAODI,EAAAA,OAAO;AAAA,4EAAE,kBAAOP,KAAP,EAAcC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAPN,CAFyC,CAArC;AAcP,OAAO,IAAMO,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AAAA;;AAC/B,MAAMC,MAAM,GAAGjB,SAAS,EAAxB;AACA,MAAMkB,EAAE,4BAAID,MAAM,CAACP,KAAX,kDAAI,cAAcQ,EAAlB,uCAAmC,EAA3C;;AAF+B,uBAGgBf,aAAa,CAACE,gBAAD,CAH7B;AAAA,MAGfc,UAHe,kBAGxBC,OAHwB;AAAA,MAGIC,QAHJ,kBAGHC,KAHG;;AAK/BxB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAAC,CAACoB,EAAN,EAAU;AACRC,MAAAA,UAAU,CAACZ,WAAX;AACD;AACF,GAJQ,EAIN,CAACW,EAAD,CAJM,CAAT;AAMA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,WAAD;AACI,IAAA,KAAK,wBAAEG,QAAQ,CAACf,QAAX,uDAAE,mBAAmBiB,IAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,gBAAP;AAMD,CAjBM;;GAAMP,W;UACIhB,S,EAEgCG,a;;;KAHpCa,W","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {modelFactory} from '../../ModelAction/modelUtil'\r\nimport {Category, CategoryItemInput} from '../../graphqlTypes/types'\r\nimport {useRouter} from 'next/router'\r\nimport {fpMergePre} from '../../tools/utils'\r\nimport {doc} from '../../graphqlTypes/doc'\r\nimport {useStoreModel} from '../../ModelAction/useStore'\r\nimport {HeaderTitle} from '../../components/HeaderTitle/HeaderTitle'\r\n\r\nexport const productListModel = modelFactory('productListModel', {\r\n  category: {} as Category,\r\n}, {\r\n  getCategory: async (value: CategoryItemInput, option) => {\r\n    const res = await option.query(doc.oneCategory, {data: value})\r\n    option.setData(fpMergePre({\r\n      category: res?.oneCategory ?? {},\r\n    }))\r\n  },\r\n  getData: async (value, option) => {\r\n  },\r\n\r\n})\r\n\r\nexport const ProductList = () => {\r\n  const router = useRouter()\r\n  const id = (router.query?.id as string) ?? ''\r\n  const {actions: actionsPLM, state: statePLM} = useStoreModel(productListModel)\r\n\r\n  useEffect(() => {\r\n    if (!!id) {\r\n      actionsPLM.getCategory()\r\n    }\r\n  }, [id])\r\n\r\n  return <div>\r\n    <HeaderTitle\r\n        title={statePLM.category?.name}\r\n    />\r\n    productList\r\n  </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}