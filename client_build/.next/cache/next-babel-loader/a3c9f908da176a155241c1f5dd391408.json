{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        :global(*) {\\n          -webkit-font-smoothing: antialiased;\\n          -moz-osx-font-smoothing: grayscale;\\n        }\\n\\n        :global(body, html) {\\n          background-color: #F7F8F9;\\n          color: #373F4A;\\n          font-family: \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n          font-weight: normal;\\n          height: 100%;\\n        }\\n\\n        :global(button) {\\n          border: 0;\\n          font-weight: 500;\\n        }\\n\\n        :global(fieldset) {\\n          margin: 0;\\n          padding: 0;\\n          border: 0;\\n        }\\n\\n        :global(#form-container) {\\n          padding: 20px;\\n          //position: relative;\\n          //width: 380px;\\n          //margin: 0 auto;\\n          //top: 50%;\\n          //transform: translateY(-50%);\\n        }\\n\\n        :global(.third) {\\n          float: left;\\n          width: calc((100% - 32px) / 3);\\n          padding: 0;\\n          margin: 0 16px 16px 0;\\n        }\\n\\n        :global(.third:last-of-type) {\\n          margin-right: 0;\\n        }\\n\\n        /* Define how SqPaymentForm iframes should look */\\n        :global(.sq-input) {\\n          height: 56PX;\\n          box-sizing: border-box;\\n          border: 1px solid #E0E2E3;\\n          background-color: white;\\n          border-radius: 6px;\\n          display: inline-block;\\n          -webkit-transition: border-color .2s ease-in-out;\\n             -moz-transition: border-color .2s ease-in-out;\\n                  transition: border-color .2s ease-in-out;\\n        }\\n\\n        /* Define how SqPaymentForm iframes should look when they have focus */\\n        :global(.sq-input--focus) {\\n          border: 1px solid #4A90E2;\\n        }\\n\\n        /* Define how SqPaymentForm iframes should look when they contain invalid values */\\n        :global(.sq-input--error) {\\n          border: 1px solid #E02F2F;\\n        }\\n\\n        :global(#sq-card-number) {\\n          margin-bottom: 16px;\\n        }\\n\\n        /* Customize the \\\"Pay with Credit Card\\\" button */\\n        :global(.button-credit-card) {\\n          width: 100%;\\n          height: 56px;\\n          margin-top: 10px;\\n          background: #4A90E2;\\n          border-radius: 6px;\\n          cursor: pointer;\\n          display: block;\\n          color: #FFFFFF;\\n          font-size: 16px;\\n          line-height: 24px;\\n          font-weight: 700;\\n          letter-spacing: 0;\\n          text-align: center;\\n          -webkit-transition: background .2s ease-in-out;\\n             -moz-transition: background .2s ease-in-out;\\n                  transition: background .2s ease-in-out;\\n        }\\n\\n        :global(.button-credit-card:hover) {\\n          background-color: #4281CB;\\n        }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect } from 'react';\nimport Head from 'next/head';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { useRouter } from 'next/router';\nimport { showMessage } from '../../../components/Message/Message';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nimport { orderDetailModel } from '../me/orderDetail/orderDetail';\nimport { dealMoney } from '../../../tools/utils';\nimport { OrderState } from '../../../ss_common/enum';\nimport { createGlobalStyle } from 'styled-components';\nvar GlobalStyle = createGlobalStyle(_templateObject());\nvar applicationId = true ? 'sq0idp-IAEwX77Hdunl5dWByHQjIQ' : 'sandbox-sq0idb-42FQ7wGBwzibToRM9_zdFw'; // const applicationId = 'sq0idp-IAEwX77Hdunl5dWByHQjIQ'\n\nexport var Pay = function Pay() {\n  var _ref, _router$query;\n\n  var router = useRouter();\n  var orderId = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.orderId) !== null && _ref !== void 0 ? _ref : '';\n\n  var _useStoreModel = useStoreModel(orderDetailModel),\n      stateOD = _useStoreModel.state,\n      actionsOD = _useStoreModel.actions;\n\n  var orderInfo = stateOD.orderInfo || {};\n  useEffect(function () {\n    if (orderId) {\n      actionsOD.getDetail(\"\".concat(orderId));\n    }\n  }, [orderId]);\n  useEffect(function () {\n    // @ts-ignore\n    if (window.SqPaymentForm && orderInfo.actuallyPaid) {\n      var _document$querySelect;\n\n      // @ts-ignore\n      var paymentForm = new SqPaymentForm({\n        // Initialize the payment form elements\n        applicationId: applicationId,\n        inputClass: 'sq-input',\n        autoBuild: false,\n        // Customize the CSS for SqPaymentForm iframe elements\n        inputStyles: [{\n          fontSize: '16px',\n          lineHeight: '24px',\n          padding: '16px',\n          placeholderColor: '#a0a0a0',\n          backgroundColor: 'transparent'\n        }],\n        // Initialize the credit card placeholders\n        cardNumber: {\n          elementId: 'sq-card-number',\n          placeholder: 'Card Number'\n        },\n        cvv: {\n          elementId: 'sq-cvv',\n          placeholder: 'CVV'\n        },\n        expirationDate: {\n          elementId: 'sq-expiration-date',\n          placeholder: 'MM/YY'\n        },\n        postalCode: {\n          elementId: 'sq-postal-code',\n          placeholder: 'Postal'\n        },\n        // SqPaymentForm callback functions\n        callbacks: {\n          /*\r\n          * callback function: cardNonceResponseReceived\r\n          * Triggered when: SqPaymentForm completes a card nonce request\r\n          */\n          cardNonceResponseReceived: function cardNonceResponseReceived(errors, nonce, cardData) {\n            var _orderInfo$actuallyPa;\n\n            if (errors) {\n              // Log errors from nonce generation to the browser developer console.\n              console.error('Encountered errors:');\n              errors.forEach(function (error) {\n                console.error('  ' + error.message);\n              });\n              showMessage('Encountered errors, check browser developer console for more details');\n              return;\n            } // alert(`The generated nonce is:\\n${nonce}`)\n\n\n            fetch(\"/pay/process-payment\", {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                nonce: nonce,\n                amount: ~~(((_orderInfo$actuallyPa = orderInfo.actuallyPaid) !== null && _orderInfo$actuallyPa !== void 0 ? _orderInfo$actuallyPa : 0) * 100)\n              })\n            })[\"catch\"](function (err) {\n              showMessage('Network error: ' + err);\n            }).then(function (response) {\n              if (!response.ok) {\n                return response.json().then(function (errorInfo) {\n                  return Promise.reject(errorInfo);\n                }); //UPDATE HERE\n              }\n\n              return response.json(); //UPDATE HERE\n            }).then(function (data) {\n              // console.log(data) //UPDATE HERE\n              // showMessage('Payment complete successfully!\\nCheck browser developer console for more details')\n              return actionsOD.updateOrder({\n                id: orderId,\n                state: OrderState.Paid\n              });\n            }).then(function () {\n              showMessage('支付成功');\n              router.replace('/m/cart/result');\n            })[\"catch\"](function (err) {\n              console.error(err);\n              showMessage('Payment failed to complete!\\nCheck browser developer console for more details');\n            });\n          }\n        }\n      });\n      paymentForm.build();\n\n      var onGetCardNonce = function onGetCardNonce(event) {\n        // Don't submit the form until SqPaymentForm returns with a nonce\n        event.preventDefault(); // Request a nonce from the SqPaymentForm object\n\n        paymentForm.requestCardNonce();\n      };\n\n      (_document$querySelect = document.querySelector('#sq-creditcard')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.addEventListener('click', onGetCardNonce);\n    }\n  }, [orderInfo.actuallyPaid]);\n  return __jsx(\"div\", null, __jsx(GlobalStyle, null), __jsx(Head, null, __jsx(\"title\", null, \"pay\"), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: true ? 'https://js.squareup.com/v2/paymentform' : 'https://js.squareupsandbox.com/v2/paymentform'\n  })), __jsx(HeaderTitle, {\n    title: '支付',\n    backCall: function backCall() {\n      router.replace('/m/home');\n      return true;\n    }\n  }), __jsx(\"div\", {\n    id: \"form-container\"\n  }, !orderInfo.actuallyPaid && '未找到订单信息', __jsx(\"div\", {\n    id: \"sq-card-number\"\n  }), __jsx(\"div\", {\n    className: \"third\",\n    id: \"sq-expiration-date\"\n  }), __jsx(\"div\", {\n    className: \"third\",\n    id: \"sq-cvv\"\n  }), __jsx(\"div\", {\n    className: \"third\",\n    id: \"sq-postal-code\"\n  }), __jsx(\"button\", {\n    id: \"sq-creditcard\",\n    className: \"button-credit-card\"\n  }, \"Pay \", dealMoney(orderInfo.actuallyPaid))));\n};","map":null,"metadata":{},"sourceType":"module"}