{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\me\\\\pickupAddress\\\\list.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { DictTypeEnum } from '../../../ss_common/enum';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nimport { fpMergePre } from '../../../tools/utils';\nimport styled from 'styled-components';\nimport { ButtonBase } from '@material-ui/core';\nimport { dealImgUrl } from '../../../tools/img';\nconst pickupAddressModel = modelFactory('pickupAddressModel', {\n  list: []\n}, {\n  getList: async (value, option) => {\n    var _res$getDataConfig$va, _res$getDataConfig, _res$getDataConfig$va2;\n\n    const res = await option.query(doc.getDataConfig, {\n      data: {\n        type: DictTypeEnum.SelfAddress\n      }\n    });\n    option.setData(fpMergePre({\n      list: (_res$getDataConfig$va = res === null || res === void 0 ? void 0 : (_res$getDataConfig = res.getDataConfig) === null || _res$getDataConfig === void 0 ? void 0 : (_res$getDataConfig$va2 = _res$getDataConfig.value) === null || _res$getDataConfig$va2 === void 0 ? void 0 : _res$getDataConfig$va2.list) !== null && _res$getDataConfig$va !== void 0 ? _res$getDataConfig$va : []\n    }));\n  }\n});\nconst ItemBox = styled(ButtonBase)`\n  display: flex;\n  > img {\n    width: 22vw;\n    height: 22vw;\n  }\n`;\nexport const PickupAddress = () => {\n  const {\n    actions: actionsPAM,\n    state: statePAM\n  } = useStoreModel(pickupAddressModel);\n  useEffect(() => {\n    if (!statePAM.list.length) {\n      actionsPAM.getList();\n    }\n  }, []);\n  console.log(statePAM.list[0]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }, __jsx(HeaderTitle, {\n    title: '我的取货点',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }), statePAM.list.map(value => __jsx(ItemBox, {\n    key: `PickupAddress_${value.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 40\n    }\n  }, __jsx(\"img\", {\n    src: dealImgUrl(value.imgUrl),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, value.fullName), __jsx(\"footer\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, `${value.province} ${value.city} ${value.streetAddress}`)))));\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/me/pickupAddress/list.tsx"],"names":["React","useEffect","HeaderTitle","modelFactory","doc","DictTypeEnum","useStoreModel","fpMergePre","styled","ButtonBase","dealImgUrl","pickupAddressModel","list","getList","value","option","res","query","getDataConfig","data","type","SelfAddress","setData","ItemBox","PickupAddress","actions","actionsPAM","state","statePAM","length","console","log","map","id","imgUrl","fullName","province","city","streetAddress"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,QAA0B,6CAA1B;AACA,SAAQC,YAAR,QAA2B,gCAA3B;AACA,SAAQC,GAAR,QAAkB,2BAAlB;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AAEA,SAAQC,aAAR,QAA4B,+BAA5B;AACA,SAAQC,UAAR,QAAyB,sBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AAEA,MAAMC,kBAAkB,GAAGR,YAAY,CAAC,oBAAD,EAAuB;AAC5DS,EAAAA,IAAI,EAAE;AADsD,CAAvB,EAEpC;AACDC,EAAAA,OAAO,EAAE,OAAOC,KAAP,EAAcC,MAAd,KAAyB;AAAA;;AAChC,UAAMC,GAAG,GAAG,MAAMD,MAAM,CAACE,KAAP,CAAab,GAAG,CAACc,aAAjB,EAAgC;AAChDC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEf,YAAY,CAACgB;AADf;AAD0C,KAAhC,CAAlB;AAKAN,IAAAA,MAAM,CAACO,OAAP,CAAef,UAAU,CAAC;AACxBK,MAAAA,IAAI,2BAAEI,GAAF,aAAEA,GAAF,6CAAEA,GAAG,CAAEE,aAAP,iFAAE,mBAAoBJ,KAAtB,2DAAE,uBAA2BF,IAA7B,yEAAqC;AADjB,KAAD,CAAzB;AAGD;AAVA,CAFoC,CAAvC;AAgBA,MAAMW,OAAO,GAAGf,MAAM,CAACC,UAAD,CAAa;;;;;;CAAnC;AAQA,OAAO,MAAMe,aAAa,GAAG,MAAM;AACjC,QAAM;AAACC,IAAAA,OAAO,EAAEC,UAAV;AAAsBC,IAAAA,KAAK,EAAEC;AAA7B,MAAyCtB,aAAa,CAACK,kBAAD,CAA5D;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC2B,QAAQ,CAAChB,IAAT,CAAciB,MAAnB,EAA2B;AACzBH,MAAAA,UAAU,CAACb,OAAX;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMAiB,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAAChB,IAAT,CAAc,CAAd,CAAZ;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,WAAD;AACI,IAAA,KAAK,EAAE,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAIJgB,QAAQ,CAAChB,IAAT,CAAcoB,GAAd,CAAmBlB,KAAD,IAAgB,MAAC,OAAD;AAAS,IAAA,GAAG,EAAG,iBAAgBA,KAAK,CAACmB,EAAG,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACjC;AAAK,IAAA,GAAG,EAAEvB,UAAU,CAACI,KAAK,CAACoB,MAAP,CAApB;AACK,IAAA,GAAG,EAAC,EADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADiC,EAGjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASpB,KAAK,CAACqB,QAAf,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,GAAErB,KAAK,CAACsB,QAAS,IAAGtB,KAAK,CAACuB,IAAK,IAAGvB,KAAK,CAACwB,aAAc,EAD1D,CAFF,CAHiC,CAAlC,CAJI,CAAP;AAeD,CAzBM","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {HeaderTitle} from '../../../components/HeaderTitle/HeaderTitle'\r\nimport {modelFactory} from '../../../ModelAction/modelUtil'\r\nimport {doc} from '../../../graphqlTypes/doc'\r\nimport {DictTypeEnum} from '../../../ss_common/enum'\r\nimport {DataConfigItemInput} from '../../../graphqlTypes/types'\r\nimport {useStoreModel} from '../../../ModelAction/useStore'\r\nimport {fpMergePre} from '../../../tools/utils'\r\nimport styled from 'styled-components'\r\nimport {ButtonBase} from '@material-ui/core'\r\nimport {dealImgUrl} from '../../../tools/img'\r\n\r\nconst pickupAddressModel = modelFactory('pickupAddressModel', {\r\n  list: [],\r\n}, {\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.getDataConfig, {\r\n      data: {\r\n        type: DictTypeEnum.SelfAddress,\r\n      } as DataConfigItemInput,\r\n    })\r\n    option.setData(fpMergePre({\r\n      list: res?.getDataConfig?.value?.list ?? [],\r\n    }))\r\n  },\r\n\r\n})\r\n\r\nconst ItemBox = styled(ButtonBase)`\r\n  display: flex;\r\n  > img {\r\n    width: 22vw;\r\n    height: 22vw;\r\n  }\r\n`\r\n\r\nexport const PickupAddress = () => {\r\n  const {actions: actionsPAM, state: statePAM} = useStoreModel(pickupAddressModel)\r\n  useEffect(() => {\r\n    if (!statePAM.list.length) {\r\n      actionsPAM.getList()\r\n    }\r\n  }, [])\r\n\r\n  console.log(statePAM.list[0])\r\n\r\n  return <div>\r\n    <HeaderTitle\r\n        title={'我的取货点'}\r\n    />\r\n    {statePAM.list.map((value: any) => <ItemBox key={`PickupAddress_${value.id}`}>\r\n      <img src={dealImgUrl(value.imgUrl)}\r\n           alt=\"\"/>\r\n      <section>\r\n        <header>{value.fullName}</header>\r\n        <footer>\r\n          {`${value.province} ${value.city} ${value.streetAddress}`}\r\n        </footer>\r\n      </section>\r\n    </ItemBox>)}\r\n  </div>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}