{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\zw\\\\zw_client_web\\\\utils\\\\view\\\\cart\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { PickUpTypeEnum } from '../../ss_common/enum';\nimport { dealMaybeNumber, fpMergePre } from '../../tools/utils';\nimport { setForm } from '../../tools/commonAction';\nimport { doc } from '../../graphqlTypes/doc';\nimport { ShopCartPage } from './shopCart';\nimport React from 'react';\nimport { useStoreModel } from '../../ModelAction/useStore';\nimport { OrderPage } from './orderPage';\nexport const pageTypeEnum = {\n  shopCart: 'shopCart',\n  order: 'order'\n};\nconst initForm = {\n  pickUpType: PickUpTypeEnum.Self,\n  addressId: '',\n  paymentMethodCardId: '',\n  deductCoin: 0,\n  saleTax: 0\n};\n\nconst _addressList = option => {\n  return option.data.form.pickUpType === PickUpTypeEnum.Delivery && option.data.userAddressList || option.data.selfAddress;\n};\n\nexport const shopCartModel = modelFactory('shopCartModel', {\n  user: {},\n  payCardList: [],\n  userAddressList: [],\n  selfAddress: [],\n  freightConfig: [],\n  pageType: pageTypeEnum.shopCart,\n  shopCartList: [],\n  shopCartListNext: [],\n  form: _objectSpread({}, initForm),\n  dealAddressList: state => state.form.pickUpType === PickUpTypeEnum.Delivery && state.userAddressList || state.selfAddress.map(v => _objectSpread(_objectSpread({}, v), {}, {\n    combineAddress: `${v.province} ${v.city} ${v.streetAddress}`,\n    name: v.fullName,\n    contactInformation: v.phone\n  })),\n  dealAddressData: state => state.dealAddressList(state).find(v => v.id === state.form.addressId) || {},\n  initAddressId: state => {\n    var _state$userAddressLis, _state$userAddressLis2, _state$selfAddress, _state$selfAddress$;\n\n    return state.form.pickUpType === PickUpTypeEnum.Delivery && ((_state$userAddressLis = state.userAddressList) === null || _state$userAddressLis === void 0 ? void 0 : (_state$userAddressLis2 = _state$userAddressLis.find(v => v.isDefault)) === null || _state$userAddressLis2 === void 0 ? void 0 : _state$userAddressLis2.id) || ((_state$selfAddress = state.selfAddress) === null || _state$selfAddress === void 0 ? void 0 : (_state$selfAddress$ = _state$selfAddress[0]) === null || _state$selfAddress$ === void 0 ? void 0 : _state$selfAddress$.id);\n  },\n  dealProductTotal: state => state.shopCartList.reduce((pre, cur) => {\n    var _cur$product;\n\n    return pre + dealMaybeNumber(cur === null || cur === void 0 ? void 0 : cur.number) * dealMaybeNumber(cur === null || cur === void 0 ? void 0 : (_cur$product = cur.product) === null || _cur$product === void 0 ? void 0 : _cur$product.priceOut);\n  }, 0)\n}, {\n  clearForm: (value, option) => option.setData(fpMergePre({\n    form: _objectSpread({}, initForm)\n  })),\n  setForm: setForm,\n  getList: async (value, option) => {\n    var _res$shopCartList$fil, _res$shopCartList$fil2;\n\n    const res = await option.query(doc.userShopCartList);\n    option.setData(fpMergePre({\n      shopCartList: (_res$shopCartList$fil = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !v.isNext)) !== null && _res$shopCartList$fil !== void 0 ? _res$shopCartList$fil : [],\n      shopCartListNext: (_res$shopCartList$fil2 = res === null || res === void 0 ? void 0 : res.shopCartList.filter(v => !!v.isNext)) !== null && _res$shopCartList$fil2 !== void 0 ? _res$shopCartList$fil2 : []\n    }));\n  },\n  updatePageType: (value, option) => option.setData(fpMergePre({\n    pageType: value\n  })),\n  getOrderInfo: async (value, option) => {\n    var _res$getDataConfig$va, _res$getDataConfig, _res$getDataConfig$va2, _res$freightConfig$va, _res$freightConfig, _res$freightConfig$va2, _res$userAddressListO, _res$userAddressListO2, _res$getDataConfig2, _res$getDataConfig2$v, _res$getDataConfig2$v2, _res$getDataConfig2$v3, _find;\n\n    const res = await option.query(doc.orderConfirmInfo);\n    option.setData(fpMergePre({\n      user: res === null || res === void 0 ? void 0 : res.oneUser,\n      payCardList: res === null || res === void 0 ? void 0 : res.payCardListOneUser,\n      userAddressList: res === null || res === void 0 ? void 0 : res.userAddressListOneUser,\n      selfAddress: (_res$getDataConfig$va = res === null || res === void 0 ? void 0 : (_res$getDataConfig = res.getDataConfig) === null || _res$getDataConfig === void 0 ? void 0 : (_res$getDataConfig$va2 = _res$getDataConfig.value) === null || _res$getDataConfig$va2 === void 0 ? void 0 : _res$getDataConfig$va2.list) !== null && _res$getDataConfig$va !== void 0 ? _res$getDataConfig$va : [],\n      freightConfig: (_res$freightConfig$va = res === null || res === void 0 ? void 0 : (_res$freightConfig = res.freightConfig) === null || _res$freightConfig === void 0 ? void 0 : (_res$freightConfig$va2 = _res$freightConfig.value) === null || _res$freightConfig$va2 === void 0 ? void 0 : _res$freightConfig$va2.list) !== null && _res$freightConfig$va !== void 0 ? _res$freightConfig$va : []\n    }));\n    option.setData(fpMergePre({\n      form: {\n        addressId: option.data.form.pickUpType === PickUpTypeEnum.Delivery && (res === null || res === void 0 ? void 0 : (_res$userAddressListO = res.userAddressListOneUser) === null || _res$userAddressListO === void 0 ? void 0 : (_res$userAddressListO2 = _res$userAddressListO.find(v => v.isDefault)) === null || _res$userAddressListO2 === void 0 ? void 0 : _res$userAddressListO2.id) || (res === null || res === void 0 ? void 0 : (_res$getDataConfig2 = res.getDataConfig) === null || _res$getDataConfig2 === void 0 ? void 0 : (_res$getDataConfig2$v = _res$getDataConfig2.value) === null || _res$getDataConfig2$v === void 0 ? void 0 : (_res$getDataConfig2$v2 = _res$getDataConfig2$v.list) === null || _res$getDataConfig2$v2 === void 0 ? void 0 : (_res$getDataConfig2$v3 = _res$getDataConfig2$v2[0]) === null || _res$getDataConfig2$v3 === void 0 ? void 0 : _res$getDataConfig2$v3.id),\n        paymentMethodCardId: ((_find = (res === null || res === void 0 ? void 0 : res.payCardListOneUser).find(v => v.isDefault)) === null || _find === void 0 ? void 0 : _find.id) || ''\n      }\n    }));\n  }\n});\nexport const CartPage = () => {\n  const {\n    state: stateSCM\n  } = useStoreModel(shopCartModel);\n  return stateSCM.pageType === pageTypeEnum.order && __jsx(OrderPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 55\n    }\n  }) || __jsx(ShopCartPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 72\n    }\n  });\n};","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/cart/index.tsx"],"names":["modelFactory","PickUpTypeEnum","dealMaybeNumber","fpMergePre","setForm","doc","ShopCartPage","React","useStoreModel","OrderPage","pageTypeEnum","shopCart","order","initForm","pickUpType","Self","addressId","paymentMethodCardId","deductCoin","saleTax","_addressList","option","data","form","Delivery","userAddressList","selfAddress","shopCartModel","user","payCardList","freightConfig","pageType","shopCartList","shopCartListNext","dealAddressList","state","map","v","combineAddress","province","city","streetAddress","name","fullName","contactInformation","phone","dealAddressData","find","id","initAddressId","isDefault","dealProductTotal","reduce","pre","cur","number","product","priceOut","clearForm","value","setData","getList","res","query","userShopCartList","filter","isNext","updatePageType","getOrderInfo","orderConfirmInfo","oneUser","payCardListOneUser","userAddressListOneUser","getDataConfig","list","CartPage","stateSCM"],"mappings":"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","sourcesContent":["import {modelFactory} from '../../ModelAction/modelUtil'\r\nimport {OrderInfoItemInput, ShopCart, User, UserAddress, UserPayCard} from '../../graphqlTypes/types'\r\nimport {PickUpTypeEnum} from '../../ss_common/enum'\r\nimport {dealMaybeNumber, fpMergePre} from '../../tools/utils'\r\nimport {setForm} from '../../tools/commonAction'\r\nimport {doc} from '../../graphqlTypes/doc'\r\nimport {ShopCartPage} from './shopCart'\r\nimport React from 'react'\r\nimport {useStoreModel} from '../../ModelAction/useStore'\r\nimport {OrderPage} from './orderPage'\r\n\r\nexport const pageTypeEnum = {\r\n  shopCart: 'shopCart',\r\n  order: 'order',\r\n}\r\n\r\nconst initForm: OrderInfoItemInput = {\r\n  pickUpType: PickUpTypeEnum.Self,\r\n  addressId: '',\r\n  paymentMethodCardId: '',\r\n  deductCoin: 0,\r\n  saleTax: 0,\r\n}\r\nconst _addressList = (option: BaseModelActionOption) => {\r\n  return (option.data.form.pickUpType === PickUpTypeEnum.Delivery && option.data.userAddressList) || option.data.selfAddress\r\n}\r\nexport const shopCartModel = modelFactory('shopCartModel', {\r\n  user: {} as User,\r\n  payCardList: [] as UserPayCard[],\r\n  userAddressList: [] as UserAddress[],\r\n  selfAddress: [] as any[],\r\n  freightConfig: [] as any[],\r\n  pageType: pageTypeEnum.shopCart,\r\n  shopCartList: [] as ShopCart[],\r\n  shopCartListNext: [] as ShopCart[],\r\n  form: {\r\n    ...initForm,\r\n  } as OrderInfoItemInput,\r\n  dealAddressList: ((state: any) => (state.form.pickUpType === PickUpTypeEnum.Delivery && state.userAddressList) || state.selfAddress.map((v: any) => ({\r\n    ...v,\r\n    combineAddress: `${v.province} ${v.city} ${v.streetAddress}`,\r\n    name: v.fullName,\r\n    contactInformation: v.phone,\r\n  }))) as (state: any) => UserAddress[],\r\n  dealAddressData: (state: any) => state.dealAddressList(state).find((v: UserAddress) => v.id === state.form.addressId) || {},\r\n  initAddressId: (state: any) => (state.form.pickUpType === PickUpTypeEnum.Delivery && state.userAddressList?.find((v: UserAddress) => v.isDefault)?.id) || state.selfAddress?.[0]?.id,\r\n  dealProductTotal: (state: any) => state.shopCartList.reduce((pre: any, cur: any) => pre + (dealMaybeNumber(cur?.number) * dealMaybeNumber(cur?.product?.priceOut)), 0)\r\n}, {\r\n  clearForm: (value, option) => option.setData(fpMergePre({\r\n    form: {\r\n      ...initForm,\r\n    },\r\n  })),\r\n  setForm: setForm,\r\n  getList: async (value, option) => {\r\n    const res = await option.query(doc.userShopCartList)\r\n    option.setData(fpMergePre({\r\n      shopCartList: res?.shopCartList.filter((v: ShopCart) => !v.isNext) ?? [],\r\n      shopCartListNext: res?.shopCartList.filter((v: ShopCart) => !!v.isNext) ?? [],\r\n    }))\r\n  },\r\n  updatePageType: (value: string, option) => option.setData(fpMergePre({\r\n    pageType: value,\r\n  })),\r\n  getOrderInfo: async (value, option) => {\r\n    const res = await option.query(doc.orderConfirmInfo)\r\n    option.setData(fpMergePre({\r\n      user: res?.oneUser,\r\n      payCardList: res?.payCardListOneUser,\r\n      userAddressList: res?.userAddressListOneUser,\r\n      selfAddress: res?.getDataConfig?.value?.list ?? [],\r\n      freightConfig: res?.freightConfig?.value?.list ?? [],\r\n    }))\r\n    option.setData(fpMergePre({\r\n      form: {\r\n        addressId: (option.data.form.pickUpType === PickUpTypeEnum.Delivery && res?.userAddressListOneUser?.find((v: UserAddress) => v.isDefault)?.id) || res?.getDataConfig?.value?.list?.[0]?.id,\r\n        paymentMethodCardId: (res?.payCardListOneUser as UserPayCard[]).find(v => v.isDefault)?.id || '',\r\n      },\r\n    }))\r\n  },\r\n})\r\n\r\nexport const CartPage = () => {\r\n  const {state: stateSCM} = useStoreModel(shopCartModel)\r\n  return (stateSCM.pageType === pageTypeEnum.order && <OrderPage/>) || <ShopCartPage/>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}