{"ast":null,"code":"import format from 'date-fns/format';\nimport set from 'lodash/set';\nimport { cloneDeep, isFunction, get, isArray, mergeWith, isString } from 'lodash';\nexport const getObjectURL = file => {\n  var _ref, _window$createObjectU, _window, _window$createObjectU2, _window2, _window2$URL, _window2$URL$createOb, _window3, _window3$webkitURL, _window3$webkitURL$cr;\n\n  // @ts-ignore\n  return (_ref = (_window$createObjectU = (_window = window) === null || _window === void 0 ? void 0 : (_window$createObjectU2 = _window.createObjectURL) === null || _window$createObjectU2 === void 0 ? void 0 : _window$createObjectU2.call(_window, file)) !== null && _window$createObjectU !== void 0 ? _window$createObjectU : (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$URL = _window2.URL) === null || _window2$URL === void 0 ? void 0 : (_window2$URL$createOb = _window2$URL.createObjectURL) === null || _window2$URL$createOb === void 0 ? void 0 : _window2$URL$createOb.call(_window2$URL, file)) !== null && _ref !== void 0 ? _ref : (_window3 = window) === null || _window3 === void 0 ? void 0 : (_window3$webkitURL = _window3.webkitURL) === null || _window3$webkitURL === void 0 ? void 0 : (_window3$webkitURL$cr = _window3$webkitURL.createObjectURL) === null || _window3$webkitURL$cr === void 0 ? void 0 : _window3$webkitURL$cr.call(_window3$webkitURL, file);\n};\nexport const parseFloatForInput = value => {\n  if (value === '-' || value === '') return value;\n\n  try {\n    return parseFloat(value);\n  } catch (e) {\n    console.error(e);\n  }\n};\nexport const fpSet = (origin, path, value) => {\n  let newData = cloneDeep(origin);\n\n  if (isFunction(value)) {\n    const oldData = get(origin, path);\n    set(newData, path, value(oldData));\n  } else {\n    set(newData, path, value);\n  }\n\n  return newData;\n};\nexport const delay = time => new Promise(resolve => setTimeout(resolve, time));\nexport const fpSetPre = (path, value) => origin => {\n  let newData = cloneDeep(origin);\n\n  if (isFunction(value)) {\n    const oldData = get(origin, path);\n    set(newData, path, value(oldData));\n  } else {\n    set(newData, path, value);\n  }\n\n  return newData;\n};\n\nconst customizer = (objValue, srcValue) => {\n  if (isArray(srcValue)) {\n    return srcValue;\n  }\n};\n\nexport const fpMerge = (origin, newValue) => {\n  return mergeWith({}, origin, newValue, customizer);\n};\nexport const fpMergePre = newValue => pre => mergeWith({}, pre, newValue, customizer);\nexport const fpRemove = (arr, index) => {\n  if (!arr) return [];\n  return [...(arr === null || arr === void 0 ? void 0 : arr.slice(0, index)), ...(arr === null || arr === void 0 ? void 0 : arr.slice(index + 1, arr === null || arr === void 0 ? void 0 : arr.length))];\n};\nexport const dealNumberZero = length => num => {\n  const _s = `${num !== null && num !== void 0 ? num : ''}`;\n  return Array(length - _s.length).fill('0').join('') + _s;\n};\nexport const formatDate = (date = '', formatString = 'YYYY-MM-dd HH:mm:ss') => {\n  if (!date) {\n    return '';\n  }\n\n  if (isString(date)) {\n    return format(new Date(date), formatString, {\n      useAdditionalDayOfYearTokens: true,\n      useAdditionalWeekYearTokens: true\n    });\n  }\n\n  return isNaN(date) ? '' : format(date, formatString, {\n    useAdditionalDayOfYearTokens: true,\n    useAdditionalWeekYearTokens: true\n  });\n};\nexport const dealNonBooleanProps = value => !!value ? 1 : 0;\nexport const formatMoney = (amount, decimalCount = 2, decimal = \".\", thousands = \",\") => {\n  try {\n    decimalCount = Math.abs(decimalCount);\n    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n    const negativeSign = amount < 0 ? \"-\" : \"\";\n    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n    let j = i.length > 3 ? i.length % 3 : 0; // @ts-ignore\n\n    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const dealMoney = (amount, pre = '') => `${pre}$${formatMoney(amount)}`;\nexport const dealMaybeNumber = num => num !== null && num !== void 0 ? num : 0;\nexport const getLastNumber = (str, num = 4) => str === null || str === void 0 ? void 0 : str.slice((str === null || str === void 0 ? void 0 : str.length) - num);\nexport default {\n  getObjectURL\n};\nexport const dealUrlQuery = queryObj => {\n  return `?${Object.keys(queryObj).map(value => `${value}=${queryObj[value]}`).join('&')}`;\n};\nexport const isPc = () => {\n  return /\\/pc\\//.test(location.href);\n};\nexport const dealLastNumber = (num, length = 4) => {\n  if (!num) {\n    return '';\n  }\n\n  return `**** **** **** ${num ? num === null || num === void 0 ? void 0 : num.slice((num === null || num === void 0 ? void 0 : num.length) - length) : ''}`;\n};","map":null,"metadata":{},"sourceType":"module"}