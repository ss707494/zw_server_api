{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Router from 'next/router';\nimport { fpMergePre, fpSetPre } from '../../tools/utils';\nimport { setToken } from '../../tools/token';\nimport { showMessage } from '../../components/Message/Message';\nimport { doc } from '../../graphqlTypes/doc';\nimport { modelFactory } from '../../ModelAction/modelUtil';\nimport { ls } from '../../tools/dealKey';\nexport var registerModel = modelFactory('register', {\n  step: 0,\n  userForm: {\n    name: '1',\n    password: '123',\n    confirmPassword: '123',\n    userInfo: {\n      name: 'ss',\n      email: 'ss',\n      phone: 'ss'\n    }\n  }\n}, {\n  setStep: function setStep(value, option) {\n    return option.setData(fpMergePre({\n      step: value\n    }));\n  },\n  setUserForm: function setUserForm(_ref, option) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        path = _ref2[0],\n        value = _ref2[1];\n\n    option.setData(fpSetPre(\"userForm.\".concat(path), value));\n  },\n  goNext: function goNext(value, option) {\n    var _option$data, _option$data$userForm, _option$data2, _option$data2$userFor, _option$data3, _option$data3$userFor, _option$data4, _option$data4$userFor, _option$data5, _option$data5$userFor;\n\n    if (!((_option$data = option.data) === null || _option$data === void 0 ? void 0 : (_option$data$userForm = _option$data.userForm) === null || _option$data$userForm === void 0 ? void 0 : _option$data$userForm.name) || !((_option$data2 = option.data) === null || _option$data2 === void 0 ? void 0 : (_option$data2$userFor = _option$data2.userForm) === null || _option$data2$userFor === void 0 ? void 0 : _option$data2$userFor.password) || !((_option$data3 = option.data) === null || _option$data3 === void 0 ? void 0 : (_option$data3$userFor = _option$data3.userForm) === null || _option$data3$userFor === void 0 ? void 0 : _option$data3$userFor.confirmPassword)) {\n      showMessage(ls('请填写表单'));\n      return;\n    }\n\n    if (((_option$data4 = option.data) === null || _option$data4 === void 0 ? void 0 : (_option$data4$userFor = _option$data4.userForm) === null || _option$data4$userFor === void 0 ? void 0 : _option$data4$userFor.password) !== ((_option$data5 = option.data) === null || _option$data5 === void 0 ? void 0 : (_option$data5$userFor = _option$data5.userForm) === null || _option$data5$userFor === void 0 ? void 0 : _option$data5$userFor.confirmPassword)) {\n      showMessage(ls('两次密码输入不一致'));\n      return;\n    }\n\n    option.setData(fpMergePre({\n      step: 1\n    }));\n  },\n  submit: function () {\n    var _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, option) {\n      var _option$data$userForm2, _registerUser$user;\n\n      var userInfo, _option$data$userForm3, confirmPassword, params, res, registerUser;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              userInfo = ((_option$data$userForm2 = option.data.userForm) === null || _option$data$userForm2 === void 0 ? void 0 : _option$data$userForm2.userInfo) || {};\n\n              if (!(!userInfo.phone || !userInfo.email)) {\n                _context.next = 4;\n                break;\n              }\n\n              showMessage(ls('请填写表单'));\n              return _context.abrupt(\"return\");\n\n            case 4:\n              _option$data$userForm3 = option.data.userForm, confirmPassword = _option$data$userForm3.confirmPassword, params = _objectWithoutProperties(_option$data$userForm3, [\"confirmPassword\"]);\n              _context.next = 7;\n              return option.mutate(doc.registerUser, {\n                data: _objectSpread(_objectSpread({}, params), {}, {\n                  userInfo: _objectSpread(_objectSpread({}, params.userInfo), {}, {\n                    name: params.name\n                  })\n                })\n              });\n\n            case 7:\n              res = _context.sent;\n              registerUser = res === null || res === void 0 ? void 0 : res.registerUser;\n\n              if (!(registerUser === null || registerUser === void 0 ? void 0 : (_registerUser$user = registerUser.user) === null || _registerUser$user === void 0 ? void 0 : _registerUser$user.id)) {\n                _context.next = 15;\n                break;\n              }\n\n              showMessage(ls('注册成功,即将登录'));\n              setToken(registerUser.token);\n              setToken(registerUser.refreshtoken, 'refreshtoken');\n              _context.next = 15;\n              return Router.replace(\"/home\", \"\", {\n                shallow: true\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function submit(_x, _x2) {\n      return _submit.apply(this, arguments);\n    }\n\n    return submit;\n  }(),\n  goToSignup: function goToSignup(value, option) {\n    Router.push('/login');\n  }\n});","map":{"version":3,"sources":["D:/code/zw/zw_client_web/utils/view/register/model.ts"],"names":["Router","fpMergePre","fpSetPre","setToken","showMessage","doc","modelFactory","ls","registerModel","step","userForm","name","password","confirmPassword","userInfo","email","phone","setStep","value","option","setData","setUserForm","path","goNext","data","submit","params","mutate","registerUser","res","user","id","token","refreshtoken","replace","shallow","goToSignup","push"],"mappings":"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","sourcesContent":["import Router from 'next/router'\r\nimport {fpMergePre, fpSetPre} from '../../tools/utils'\r\nimport {User, UserInRegister} from '../../graphqlTypes/types'\r\nimport {setToken} from '../../tools/token'\r\nimport {showMessage} from '../../components/Message/Message'\r\nimport {doc} from '../../graphqlTypes/doc'\r\nimport {modelFactory} from '../../ModelAction/modelUtil'\r\nimport { ls } from '../../tools/dealKey'\r\n\r\nexport const registerModel = modelFactory('register', {\r\n  step: 0,\r\n  userForm: {\r\n    name: '1',\r\n    password: '123',\r\n    confirmPassword: '123',\r\n    userInfo: {\r\n      name: 'ss',\r\n      email: 'ss',\r\n      phone: 'ss',\r\n    },\r\n  } as User & { confirmPassword?: string },\r\n}, {\r\n  setStep: (value: number, option) => option.setData(fpMergePre({step: value})),\r\n  setUserForm: ([path, value], option) => {\r\n    option.setData(fpSetPre(`userForm.${path}`, value))\r\n  },\r\n  goNext: (value, option) => {\r\n    if (!option.data?.userForm?.name || !option.data?.userForm?.password || !option.data?.userForm?.confirmPassword) {\r\n      showMessage(ls('请填写表单'))\r\n      return\r\n    }\r\n    if (option.data?.userForm?.password !== option.data?.userForm?.confirmPassword) {\r\n      showMessage(ls('两次密码输入不一致'))\r\n      return\r\n    }\r\n    option.setData(fpMergePre({\r\n      step: 1,\r\n    }))\r\n  },\r\n  submit: async (value, option) => {\r\n    const userInfo = option.data.userForm?.userInfo || {}\r\n    if (!userInfo.phone || !userInfo.email) {\r\n      showMessage(ls('请填写表单'))\r\n      return\r\n    }\r\n    const {confirmPassword, ...params} = option.data.userForm\r\n    const res = await option.mutate(doc.registerUser, {\r\n      data: {\r\n        ...params,\r\n        userInfo: {\r\n          ...params.userInfo,\r\n          name: params.name,\r\n        },\r\n      },\r\n    })\r\n    const registerUser = res?.registerUser as UserInRegister\r\n    if (registerUser?.user?.id) {\r\n      showMessage(ls('注册成功,即将登录'))\r\n      setToken(registerUser.token as string)\r\n      setToken(registerUser.refreshtoken as string, 'refreshtoken')\r\n      await Router.replace(`/home`, ``, {shallow: true})\r\n    }\r\n  },\r\n  goToSignup: (value, option) => {\r\n    Router.push('/login')\r\n  },\r\n})\r\n"]},"metadata":{},"sourceType":"module"}