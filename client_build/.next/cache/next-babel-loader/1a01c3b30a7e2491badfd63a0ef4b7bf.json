{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _config$publicRuntime, _config$publicRuntime2;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport 'cross-fetch/polyfill';\nimport { getToken, setToken } from '../tools/token';\nimport Router from 'next/router';\nimport ApolloClient from 'apollo-boost';\nimport { ssLog } from '../tools/global';\nimport { doc } from '../graphqlTypes/doc';\nimport { showMessage } from '../components/Message/Message';\nimport getConfig from 'next/config';\nvar config = getConfig();\nvar client_api_uri = (_config$publicRuntime = config === null || config === void 0 ? void 0 : (_config$publicRuntime2 = config.publicRuntimeConfig) === null || _config$publicRuntime2 === void 0 ? void 0 : _config$publicRuntime2.client_api_uri) !== null && _config$publicRuntime !== void 0 ? _config$publicRuntime : 'http://localhost:4464/type__graphql/api';\n\nvar omitTypename = function omitTypename(key, value) {\n  return key === '__typename' ? undefined : value;\n};\n\nexport var getClient = function getClient() {\n  var request = function request(operation) {\n    if (operation.variables) {\n      operation.variables = JSON.parse(JSON.stringify(operation.variables), omitTypename);\n    }\n\n    operation.setContext(function (_ref) {\n      var _ref$headers = _ref.headers,\n          headers = _ref$headers === void 0 ? {} : _ref$headers;\n      return {\n        headers: _objectSpread(_objectSpread({}, headers), {}, {\n          // 后台万能权限\n          Authorization: getToken()\n        })\n      };\n    });\n  };\n\n  var refreshToken = function refreshToken() {\n    graphQLQuery()(doc.refreshToken.doc, {\n      data: getToken('refreshtoken')\n    }).then(function (res) {\n      var _res$data, _res$data$refreshToke;\n\n      if ((_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$refreshToke = _res$data.refreshToken) === null || _res$data$refreshToke === void 0 ? void 0 : _res$data$refreshToke.token) {\n        var _res$data2, _res$data2$refreshTok, _res$data3, _res$data3$refreshTok;\n\n        setToken((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$refreshTok = _res$data2.refreshToken) === null || _res$data2$refreshTok === void 0 ? void 0 : _res$data2$refreshTok.token);\n        setToken((_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$refreshTok = _res$data3.refreshToken) === null || _res$data3$refreshTok === void 0 ? void 0 : _res$data3$refreshTok.refreshtoken, 'refreshtoken');\n        showMessage({\n          message: '登录超时,刷新登录信息'\n        });\n        Router.reload();\n      } else {\n        showMessage({\n          message: '请重新登录'\n        });\n        Router.push('/m/login');\n      }\n    })[\"catch\"](function (err) {\n      ssLog(err);\n      showMessage({\n        message: '请重新登录'\n      });\n      Router.push('/m/login');\n    });\n  };\n\n  var onError = function onError(_ref2) {\n    var response = _ref2.response,\n        operation = _ref2.operation,\n        graphQLErrors = _ref2.graphQLErrors,\n        networkError = _ref2.networkError;\n\n    // console.log(response)\n    // console.log(operation)\n    if (graphQLErrors) {\n      graphQLErrors.forEach(function (_ref3) {\n        var message = _ref3.message,\n            locations = _ref3.locations,\n            path = _ref3.path,\n            extensions = _ref3.extensions;\n        ssLog(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n\n        if ((extensions === null || extensions === void 0 ? void 0 : extensions.code) === 'UNAUTHENTICATED') {\n          showMessage({\n            message: '请重新登录'\n          });\n          Router.push('/m/login'); // if (message.includes('first')) {\n          //   refreshToken()\n          // } else {\n          // }\n        }\n\n        if (message.includes('Unexpected error')) {\n          showMessage({\n            message: message.split('\"')[1],\n            msg_type: 'error'\n          });\n        } else {\n          showMessage({\n            message: message\n          });\n        }\n      });\n    }\n\n    if (networkError) {\n      var _networkError$result;\n\n      var errMsg = 'bodyText' in networkError ? networkError === null || networkError === void 0 ? void 0 : networkError.bodyText : 'result' in networkError ? networkError === null || networkError === void 0 ? void 0 : (_networkError$result = networkError.result) === null || _networkError$result === void 0 ? void 0 : _networkError$result.error : '';\n      ssLog(\"[Network error]: \".concat(errMsg));\n\n      if ('statusCode' in networkError && (networkError === null || networkError === void 0 ? void 0 : networkError.statusCode) === 401) {\n        showMessage({\n          message: '请重新登录'\n        });\n        Router.push('/m/login'); // if (errMsg.includes('first') && getToken('refreshtoken')) {\n        //   refreshToken()\n        // } else {\n        // }\n      }\n    }\n  };\n\n  return new ApolloClient({\n    // link: httpLink,\n    uri: client_api_uri,\n    request: request,\n    onError: onError\n  });\n};\nvar defaultClient = getClient(); // const dealParams = ((params: any) => ({\n//   data: params,\n// }))\n\nvar dealParams = function dealParams(params) {\n  return params;\n};\n\nexport var graphQLQuery = function graphQLQuery() {\n  var client = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultClient;\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, params, option) {\n      var _option$dealParamsIn;\n\n      var _dealParamsIn;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _dealParamsIn = (_option$dealParamsIn = option === null || option === void 0 ? void 0 : option.dealParamsIn) !== null && _option$dealParamsIn !== void 0 ? _option$dealParamsIn : dealParams;\n              return _context.abrupt(\"return\", client.query(_objectSpread({\n                fetchPolicy: 'network-only',\n                query: query,\n                variables: _objectSpread({}, _dealParamsIn ? _dealParamsIn(params) : params)\n              }, option)));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var graphQLMutate = function graphQLMutate() {\n  var client = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultClient;\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(mutation, params, option) {\n      var _option$dealParamsIn2;\n\n      var _dealParamsIn;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _dealParamsIn = (_option$dealParamsIn2 = option === null || option === void 0 ? void 0 : option.dealParamsIn) !== null && _option$dealParamsIn2 !== void 0 ? _option$dealParamsIn2 : dealParams;\n              return _context2.abrupt(\"return\", client.mutate(_objectSpread({\n                mutation: mutation,\n                variables: _objectSpread({}, _dealParamsIn ? _dealParamsIn(params) : params)\n              }, option)));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x4, _x5, _x6) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\n\nvar serverClient = function serverClient() {\n  return new ApolloClient({\n    // link: httpLink,\n    uri: client_api_uri\n  });\n};\n\nexport var serverQuery = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(query, params, option) {\n    var _yield$graphQLQuery;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return graphQLQuery(serverClient())(query, params, option);\n\n          case 2:\n            _context3.t1 = _yield$graphQLQuery = _context3.sent;\n            _context3.t0 = _context3.t1 === null;\n\n            if (_context3.t0) {\n              _context3.next = 6;\n              break;\n            }\n\n            _context3.t0 = _yield$graphQLQuery === void 0;\n\n          case 6:\n            if (!_context3.t0) {\n              _context3.next = 10;\n              break;\n            }\n\n            _context3.t2 = void 0;\n            _context3.next = 11;\n            break;\n\n          case 10:\n            _context3.t2 = _yield$graphQLQuery.data;\n\n          case 11:\n            return _context3.abrupt(\"return\", _context3.t2);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function serverQuery(_x7, _x8, _x9) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var serverMutate = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(mutation, params, option) {\n    var _yield$graphQLMutate;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return graphQLMutate(serverClient())(mutation, params, option);\n\n          case 2:\n            _context4.t1 = _yield$graphQLMutate = _context4.sent;\n            _context4.t0 = _context4.t1 === null;\n\n            if (_context4.t0) {\n              _context4.next = 6;\n              break;\n            }\n\n            _context4.t0 = _yield$graphQLMutate === void 0;\n\n          case 6:\n            if (!_context4.t0) {\n              _context4.next = 10;\n              break;\n            }\n\n            _context4.t2 = void 0;\n            _context4.next = 11;\n            break;\n\n          case 10:\n            _context4.t2 = _yield$graphQLMutate.data;\n\n          case 11:\n            return _context4.abrupt(\"return\", _context4.t2);\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function serverMutate(_x10, _x11, _x12) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}