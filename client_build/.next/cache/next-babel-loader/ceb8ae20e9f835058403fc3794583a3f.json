{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Router, { useRouter } from 'next/router';\nimport { useStoreModel } from '../../../ModelAction/useStore';\nimport { KeyboardArrowRight } from '@material-ui/icons';\nimport { Breadcrumbs, ButtonBase, LinearProgress, Link, Typography } from '@material-ui/core';\nimport { dealUrlQuery, fpMergePre } from '../../../tools/utils';\nimport { HeaderTitle } from '../../../components/HeaderTitle/HeaderTitle';\nimport { doc } from '../../../graphqlTypes/doc';\nimport { BScroller } from '../../../components/BScroll/BScroller';\nimport { modelFactory } from '../../../ModelAction/modelUtil';\nimport styled from 'styled-components';\nimport { grey } from '@material-ui/core/colors';\nimport { dealImgUrl } from '../../../tools/img';\nimport { GroupProductItem, ProductItem } from '../../../components/ProductItem/ProductItem';\nimport { ll } from '../../../tools/dealKey';\nimport { NoData } from '../../../components/NoData/NoData';\nimport { CategoryRootName } from '../../../ss_common/enum';\nimport { UpdateShopCart } from '../../../components/ProductItem/UpdateShopCart';\nimport { HomeType } from '../home/appModule';\nimport { homeTabsModel } from '../home/components/Tabs/Tabs';\nexport const CategoryPageModel = modelFactory('CategoryPage', {\n  productList: [],\n  categoryList: [],\n  actCatId: ''\n}, {\n  getProductList: async (value, option) => {\n    var _res$productsInCatego, _res$productsInCatego2, _res$categoryList$lis, _res$categoryList;\n\n    const res = await option.query(doc.productsInCategory, {\n      data: value.categoryItemInput,\n      productItemInput: value.productItemInput\n    });\n    option.setData(fpMergePre({\n      productList: (_res$productsInCatego = res === null || res === void 0 ? void 0 : (_res$productsInCatego2 = res.productsInCategory) === null || _res$productsInCatego2 === void 0 ? void 0 : _res$productsInCatego2.list) !== null && _res$productsInCatego !== void 0 ? _res$productsInCatego : [],\n      categoryList: [...((_res$categoryList$lis = res === null || res === void 0 ? void 0 : (_res$categoryList = res.categoryList) === null || _res$categoryList === void 0 ? void 0 : _res$categoryList.list) !== null && _res$categoryList$lis !== void 0 ? _res$categoryList$lis : [])]\n    }));\n  },\n  changeActCatId: async (value, option) => {\n    option.setData(fpMergePre({\n      actCatId: value !== null && value !== void 0 ? value : ''\n    }));\n  }\n});\nconst Box = styled('div').withConfig({\n  displayName: \"id__Box\",\n  componentId: \"qp4xb8-0\"\n})([\"padding:18px 20px 0;> header{font-size:18px;font-weight:bold;margin:10px 0;}\"]);\nconst CategoryItemStyle = styled(ButtonBase).withConfig({\n  displayName: \"id__CategoryItemStyle\",\n  componentId: \"qp4xb8-1\"\n})([\"&&&{width:100%;height:60px;display:flex;border-radius:8px;overflow:hidden;margin-bottom:10px;background:\", \";> img{height:100%;width:70%;}> span{flex:1;color:#fff;display:flex;align-items:center;justify-content:center;}}\"], grey[700]);\nexport const categoryItemModel = modelFactory('categoryItemModel', {\n  test: '',\n  category: {}\n}, {\n  calcCatLevel: (value, option) => {\n    var _option$data;\n\n    const dealLevel = (obj, level = 1) => {\n      var _obj$parentCategory;\n\n      if (!(obj === null || obj === void 0 ? void 0 : obj.parentCategory) || (obj === null || obj === void 0 ? void 0 : (_obj$parentCategory = obj.parentCategory) === null || _obj$parentCategory === void 0 ? void 0 : _obj$parentCategory.id) === CategoryRootName) return level;\n      return dealLevel(obj === null || obj === void 0 ? void 0 : obj.parentCategory, level + 1);\n    };\n\n    return dealLevel((_option$data = option.data) === null || _option$data === void 0 ? void 0 : _option$data.category);\n  },\n  getLevel: async (value, option) => {\n    return await option.query(doc.categoryLevel, {\n      data: value\n    });\n  },\n  getCategory: async (value, option) => {\n    var _res$categoryRootPare;\n\n    const res = await option.query(doc.categoryRootParent, {\n      categoryItemInput: value\n    });\n    option.setData(fpMergePre({\n      category: (_res$categoryRootPare = res === null || res === void 0 ? void 0 : res.categoryRootParent) !== null && _res$categoryRootPare !== void 0 ? _res$categoryRootPare : {}\n    }));\n    return res === null || res === void 0 ? void 0 : res.categoryRootParent;\n  }\n});\nconst ListBox = styled.div.withConfig({\n  displayName: \"id__ListBox\",\n  componentId: \"qp4xb8-2\"\n})([\"display:grid;grid-template-columns:repeat(\", \",1fr);grid-gap:16px;\"], props => props.columns || 2);\nexport const CategoryPage = () => {\n  var _ref, _router$query, _stateCategoryItemMod, _stateCategoryItemMod2, _stateCategoryItemMod3;\n\n  const router = useRouter();\n  const id = (_ref = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id) !== null && _ref !== void 0 ? _ref : '';\n  const {\n    state: stateCPM,\n    actions: actionsCPM,\n    getLoad\n  } = useStoreModel(CategoryPageModel);\n  const {\n    actions: actionsCI,\n    state: stateCategoryItemModel\n  } = useStoreModel(categoryItemModel);\n  const {\n    state: stateHomeTabs,\n    actions: actionsHomeTabs\n  } = useStoreModel(homeTabsModel);\n  useEffect(() => {\n    var _ref2;\n\n    actionsHomeTabs.setHomeType((_ref2 = router.query.homeType) !== null && _ref2 !== void 0 ? _ref2 : HomeType.home);\n  }, [actionsHomeTabs, router.query.homeType]);\n\n  const CategoryItem = v => {\n    return __jsx(CategoryItemStyle, {\n      key: `CategoryItem_${v.id}`,\n      onClick: async () => {\n        var _await$actionsCI$getL;\n\n        const _query = dealUrlQuery({\n          homeType: router.query.homeType\n        });\n\n        if (((_await$actionsCI$getL = await actionsCI.getLevel({\n          id: v.id\n        })) === null || _await$actionsCI$getL === void 0 ? void 0 : _await$actionsCI$getL.categoryLevel) === 3) {\n          await Router.push(`/m/productList/[id]${_query}`, `/m/productList/${v.id}${_query}`);\n        } else {\n          await Router.push(`/m/category/[id]${_query}`, `/m/category/${v.id}${_query}`);\n        }\n      }\n    }, __jsx(\"img\", {\n      src: dealImgUrl(v.imgUrl),\n      alt: \"\"\n    }), __jsx(\"span\", null, v.name, __jsx(KeyboardArrowRight, null)));\n  };\n\n  useEffect(() => {\n    if (id) {\n      actionsCPM.getProductList({\n        categoryItemInput: {\n          id\n        },\n        productItemInput: {\n          isGroup: router.query.homeType === HomeType.group ? 1 : 0\n        }\n      });\n      actionsCI.getCategory({\n        id\n      });\n    }\n  }, [actionsCI, actionsCPM, id, router.query.homeType]);\n  return __jsx(\"div\", null, __jsx(HeaderTitle, {\n    title: '',\n    showCart: router.query.homeType === HomeType.home,\n    showSearch: true\n  }), !!getLoad(doc.productsInCategory) && __jsx(LinearProgress, null), __jsx(Breadcrumbs, {\n    style: {\n      margin: '8px 0 0 8px'\n    },\n    separator: \"\\u203A\",\n    \"aria-label\": \"breadcrumb\"\n  }, [(_stateCategoryItemMod = stateCategoryItemModel.category) === null || _stateCategoryItemMod === void 0 ? void 0 : (_stateCategoryItemMod2 = _stateCategoryItemMod.parentCategory) === null || _stateCategoryItemMod2 === void 0 ? void 0 : _stateCategoryItemMod2.parentCategory, (_stateCategoryItemMod3 = stateCategoryItemModel.category) === null || _stateCategoryItemMod3 === void 0 ? void 0 : _stateCategoryItemMod3.parentCategory].filter(v => !!(v === null || v === void 0 ? void 0 : v.name) && (v === null || v === void 0 ? void 0 : v.name) !== CategoryRootName).map(e => __jsx(Link, {\n    key: `Breadcrumbs${e === null || e === void 0 ? void 0 : e.id}`,\n    color: \"inherit\",\n    href: \"#\",\n    onClick: async () => {\n      const _query = dealUrlQuery({\n        homeType: router.query.homeType\n      });\n\n      await Router.push(`/m/category/[id]${_query}`, `/m/category/${e === null || e === void 0 ? void 0 : e.id}${_query}`);\n    }\n  }, e === null || e === void 0 ? void 0 : e.name)), __jsx(Typography, {\n    color: \"textPrimary\"\n  }, stateCategoryItemModel.category.name)), __jsx(BScroller, {\n    boxHeight: 'calc(100vh - 60px)'\n  }, __jsx(Box, null, stateCPM.categoryList.length === 0 && stateCPM.productList.length === 0 && __jsx(NoData, null) || __jsx(React.Fragment, null, stateCPM.categoryList.map(value => CategoryItem(value)), __jsx(\"header\", null, ll('热门推荐')), stateCPM.productList.length === 0 && __jsx(NoData, null), __jsx(ListBox, {\n    columns: stateHomeTabs.homeType === HomeType.group ? 1 : 2\n  }, stateCPM.productList.map(value => stateHomeTabs.homeType === HomeType.group && __jsx(GroupProductItem, {\n    product: value,\n    key: `ProductItem_${value.id}`\n  }) || __jsx(ProductItem, {\n    key: `ProductItem_${value.id}`,\n    product: value\n  })))))), __jsx(UpdateShopCart, null));\n};","map":null,"metadata":{},"sourceType":"module"}